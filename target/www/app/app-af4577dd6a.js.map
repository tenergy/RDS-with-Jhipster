{"version":3,"sources":["app/app.module.js","app/services/user/user.service.js","app/services/profiles/profile.service.js","app/services/profiles/page-ribbon.directive.js","app/services/auth/sessions.service.js","app/services/auth/register.service.js","app/services/auth/principal.service.js","app/services/auth/password-reset-init.service.js","app/services/auth/password-reset-finish.service.js","app/services/auth/password.service.js","app/services/auth/has-authority.directive.js","app/services/auth/has-any-authority.directive.js","app/services/auth/auth.session.service.js","app/services/auth/auth.service.js","app/services/auth/activate.service.js","app/services/auth/account.service.js","app/layouts/navbar/navbar.controller.js","app/layouts/error/error.state.js","app/home/home.state.js","app/home/home.controller.js","app/entities/task/taskmySuffix-dialog.controller.js","app/entities/task/taskmySuffix-detail.controller.js","app/entities/task/taskmySuffix-delete-dialog.controller.js","app/entities/task/taskmySuffix.state.js","app/entities/task/taskmySuffix.controller.js","app/entities/task/task.service.js","app/entities/region/regionmySuffix-dialog.controller.js","app/entities/region/regionmySuffix-detail.controller.js","app/entities/region/regionmySuffix-delete-dialog.controller.js","app/entities/region/regionmySuffix.state.js","app/entities/region/regionmySuffix.controller.js","app/entities/region/region.service.js","app/entities/location/locationmySuffix-dialog.controller.js","app/entities/location/locationmySuffix-detail.controller.js","app/entities/location/locationmySuffix-delete-dialog.controller.js","app/entities/location/locationmySuffix.state.js","app/entities/location/locationmySuffix.controller.js","app/entities/location/location.service.js","app/entities/job-history/job-historymySuffix-dialog.controller.js","app/entities/job-history/job-historymySuffix-detail.controller.js","app/entities/job-history/job-historymySuffix-delete-dialog.controller.js","app/entities/job-history/job-historymySuffix.state.js","app/entities/job-history/job-historymySuffix.controller.js","app/entities/job-history/job-history.service.js","app/entities/job/jobmySuffix-dialog.controller.js","app/entities/job/jobmySuffix-detail.controller.js","app/entities/job/jobmySuffix-delete-dialog.controller.js","app/entities/job/jobmySuffix.state.js","app/entities/job/jobmySuffix.controller.js","app/entities/job/job.service.js","app/entities/entity.state.js","app/entities/employee/employeemySuffix-dialog.controller.js","app/entities/employee/employeemySuffix-detail.controller.js","app/entities/employee/employeemySuffix-delete-dialog.controller.js","app/entities/employee/employeemySuffix.state.js","app/entities/employee/employeemySuffix.controller.js","app/entities/employee/employee.service.js","app/entities/department/departmentmySuffix-dialog.controller.js","app/entities/department/departmentmySuffix-detail.controller.js","app/entities/department/departmentmySuffix-delete-dialog.controller.js","app/entities/department/departmentmySuffix.state.js","app/entities/department/departmentmySuffix.controller.js","app/entities/department/department.service.js","app/entities/country/countrymySuffix-dialog.controller.js","app/entities/country/countrymySuffix-detail.controller.js","app/entities/country/countrymySuffix-delete-dialog.controller.js","app/entities/country/countrymySuffix.state.js","app/entities/country/countrymySuffix.controller.js","app/entities/country/country.service.js","app/components/util/truncate-words.filter.js","app/components/util/truncate-characters.filter.js","app/components/util/sort-by.directive.js","app/components/util/sort.directive.js","app/components/util/parse-links.service.js","app/components/util/pagination-util.service.js","app/components/util/jhi-item-count.directive.js","app/components/util/date-util.service.js","app/components/util/data-util.service.js","app/components/util/capitalize.filter.js","app/components/util/base64.service.js","app/components/login/login.service.js","app/components/login/login.controller.js","app/components/form/show-validation.directive.js","app/components/form/pagination.constants.js","app/components/form/minbytes.directive.js","app/components/form/maxbytes.directive.js","app/components/alert/alert-error.directive.js","app/components/alert/alert.service.js","app/components/alert/alert.directive.js","app/blocks/interceptor/notification.interceptor.js","app/blocks/interceptor/errorhandler.interceptor.js","app/blocks/interceptor/auth-expired.interceptor.js","app/blocks/handlers/state.handler.js","app/blocks/config/uib-pagination.config.js","app/blocks/config/uib-pager.config.js","app/blocks/config/localstorage.config.js","app/blocks/config/http.config.js","app/blocks/config/compile.config.js","app/blocks/config/alert.config.js","app/app.state.js","app/app.constants.js","app/admin/user-management/user-management-dialog.controller.js","app/admin/user-management/user-management-detail.controller.js","app/admin/user-management/user-management-delete-dialog.controller.js","app/admin/user-management/user-management.state.js","app/admin/user-management/user-management.controller.js","app/admin/metrics/metrics.state.js","app/admin/metrics/metrics.service.js","app/admin/metrics/metrics.modal.controller.js","app/admin/metrics/metrics.controller.js","app/admin/logs/logs.state.js","app/admin/logs/logs.service.js","app/admin/logs/logs.controller.js","app/admin/health/health.state.js","app/admin/health/health.service.js","app/admin/health/health.modal.controller.js","app/admin/health/health.controller.js","app/admin/docs/docs.state.js","app/admin/configuration/configuration.state.js","app/admin/configuration/configuration.service.js","app/admin/configuration/configuration.controller.js","app/admin/audits/audits.state.js","app/admin/audits/audits.service.js","app/admin/audits/audits.controller.js","app/admin/admin.state.js","app/account/settings/settings.state.js","app/account/settings/settings.controller.js","app/account/sessions/sessions.state.js","app/account/sessions/sessions.controller.js","app/account/reset/request/reset.request.state.js","app/account/reset/request/reset.request.controller.js","app/account/reset/finish/reset.finish.state.js","app/account/reset/finish/reset.finish.controller.js","app/account/register/register.state.js","app/account/register/register.controller.js","app/account/password/password-strength-bar.directive.js","app/account/password/password.state.js","app/account/password/password.controller.js","app/account/activate/activate.state.js","app/account/activate/activate.controller.js","app/account/account.state.js","app/app.js"],"names":["run","stateHandler","initialize","angular","module","$inject","User","$resource","service","query","method","isArray","get","transformResponse","data","fromJson","save","update","delete","factory","ProfileService","$http","getProfileInfo","isUndefined","dataPromise","then","result","activeProfiles","response","ribbonEnv","inProduction","indexOf","swaggerEnabled","pageRibbon","$rootScope","linkFunc","scope","element","attrs","addClass","removeClass","directive","replace","restrict","template","link","Sessions","getAll","Register","Principal","$q","Account","authenticate","identity","_identity","_authenticated","hasAnyAuthority","authorities","i","length","hasAuthority","authority","this","_id","when","force","getAccountThen","account","deferred","resolve","getAccountCatch","defer","undefined","isDefined","promise","$promise","catch","isAuthenticated","isIdentityResolved","PasswordResetInit","PasswordResetFinish","Password","setVisible","setHidden","defineVisibility","reset","$watch","split","AuthServerProvider","$localStorage","getToken","token","authenticationToken","hasValidToken","login","credentials","encodeURIComponent","username","password","rememberMe","post","headers","Content-Type","success","logout","Auth","$state","$sessionStorage","LoginService","Activate","activateAccount","key","callback","cb","noop","err","bind","authorize","authThen","toState","parent","name","go","fromState","getPreviousState","previousState","resetPreviousState","params","storePreviousState","toStateParams","open","authReturn","changePassword","newPassword","createAccount","loginThen","reject","resetPasswordFinish","keyAndPassword","resetPasswordInit","mail","updateAccount","previousStateName","previousStateParams","interceptor","NavbarController","collapseNavbar","toggleNavbar","vm","isNavbarCollapsed","controller","stateConfig","$stateProvider","state","url","pageTitle","views","content@","templateUrl","config","controllerAs","HomeController","$scope","getAccount","register","$on","TaskMySuffixDialogController","$timeout","$stateParams","$uibModalInstance","entity","Task","Job","clear","dismiss","isSaving","task","id","onSaveSuccess","onSaveError","$emit","close","jobs","focus","TaskMySuffixDetailController","unsubscribe","event","TaskMySuffixDeleteController","confirmDelete","currentStateData","current","href","onEnter","$uibModal","backdrop","size","reload","title","description","TaskMySuffixController","loadAll","tasks","searchQuery","resourceUrl","RegionMySuffixDialogController","Region","region","RegionMySuffixDetailController","RegionMySuffixDeleteController","regionName","RegionMySuffixController","regions","LocationMySuffixDialogController","Location","Country","location","countries","filter","all","countryId","country","push","LocationMySuffixDetailController","LocationMySuffixDeleteController","streetAddress","postalCode","city","stateProvince","LocationMySuffixController","locations","JobHistoryMySuffixDialogController","JobHistory","Department","Employee","jobHistory","openCalendar","date","datePickerOpenStatus","jobId","job","departments","departmentId","department","employees","employeeId","employee","startDate","endDate","JobHistoryMySuffixDetailController","JobHistoryMySuffixDeleteController","language","JobHistoryMySuffixController","ParseLinks","AlertService","paginationConstants","sort","predicate","reverse","onSuccess","links","parse","totalItems","jobHistories","onError","error","message","page","itemsPerPage","loadPage","last","DateUtils","convertDateTimeFromServer","JobMySuffixDialogController","JobMySuffixDetailController","JobMySuffixDeleteController","value","squash","search","pagingParams","PaginationUtil","parsePage","parsePredicate","ascending","parseAscending","jobTitle","minSalary","maxSalary","JobMySuffixController","queryCount","transition","transitionTo","$current","currentSearch","abstract","EmployeeMySuffixDialogController","hireDate","EmployeeMySuffixDetailController","EmployeeMySuffixDeleteController","firstName","lastName","email","phoneNumber","salary","commissionPct","EmployeeMySuffixController","DepartmentMySuffixDialogController","locationId","DepartmentMySuffixDetailController","DepartmentMySuffixDeleteController","departmentName","DepartmentMySuffixController","CountryMySuffixDialogController","regionId","CountryMySuffixDetailController","CountryMySuffixDeleteController","countryName","CountryMySuffixController","words","wordsFilter","input","isNaN","inputWords","slice","join","characters","charactersFilter","chars","breakOnWord","substring","charAt","substr","lastspace","lastIndexOf","jhSortBy","parentCtrl","require","jhSort","SortController","bindToController","$element","applyClass","thisIcon","find","sortIcon","sortAsc","sortDesc","remove","add","resetClasses","allThIcons","field","$apply","triggerApply","values","$watchGroup","header","Error","parts","forEach","p","section","trim","queryString","RegExp","$0","$1","$2","$3","isString","parseInt","sortArray","pop","jhiItemCount","bindings","component","$filter","Date","convertLocalDateFromServer","dateString","convertLocalDateToServer","dateformat","DataUtils","$window","abbreviate","text","byteSize","base64String","endsWith","suffix","str","paddingSize","formatAsBytes","toString","openFile","type","toBase64","file","fileReader","FileReader","readAsDataURL","onload","e","base64Data","target","capitalize","capitalizeFilter","toLowerCase","toUpperCase","Base64","encode","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","charCodeAt","keyStr","decode","String","fromCharCode","modalInstance","animation","resetModal","LoginController","cancel","authenticationError","preventDefault","$broadcast","requestResetPassword","showValidation","formCtrl","each","$formGroup","$inputs","$input","inputName","attr","$invalid","$dirty","isInvalid","toggleClass","constant","minbytes","ngModel","$validators","modelValue","$isEmpty","numberOfBytes","maxbytes","jhiAlertErrorController","addErrorAlert","alerts","msg","timeout","toast","isToast","scoped","cleanHttpErrorListener","httpResponse","stopPropagation","status","Object","keys","errorHeader","entityKey","entityName","fieldErrors","fieldError","convertedField","fieldName","toJson","jhiAlertError","getService","$sce","position","warning","info","alertOptions","alert","trustAsHtml","alertId","closeAlert","addAlert","extAlerts","that","thisAlerts","closeAlertByIndex","map","index","splice","$get","showAsToast","provider","jhiAlertController","jhiAlert","notificationInterceptor","alertKey","param","errorHandlerInterceptor","responseError","path","authExpiredInterceptor","$injector","to","VERSION","stateChangeStart","external","stateChangeSuccess","toParams","fromParams","titleKey","document","paginationConfig","uibPaginationConfig","maxSize","boundaryLinks","firstText","previousText","nextText","lastText","pagerConfig","uibPagerConfig","localStorageConfig","$localStorageProvider","$sessionStorageProvider","setKeyPrefix","httpConfig","$urlRouterProvider","$httpProvider","httpRequestInterceptorCacheBusterProvider","$urlMatcherFactoryProvider","setMatchlist","otherwise","interceptors","val","equals","a","b","is","pattern","compileServiceConfig","$compileProvider","DEBUG_INFO_ENABLED","debugInfoEnabled","alertServiceConfig","AlertServiceProvider","navbar@","UserManagementDialogController","user","langKey","languages","UserManagementDetailController","load","UserManagementDeleteController","activated","createdBy","createdDate","lastModifiedBy","lastModifiedDate","resetDate","resetKey","UserManagementController","setActive","isActivated","hiddenUsersSize","users","currentAccount","JhiMetricsService","getMetrics","threadDump","JhiMetricsMonitoringModalController","getLabelClass","threadState","threadDumpAll","threadDumpBlocked","threadDumpRunnable","threadDumpTimedWaiting","threadDumpWaiting","JhiMetricsMonitoringController","refresh","updatingMetrics","metrics","refreshThreadDumpData","servicesStats","newValue","timers","LogsService","findAll","changeLevel","LogsController","level","loggers","JhiHealthService","checkHealth","transformHealthData","flattenHealthData","getBaseName","getSubSystemName","remainder","isHealthObject","hasSubSystem","addHealthObject","getModuleName","isLeaf","healthObject","healthData","details","hasDetails","extend","separator","HealthModalController","currentHealth","baseName","subSystemName","JhiHealthCheckController","statusState","updatingHealth","showHealth","health","JhiConfigurationService","getConfigPropsComplete","properties","orderBy","getEnv","getEnvComplete","vals","v","k","JhiConfigurationController","allConfiguration","configuration","AuditsService","fromDate","toDate","AuditsController","onChangeDate","dateFormat","audits","today","getFullYear","getMonth","getDate","previousMonth","SettingsController","settingsAccount","copyAccount","SessionsController","invalidate","series","sessions","RequestResetController","requestReset","errorEmailNotExists","resetAccount","ResetFinishController","finishReset","doNotMatch","confirmPassword","keyMissing","RegisterController","registerAccount","errorUserExists","errorEmailExists","passwordStrengthBar","iElement","strength","colors","mesureStrength","_force","_regex","_lowerLetters","test","_upperLetters","_numbers","_symbols","_flags","_passedMatches","$","grep","el","Math","min","getColor","s","idx","col","c","children","css","background-color","passwordToCheck","PasswordController","ActivationController","$templateCache","put"],"mappings":"CAAA,WACA,YAqBA,SAAAA,GAAAC,GACAA,EAAAC,aApBAC,QACAC,OAAA,uBACA,YACA,aACA,YACA,SACA,gBACA,eACA,eACA,8BACA,YACA,kBAEA,wBAEAJ,IAAAA,GAEAA,EAAAK,SAAA,mBCpBA,WACA,YAQA,SAAAC,GAAAC,GACA,GAAAC,GAAAD,EAAA,uBACAE,OAAAC,OAAA,MAAAC,SAAA,GACAC,KACAF,OAAA,MACAG,kBAAA,SAAAC,GAEA,MADAA,GAAAX,QAAAY,SAAAD,KAIAE,MAAAN,OAAA,QACAO,QAAAP,OAAA,OACAQ,QAAAR,OAAA,WAGA,OAAAF,GArBAL,QACAC,OAAA,uBACAe,QAAA,OAAAb,GAEAA,EAAAD,SAAA,gBCPA,WACA,YAQA,SAAAe,GAAAC,GAUA,QAAAC,KAaA,MAZAnB,SAAAoB,YAAAC,KACAA,EAAAH,EAAAT,IAAA,oBAAAa,KAAA,SAAAC,GACA,GAAAA,EAAAZ,KAAAa,eAAA,CACA,GAAAC,KAKA,OAJAA,GAAAD,eAAAD,EAAAZ,KAAAa,eACAC,EAAAC,UAAAH,EAAAZ,KAAAe,UACAD,EAAAE,aAAAJ,EAAAZ,KAAAa,eAAAI,QAAA,WAAA,EACAH,EAAAI,eAAAN,EAAAZ,KAAAa,eAAAI,QAAA,cAAA,EACAH,MAIAJ,EArBA,GAAAA,GAEAhB,GACAc,eAAAA,EAGA,OAAAd,GAdAL,QACAC,OAAA,uBACAe,QAAA,iBAAAC,GAEAA,EAAAf,SAAA,YCPA,WACA,YAQA,SAAA4B,GAAAb,EAAAc,GAUA,QAAAC,GAAAC,EAAAC,EAAAC,GACAlB,EAAAE,iBAAAG,KAAA,SAAAG,GACAA,EAAAC,YACAO,EAAAP,UAAAD,EAAAC,UACAQ,EAAAE,SAAAX,EAAAC,WACAQ,EAAAG,YAAA,aAdA,GAAAC,IACAC,SAAA,EACAC,SAAA,KACAC,SAAA,iEACAC,KAAAV,EAGA,OAAAM,GAdAtC,QACAC,OAAA,uBACAqC,UAAA,aAAAR,GAEAA,EAAA5B,SAAA,iBAAA,iBCPA,WACA,YAQA,SAAAyC,GAAAvC,GACA,MAAAA,GAAA,mCACAwC,QAAArC,OAAA,MAAAC,SAAA,KARAR,QACAC,OAAA,uBACAe,QAAA,WAAA2B,GAEAA,EAAAzC,SAAA,gBCPA,WACA,YAQA,SAAA2C,GAAAzC,GACA,MAAAA,GAAA,sBAPAJ,QACAC,OAAA,uBACAe,QAAA,WAAA6B,GAEAA,EAAA3C,SAAA,gBCPA,WACA,YAQA,SAAA4C,GAAAC,EAAAC,GAeA,QAAAC,GAAAC,GACAC,EAAAD,EACAE,EAAA,OAAAF,EAGA,QAAAG,GAAAC,GACA,IAAAF,IAAAD,IAAAA,EAAAG,YACA,OAAA,CAGA,KAAA,GAAAC,GAAA,EAAAA,EAAAD,EAAAE,OAAAD,IACA,GAAAJ,EAAAG,YAAA1B,QAAA0B,EAAAC,OAAA,EACA,OAAA,CAIA,QAAA,EAGA,QAAAE,GAAAC,GACA,MAAAN,GAIAO,KAAAT,WAAA5B,KAAA,SAAAsC,GACA,MAAAA,GAAAN,aAAAM,EAAAN,YAAA1B,QAAA8B,MAAA,GACA,WACA,OAAA,IANAX,EAAAc,MAAA,GAUA,QAAAX,GAAAY,GAsBA,QAAAC,GAAAC,GACAb,EAAAa,EAAArD,KACAyC,GAAA,EACAa,EAAAC,QAAAf,GAGA,QAAAgB,KACAhB,EAAA,KACAC,GAAA,EACAa,EAAAC,QAAAf,GA9BA,GAAAc,GAAAlB,EAAAqB,OAQA,OANAN,MAAA,IACAX,EAAAkB,QAKArE,QAAAsE,UAAAnB,IACAc,EAAAC,QAAAf,GAEAc,EAAAM,UAIAvB,EAAAvC,MAAA+D,SACAlD,KAAAyC,GACAU,MAAAN,GAEAF,EAAAM,SAeA,QAAAG,KACA,MAAAtB,GAGA,QAAAuB,KACA,MAAA3E,SAAAsE,UAAAnB,GArFA,GAAAA,GACAC,GAAA,EAEA/C,GACA4C,aAAAA,EACAI,gBAAAA,EACAI,aAAAA,EACAP,SAAAA,EACAwB,gBAAAA,EACAC,mBAAAA,EAGA,OAAAtE,GAnBAL,QACAC,OAAA,uBACAe,QAAA,YAAA8B,GAEAA,EAAA5C,SAAA,KAAA,cCPA,WACA,YAQA,SAAA0E,GAAAxE,GACA,GAAAC,GAAAD,EAAA,wCAEA,OAAAC,GATAL,QACAC,OAAA,uBACAe,QAAA,oBAAA4D,GAEAA,EAAA1E,SAAA,gBCPA,WACA,YAQA,SAAA2E,GAAAzE,GACA,GAAAC,GAAAD,EAAA,0CAEA,OAAAC,GATAL,QACAC,OAAA,uBACAe,QAAA,sBAAA6D,GAEAA,EAAA3E,SAAA,gBCPA,WACA,YAQA,SAAA4E,GAAA1E,GACA,GAAAC,GAAAD,EAAA,oCAEA,OAAAC,GATAL,QACAC,OAAA,uBACAe,QAAA,WAAA8D,GAEAA,EAAA5E,SAAA,gBCPA,WACA,YAQA,SAAAuD,GAAAX,GAQA,QAAAd,GAAAC,EAAAC,EAAAC,GACA,GAAAuB,GAAAvB,EAAAsB,aAAAlB,QAAA,OAAA,IAEAwC,EAAA,WACA7C,EAAAG,YAAA,WAEA2C,EAAA,WACA9C,EAAAE,SAAA,WAEA6C,EAAA,SAAAC,GAEAA,GACAH,IAGAjC,EAAAW,aAAAC,GACApC,KAAA,SAAAC,GACAA,EACAwD,IAEAC,MAKAtB,GAAAF,OAAA,IACAyB,GAAA,GAEAhD,EAAAkD,OAAA,WACA,MAAArC,GAAA4B,mBACA,WACAO,GAAA,MAtCA,GAAA3C,IACAE,SAAA,IACAE,KAAAV,EAGA,OAAAM,GAZAtC,QACAC,OAAA,uBACAqC,UAAA,eAAAmB,GAEAA,EAAAvD,SAAA,gBCPA,WACA,YAQA,SAAAmD,GAAAP,GAQA,QAAAd,GAAAC,EAAAC,EAAAC,GACA,GAAAmB,GAAAnB,EAAAkB,gBAAAd,QAAA,OAAA,IAAA6C,MAAA,KAEAL,EAAA,WACA7C,EAAAG,YAAA,WAEA2C,EAAA,WACA9C,EAAAE,SAAA,WAEA6C,EAAA,SAAAC,GACA,GAAA3D,EACA2D,IACAH,IAGAxD,EAAAuB,EAAAO,gBAAAC,GACA/B,EACAwD,IAEAC,IAIA1B,GAAAE,OAAA,IACAyB,GAAA,GAEAhD,EAAAkD,OAAA,WACA,MAAArC,GAAA4B,mBACA,WACAO,GAAA,MApCA,GAAA3C,IACAE,SAAA,IACAE,KAAAV,EAGA,OAAAM,GAZAtC,QACAC,OAAA,uBACAqC,UAAA,kBAAAe,GAEAA,EAAAnD,SAAA,gBCPA,WACA,YAQA,SAAAmF,GAAAnE,EAAAoE,GAUA,QAAAC,KACA,GAAAC,GAAAF,EAAAG,mBACA,OAAAD,GAGA,QAAAE,KACA,GAAAF,GAAA7B,KAAA4B,UACA,SAAAC,EAGA,QAAAG,GAAAC,GACA,GAAAjF,GAAA,cAAAkF,mBAAAD,EAAAE,UACA,eAAAD,mBAAAD,EAAAG,UACA,gBAAAH,EAAAI,WAAA,eAEA,OAAA9E,GAAA+E,KAAA,qBAAAtF,GACAuF,SACAC,eAAA,uCAEAC,QAAA,SAAA3E,GACA,MAAAA,KAIA,QAAA4E,KAIAnF,EAAA+E,KAAA,cAAAG,QAAA,SAAA3E,GAIA,aAHA6D,GAAAG,oBAEAvE,EAAAT,IAAA,eACAgB,IAzCA,GAAApB,IACAkF,SAAAA,EACAG,cAAAA,EACAC,MAAAA,EACAU,OAAAA,EAGA,OAAAhG,GAdAL,QACAC,OAAA,uBACAe,QAAA,qBAAAqE,GAEAA,EAAAnF,SAAA,QAAA,oBCPA,WACA,YAQA,SAAAoG,GAAAvE,EAAAwE,EAAAC,EAAAzD,EAAAD,EAAAuC,EAAArC,EAAAyD,EAAA5D,EAAA6D,EAAA5B,EAAAF,EAAAC,GAkBA,QAAA8B,GAAAC,EAAAC,GACA,GAAAC,GAAAD,GAAA7G,QAAA+G,IAEA,OAAAL,GAAAjG,IAAAmG,EACA,SAAAnF,GACA,MAAAqF,GAAArF,IAEA,SAAAuF,GACA,MAAAF,GAAAE,IACAC,KAAAtD,OAAAa,SAGA,QAAA0C,GAAApD,GAKA,QAAAqD,KACA,GAAAzC,GAAA5B,EAAA4B,iBAQA,KALAA,GAAA,YAAA3C,EAAAqF,QAAAC,QAAA,UAAAtF,EAAAqF,QAAAE,MAAA,aAAAvF,EAAAqF,QAAAE,MACAf,EAAAgB,GAAA,QAIA7C,IAAA3C,EAAAyF,UAAAF,MAAAG,IAAA,CACA,GAAAC,GAAAD,GACAE,KACApB,EAAAgB,GAAAG,EAAAJ,KAAAI,EAAAE,QAGA7F,EAAAqF,QAAAzG,KAAA2C,aAAAvB,EAAAqF,QAAAzG,KAAA2C,YAAAE,OAAA,IAAAV,EAAAO,gBAAAtB,EAAAqF,QAAAzG,KAAA2C,eACAoB,EAEA6B,EAAAgB,GAAA,iBAKAM,EAAA9F,EAAAqF,QAAAE,KAAAvF,EAAA+F,eAGAvB,EAAAgB,GAAA,gBAAAjG,KAAA,WACAmF,EAAAsB,WA/BA,GAAAC,GAAAlF,EAAAI,SAAAY,GAAAxC,KAAA6F,EAEA,OAAAa,GAoCA,QAAAC,GAAAC,EAAArB,GACA,GAAAC,GAAAD,GAAA7G,QAAA+G,IAEA,OAAAjC,GAAAjE,KAAAqH,EAAA,WACA,MAAApB,MACA,SAAAE,GACA,MAAAF,GAAAE,KACAxC,SAGA,QAAA2D,GAAAnE,EAAA6C,GACA,GAAAC,GAAAD,GAAA7G,QAAA+G,IAEA,OAAAlE,GAAAhC,KAAAmD,EACA,WACA,MAAA8C,GAAA9C,IAEA,SAAAgD,GAEA,MADArD,MAAA0C,SACAS,EAAAE,IACAC,KAAAtD,OAAAa,SAGA,QAAAmB,GAAAC,EAAAiB,GAYA,QAAAuB,GAAAzH,GAIA,MAHAmC,GAAAI,UAAA,GAAA5B,KAAA,SAAA0C,GACAC,EAAAC,QAAAvD,KAEAmG,IAfA,GAAAA,GAAAD,GAAA7G,QAAA+G,KACA9C,EAAAlB,EAAAqB,OAiBA,OAfAiB,GAAAM,MAAAC,GACAtE,KAAA8G,GACA3D,MAAA,SAAAuC,GAGA,MAFArD,MAAA0C,SACApC,EAAAoE,OAAArB,GACAF,EAAAE,IACAC,KAAAtD,OASAM,EAAAM,QAIA,QAAA8B,KACAhB,EAAAgB,SACAvD,EAAAG,aAAA,MAGA,QAAAqF,GAAAC,EAAA1B,GACA,GAAAC,GAAAD,GAAA7G,QAAA+G,IAEA,OAAAlC,GAAAhE,KAAA0H,EAAA,WACA,MAAAzB,MACA,SAAAE,GACA,MAAAF,GAAAE,KACAxC,SAGA,QAAAgE,GAAAC,EAAA5B,GACA,GAAAC,GAAAD,GAAA7G,QAAA+G,IAEA,OAAAnC,GAAA/D,KAAA4H,EAAA,WACA,MAAA3B,MACA,SAAAE,GACA,MAAAF,GAAAE,KACAxC,SAGA,QAAAkE,GAAA1E,EAAA6C,GACA,GAAAC,GAAAD,GAAA7G,QAAA+G,IAEA,OAAA/D,GAAAnC,KAAAmD,EACA,WACA,MAAA8C,GAAA9C,IAEA,SAAAgD,GACA,MAAAF,GAAAE,IACAC,KAAAtD,OAAAa,SAGA,QAAAiD,KACA,GAAAC,GAAAlB,EAAAkB,aACA,OAAAA,GAGA,QAAAC,WACAnB,GAAAkB,cAGA,QAAAG,GAAAc,EAAAC,GACA,GAAAlB,IAAAJ,KAAAqB,EAAAf,OAAAgB,EACApC,GAAAkB,cAAAA,EAlKA,GAAArH,IACAsG,gBAAAA,EACAO,UAAAA,EACAe,eAAAA,EACAE,cAAAA,EACAV,iBAAAA,EACA9B,MAAAA,EACAU,OAAAA,EACAiC,oBAAAA,EACAE,kBAAAA,EACAb,mBAAAA,EACAE,mBAAAA,EACAa,cAAAA,EAGA,OAAArI,GAtBAL,QACAC,OAAA,uBACAe,QAAA,OAAAsF,GAEAA,EAAApG,SAAA,aAAA,SAAA,kBAAA,KAAA,YAAA,qBAAA,UAAA,eAAA,WAAA,WAAA,WAAA,oBAAA,0BCPA,WACA,YAQA,SAAAwG,GAAAtG,GACA,GAAAC,GAAAD,EAAA,mBACAK,KAAAF,OAAA,MAAAqH,UAAApH,SAAA,IAGA,OAAAH,GAXAL,QACAC,OAAA,uBACAe,QAAA,WAAA0F,GAEAA,EAAAxG,SAAA,gBCPA,WACA,YAQA,SAAA8C,GAAA5C,GACA,GAAAC,GAAAD,EAAA,kBACAK,KAAAF,OAAA,MAAAqH,UAAApH,SAAA,EACAqI,aACApH,SAAA,SAAAA,GAEA,MAAAA,OAMA,OAAApB,GAlBAL,QACAC,OAAA,uBACAe,QAAA,UAAAgC,GAEAA,EAAA9C,SAAA,gBCPA,WACA,YAQA,SAAA4I,GAAAvC,EAAAD,EAAAxD,EAAA7B,EAAAwF,GAiBA,QAAAd,KACAoD,IACAtC,EAAAsB,OAGA,QAAA1B,KACA0C,IACAzC,EAAAD,SACAE,EAAAgB,GAAA,QAGA,QAAAyB,KACAC,EAAAC,mBAAAD,EAAAC,kBAGA,QAAAH,KACAE,EAAAC,mBAAA,EAhCA,GAAAD,GAAAtF,IAEAsF,GAAAC,mBAAA,EACAD,EAAAvE,gBAAA5B,EAAA4B,gBAEAzD,EAAAE,iBAAAG,KAAA,SAAAG,GACAwH,EAAAtH,aAAAF,EAAAE,aACAsH,EAAApH,eAAAJ,EAAAI,iBAGAoH,EAAAtD,MAAAA,EACAsD,EAAA5C,OAAAA,EACA4C,EAAAD,aAAAA,EACAC,EAAAF,eAAAA,EACAE,EAAA1C,OAAAA,EArBAvG,QACAC,OAAA,uBACAkJ,WAAA,mBAAAL,GAEAA,EAAA5I,SAAA,SAAA,OAAA,YAAA,iBAAA,mBCPA,WACA,YAQA,SAAAkJ,GAAAC,GACAA,EACAC,MAAA,SACAjC,OAAA,MACAkC,IAAA,SACA5I,MACA2C,eACAkG,UAAA,eAEAC,OACAC,YACAC,YAAA,mCAIAL,MAAA,gBACAjC,OAAA,MACAkC,IAAA,gBACA5I,MACA2C,gBAEAmG,OACAC,YACAC,YAAA,0CA7BA3J,QACAC,OAAA,uBACA2J,OAAAR,GAEAA,EAAAlJ,SAAA,qBCPA,WACA,YAQA,SAAAkJ,GAAAC,GACAA,EAAAC,MAAA,QACAjC,OAAA,MACAkC,IAAA,IACA5I,MACA2C,gBAEAmG,OACAC,YACAC,YAAA,qBACAR,WAAA,iBACAU,aAAA,SAjBA7J,QACAC,OAAA,uBACA2J,OAAAR,GAEAA,EAAAlJ,SAAA,qBCPA,WACA,YAQA,SAAA4J,GAAAC,EAAAjH,EAAA2D,EAAAF,GAaA,QAAAyD,KACAlH,EAAAI,WAAA5B,KAAA,SAAA0C,GACAiF,EAAAjF,QAAAA,EACAiF,EAAAvE,gBAAA5B,EAAA4B,kBAGA,QAAAuF,KACA1D,EAAAgB,GAAA,YAnBA,GAAA0B,GAAAtF,IAEAsF,GAAAjF,QAAA,KACAiF,EAAAvE,gBAAA,KACAuE,EAAAtD,MAAAc,EAAAsB,KACAkB,EAAAgB,SAAAA,EACAF,EAAAG,IAAA,wBAAA,WACAF,MAGAA,IAjBAhK,QACAC,OAAA,uBACAkJ,WAAA,iBAAAW,GAEAA,EAAA5J,SAAA,SAAA,YAAA,eAAA,aCPA,WACA,YAQA,SAAAiK,GAAAC,EAAAL,EAAAM,EAAAC,EAAAC,EAAAC,EAAAC,GAYA,QAAAC,KACAJ,EAAAK,QAAA,UAGA,QAAA9J,KACAoI,EAAA2B,UAAA,EACA,OAAA3B,EAAA4B,KAAAC,GACAN,EAAA1J,OAAAmI,EAAA4B,KAAAE,EAAAC,GAEAR,EAAA3J,KAAAoI,EAAA4B,KAAAE,EAAAC,GAIA,QAAAD,GAAAxJ,GACAwI,EAAAkB,MAAA,iCAAA1J,GACA+I,EAAAY,MAAA3J,GACA0H,EAAA2B,UAAA,EAGA,QAAAI,KACA/B,EAAA2B,UAAA,EA/BA,GAAA3B,GAAAtF,IAEAsF,GAAA4B,KAAAN,EACAtB,EAAAyB,MAAAA,EACAzB,EAAApI,KAAAA,EACAoI,EAAAkC,KAAAV,EAAAnK,QAEA8J,EAAA,WACApK,QAAAkC,QAAA,2BAAAkJ,UAfApL,QACAC,OAAA,uBACAkJ,WAAA,+BAAAgB,GAEAA,EAAAjK,SAAA,WAAA,SAAA,eAAA,oBAAA,SAAA,OAAA,UCPA,WACA,YAQA,SAAAmL,GAAAtB,EAAAhI,EAAAsI,EAAA3C,EAAA6C,EAAAC,EAAAC,GACA,GAAAxB,GAAAtF,IAEAsF,GAAA4B,KAAAN,EACAtB,EAAAvB,cAAAA,EAAAJ,IAEA,IAAAgE,GAAAvJ,EAAAmI,IAAA,iCAAA,SAAAqB,EAAAhK,GACA0H,EAAA4B,KAAAtJ,GAEAwI,GAAAG,IAAA,WAAAoB,GAfAtL,QACAC,OAAA,uBACAkJ,WAAA,+BAAAkC,GAEAA,EAAAnL,SAAA,SAAA,aAAA,eAAA,gBAAA,SAAA,OAAA,UCPA,WACA,YAQA,SAAAsL,GAAAlB,EAAAC,EAAAC,GAOA,QAAAE,KACAJ,EAAAK,QAAA,UAGA,QAAAc,GAAAX,GACAN,EAAAzJ,QAAA+J,GAAAA,GACA,WACAR,EAAAY,OAAA,KAbA,GAAAjC,GAAAtF,IAEAsF,GAAA4B,KAAAN,EACAtB,EAAAyB,MAAAA,EACAzB,EAAAwC,cAAAA,EAXAzL,QACAC,OAAA,uBACAkJ,WAAA,+BAAAqC,GAEAA,EAAAtL,SAAA,oBAAA,SAAA,WCPA,WACA,YAQA,SAAAkJ,GAAAC,GACAA,EACAC,MAAA,gBACAjC,OAAA,SACAkC,IAAA,gBACA5I,MACA2C,aAAA,aACAkG,UAAA,SAEAC,OACAC,YACAC,YAAA,uCACAR,WAAA,yBACAU,aAAA,OAGA3F,aAGAoF,MAAA,uBACAjC,OAAA,SACAkC,IAAA,qBACA5I,MACA2C,aAAA,aACAkG,UAAA,QAEAC,OACAC,YACAC,YAAA,6CACAR,WAAA,+BACAU,aAAA,OAGA3F,SACAqG,QAAA,eAAA,OAAA,SAAAF,EAAAG,GACA,MAAAA,GAAA/J,KAAAqK,GAAAT,EAAAS,KAAAtG,WAEAkD,eAAA,SAAA,SAAAnB,GACA,GAAAmF,IACApE,KAAAf,EAAAoF,QAAArE,MAAA,eACAM,OAAArB,EAAAqB,OACA2B,IAAAhD,EAAAqF,KAAArF,EAAAoF,QAAArE,KAAAf,EAAAqB,QAEA,OAAA8D,QAIApC,MAAA,4BACAjC,OAAA,sBACAkC,IAAA,eACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,6CACAR,WAAA,+BACAU,aAAA,KACAkC,SAAA,SACAC,KAAA,KACA9H,SACAqG,QAAA,OAAA,SAAAC,GACA,MAAAA,GAAA/J,KAAAqK,GAAAT,EAAAS,KAAAtG,cAGAjD,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,QAAA0E,QAAA,KACA,WACA1F,EAAAgB,GAAA,WAIA+B,MAAA,oBACAjC,OAAA,eACAkC,IAAA,OACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,6CACAR,WAAA,+BACAU,aAAA,KACAkC,SAAA,SACAC,KAAA,KACA9H,SACAqG,OAAA,WACA,OACA2B,MAAA,KACAC,YAAA,KACArB,GAAA,UAIAvJ,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,eAAA,MAAA0E,OAAA,kBACA,WACA1F,EAAAgB,GAAA,sBAIA+B,MAAA,qBACAjC,OAAA,eACAkC,IAAA,aACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,6CACAR,WAAA,+BACAU,aAAA,KACAkC,SAAA,SACAC,KAAA,KACA9H,SACAqG,QAAA,OAAA,SAAAC,GACA,MAAAA,GAAA/J,KAAAqK,GAAAT,EAAAS,KAAAtG,cAGAjD,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,eAAA,MAAA0E,OAAA,kBACA,WACA1F,EAAAgB,GAAA,WAIA+B,MAAA,uBACAjC,OAAA,eACAkC,IAAA,eACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,oDACAR,WAAA,+BACAU,aAAA,KACAmC,KAAA,KACA9H,SACAqG,QAAA,OAAA,SAAAC,GACA,MAAAA,GAAA/J,KAAAqK,GAAAT,EAAAS,KAAAtG,cAGAjD,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,eAAA,MAAA0E,OAAA,kBACA,WACA1F,EAAAgB,GAAA,WAxJAvH,QACAC,OAAA,uBACA2J,OAAAR,GAEAA,EAAAlJ,SAAA,qBCPA,WACA,YAQA,SAAAkM,GAAArC,EAAAxD,EAAAiE,GAOA,QAAA6B,KACA7B,EAAAlK,MAAA,SAAAiB,GACA0H,EAAAqD,MAAA/K,EACA0H,EAAAsD,YAAA,OATA,GAAAtD,GAAAtF,IAEAsF,GAAAqD,SAEAD,IAXArM,QACAC,OAAA,uBACAkJ,WAAA,yBAAAiD,GAEAA,EAAAlM,SAAA,SAAA,SAAA,WCPA,WACA,YAOA,SAAAsK,GAAApK,GACA,GAAAoM,GAAA,eAEA,OAAApM,GAAAoM,MACAlM,OAAAC,OAAA,MAAAC,SAAA,GACAC,KACAF,OAAA,MACAG,kBAAA,SAAAC,GAIA,MAHAA,KACAA,EAAAX,QAAAY,SAAAD,IAEAA,IAGAG,QAAAP,OAAA,SApBAP,QACAC,OAAA,uBACAe,QAAA,OAAAwJ,GAEAA,EAAAtK,SAAA,gBCNA,WACA,YAQA,SAAAuM,GAAArC,EAAAL,EAAAM,EAAAC,EAAAC,EAAAmC,GAWA,QAAAhC,KACAJ,EAAAK,QAAA,UAGA,QAAA9J,KACAoI,EAAA2B,UAAA,EACA,OAAA3B,EAAA0D,OAAA7B,GACA4B,EAAA5L,OAAAmI,EAAA0D,OAAA5B,EAAAC,GAEA0B,EAAA7L,KAAAoI,EAAA0D,OAAA5B,EAAAC,GAIA,QAAAD,GAAAxJ,GACAwI,EAAAkB,MAAA,mCAAA1J,GACA+I,EAAAY,MAAA3J,GACA0H,EAAA2B,UAAA,EAGA,QAAAI,KACA/B,EAAA2B,UAAA,EA9BA,GAAA3B,GAAAtF,IAEAsF,GAAA0D,OAAApC,EACAtB,EAAAyB,MAAAA,EACAzB,EAAApI,KAAAA,EAEAuJ,EAAA,WACApK,QAAAkC,QAAA,2BAAAkJ,UAdApL,QACAC,OAAA,uBACAkJ,WAAA,iCAAAsD,GAEAA,EAAAvM,SAAA,WAAA,SAAA,eAAA,oBAAA,SAAA,aCPA,WACA,YAQA,SAAA0M,GAAA7C,EAAAhI,EAAAsI,EAAA3C,EAAA6C,EAAAmC,GACA,GAAAzD,GAAAtF,IAEAsF,GAAA0D,OAAApC,EACAtB,EAAAvB,cAAAA,EAAAJ,IAEA,IAAAgE,GAAAvJ,EAAAmI,IAAA,mCAAA,SAAAqB,EAAAhK,GACA0H,EAAA0D,OAAApL,GAEAwI,GAAAG,IAAA,WAAAoB,GAfAtL,QACAC,OAAA,uBACAkJ,WAAA,iCAAAyD,GAEAA,EAAA1M,SAAA,SAAA,aAAA,eAAA,gBAAA,SAAA,aCPA,WACA,YAQA,SAAA2M,GAAAvC,EAAAC,EAAAmC,GAOA,QAAAhC,KACAJ,EAAAK,QAAA,UAGA,QAAAc,GAAAX,GACA4B,EAAA3L,QAAA+J,GAAAA,GACA,WACAR,EAAAY,OAAA,KAbA,GAAAjC,GAAAtF,IAEAsF,GAAA0D,OAAApC,EACAtB,EAAAyB,MAAAA,EACAzB,EAAAwC,cAAAA,EAXAzL,QACAC,OAAA,uBACAkJ,WAAA,iCAAA0D,GAEAA,EAAA3M,SAAA,oBAAA,SAAA,aCPA,WACA,YAQA,SAAAkJ,GAAAC,GACAA,EACAC,MAAA,kBACAjC,OAAA,SACAkC,IAAA,kBACA5I,MACA2C,aAAA,aACAkG,UAAA,WAEAC,OACAC,YACAC,YAAA,2CACAR,WAAA,2BACAU,aAAA,OAGA3F,aAGAoF,MAAA,yBACAjC,OAAA,SACAkC,IAAA,uBACA5I,MACA2C,aAAA,aACAkG,UAAA,UAEAC,OACAC,YACAC,YAAA,iDACAR,WAAA,iCACAU,aAAA,OAGA3F,SACAqG,QAAA,eAAA,SAAA,SAAAF,EAAAqC,GACA,MAAAA,GAAAjM,KAAAqK,GAAAT,EAAAS,KAAAtG,WAEAkD,eAAA,SAAA,SAAAnB,GACA,GAAAmF,IACApE,KAAAf,EAAAoF,QAAArE,MAAA,iBACAM,OAAArB,EAAAqB,OACA2B,IAAAhD,EAAAqF,KAAArF,EAAAoF,QAAArE,KAAAf,EAAAqB,QAEA,OAAA8D,QAIApC,MAAA,8BACAjC,OAAA,wBACAkC,IAAA,eACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,iDACAR,WAAA,iCACAU,aAAA,KACAkC,SAAA,SACAC,KAAA,KACA9H,SACAqG,QAAA,SAAA,SAAAmC,GACA,MAAAA,GAAAjM,KAAAqK,GAAAT,EAAAS,KAAAtG,cAGAjD,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,QAAA0E,QAAA,KACA,WACA1F,EAAAgB,GAAA,WAIA+B,MAAA,sBACAjC,OAAA,iBACAkC,IAAA,OACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,iDACAR,WAAA,iCACAU,aAAA,KACAkC,SAAA,SACAC,KAAA,KACA9H,SACAqG,OAAA,WACA,OACAuC,WAAA,KACAhC,GAAA,UAIAvJ,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,iBAAA,MAAA0E,OAAA,oBACA,WACA1F,EAAAgB,GAAA,wBAIA+B,MAAA,uBACAjC,OAAA,iBACAkC,IAAA,aACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,iDACAR,WAAA,iCACAU,aAAA,KACAkC,SAAA,SACAC,KAAA,KACA9H,SACAqG,QAAA,SAAA,SAAAmC,GACA,MAAAA,GAAAjM,KAAAqK,GAAAT,EAAAS,KAAAtG,cAGAjD,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,iBAAA,MAAA0E,OAAA,oBACA,WACA1F,EAAAgB,GAAA,WAIA+B,MAAA,yBACAjC,OAAA,iBACAkC,IAAA,eACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,wDACAR,WAAA,iCACAU,aAAA,KACAmC,KAAA,KACA9H,SACAqG,QAAA,SAAA,SAAAmC,GACA,MAAAA,GAAAjM,KAAAqK,GAAAT,EAAAS,KAAAtG,cAGAjD,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,iBAAA,MAAA0E,OAAA,oBACA,WACA1F,EAAAgB,GAAA,WAvJAvH,QACAC,OAAA,uBACA2J,OAAAR,GAEAA,EAAAlJ,SAAA,qBCPA,WACA,YAQA,SAAA6M,GAAAhD,EAAAxD,EAAAmG,GAOA,QAAAL,KACAK,EAAApM,MAAA,SAAAiB,GACA0H,EAAA+D,QAAAzL,EACA0H,EAAAsD,YAAA,OATA,GAAAtD,GAAAtF,IAEAsF,GAAA+D,WAEAX,IAXArM,QACAC,OAAA,uBACAkJ,WAAA,2BAAA4D,GAEAA,EAAA7M,SAAA,SAAA,SAAA,aCPA,WACA,YAOA,SAAAwM,GAAAtM,GACA,GAAAoM,GAAA,iBAEA,OAAApM,GAAAoM,MACAlM,OAAAC,OAAA,MAAAC,SAAA,GACAC,KACAF,OAAA,MACAG,kBAAA,SAAAC,GAIA,MAHAA,KACAA,EAAAX,QAAAY,SAAAD,IAEAA,IAGAG,QAAAP,OAAA,SApBAP,QACAC,OAAA,uBACAe,QAAA,SAAA0L,GAEAA,EAAAxM,SAAA,gBCNA,WACA,YAQA,SAAA+M,GAAA7C,EAAAL,EAAAM,EAAAC,EAAAvH,EAAAwH,EAAA2C,EAAAC,GAoBA,QAAAzC,KACAJ,EAAAK,QAAA,UAGA,QAAA9J,KACAoI,EAAA2B,UAAA,EACA,OAAA3B,EAAAmE,SAAAtC,GACAoC,EAAApM,OAAAmI,EAAAmE,SAAArC,EAAAC,GAEAkC,EAAArM,KAAAoI,EAAAmE,SAAArC,EAAAC,GAIA,QAAAD,GAAAxJ,GACAwI,EAAAkB,MAAA,qCAAA1J,GACA+I,EAAAY,MAAA3J,GACA0H,EAAA2B,UAAA,EAGA,QAAAI,KACA/B,EAAA2B,UAAA,EAvCA,GAAA3B,GAAAtF,IAEAsF,GAAAmE,SAAA7C,EACAtB,EAAAyB,MAAAA,EACAzB,EAAApI,KAAAA,EACAoI,EAAAoE,UAAAF,EAAA7M,OAAAgN,OAAA,qBACAvK,EAAAwK,KAAAtE,EAAAmE,SAAA5I,SAAAyE,EAAAoE,UAAA7I,WAAAlD,KAAA,WACA,MAAA2H,GAAAmE,SAAAI,UAGAL,EAAA1M,KAAAqK,GAAA7B,EAAAmE,SAAAI,YAAAhJ,SAFAzB,EAAAsF,WAGA/G,KAAA,SAAAmM,GACAxE,EAAAoE,UAAAK,KAAAD,KAGArD,EAAA,WACApK,QAAAkC,QAAA,2BAAAkJ,UAvBApL,QACAC,OAAA,uBACAkJ,WAAA,mCAAA8D,GAEAA,EAAA/M,SAAA,WAAA,SAAA,eAAA,oBAAA,KAAA,SAAA,WAAA,cCPA,WACA,YAQA,SAAAyN,GAAA5D,EAAAhI,EAAAsI,EAAA3C,EAAA6C,EAAA2C,EAAAC,GACA,GAAAlE,GAAAtF,IAEAsF,GAAAmE,SAAA7C,EACAtB,EAAAvB,cAAAA,EAAAJ,IAEA,IAAAgE,GAAAvJ,EAAAmI,IAAA,qCAAA,SAAAqB,EAAAhK,GACA0H,EAAAmE,SAAA7L,GAEAwI,GAAAG,IAAA,WAAAoB,GAfAtL,QACAC,OAAA,uBACAkJ,WAAA,mCAAAwE,GAEAA,EAAAzN,SAAA,SAAA,aAAA,eAAA,gBAAA,SAAA,WAAA,cCPA,WACA,YAQA,SAAA0N,GAAAtD,EAAAC,EAAA2C,GAOA,QAAAxC,KACAJ,EAAAK,QAAA,UAGA,QAAAc,GAAAX,GACAoC,EAAAnM,QAAA+J,GAAAA,GACA,WACAR,EAAAY,OAAA,KAbA,GAAAjC,GAAAtF,IAEAsF,GAAAmE,SAAA7C,EACAtB,EAAAyB,MAAAA,EACAzB,EAAAwC,cAAAA,EAXAzL,QACAC,OAAA,uBACAkJ,WAAA,mCAAAyE,GAEAA,EAAA1N,SAAA,oBAAA,SAAA,eCPA,WACA,YAQA,SAAAkJ,GAAAC,GACAA,EACAC,MAAA,oBACAjC,OAAA,SACAkC,IAAA,oBACA5I,MACA2C,aAAA,aACAkG,UAAA,aAEAC,OACAC,YACAC,YAAA,+CACAR,WAAA,6BACAU,aAAA,OAGA3F,aAGAoF,MAAA,2BACAjC,OAAA,SACAkC,IAAA,yBACA5I,MACA2C,aAAA,aACAkG,UAAA,YAEAC,OACAC,YACAC,YAAA,qDACAR,WAAA,mCACAU,aAAA,OAGA3F,SACAqG,QAAA,eAAA,WAAA,SAAAF,EAAA6C,GACA,MAAAA,GAAAzM,KAAAqK,GAAAT,EAAAS,KAAAtG,WAEAkD,eAAA,SAAA,SAAAnB,GACA,GAAAmF,IACApE,KAAAf,EAAAoF,QAAArE,MAAA,mBACAM,OAAArB,EAAAqB,OACA2B,IAAAhD,EAAAqF,KAAArF,EAAAoF,QAAArE,KAAAf,EAAAqB,QAEA,OAAA8D,QAIApC,MAAA,gCACAjC,OAAA,0BACAkC,IAAA,eACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,qDACAR,WAAA,mCACAU,aAAA,KACAkC,SAAA,SACAC,KAAA,KACA9H,SACAqG,QAAA,WAAA,SAAA2C,GACA,MAAAA,GAAAzM,KAAAqK,GAAAT,EAAAS,KAAAtG,cAGAjD,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,QAAA0E,QAAA,KACA,WACA1F,EAAAgB,GAAA,WAIA+B,MAAA,wBACAjC,OAAA,mBACAkC,IAAA,OACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,qDACAR,WAAA,mCACAU,aAAA,KACAkC,SAAA,SACAC,KAAA,KACA9H,SACAqG,OAAA,WACA,OACAsD,cAAA,KACAC,WAAA,KACAC,KAAA,KACAC,cAAA,KACAlD,GAAA,UAIAvJ,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,mBAAA,MAAA0E,OAAA,sBACA,WACA1F,EAAAgB,GAAA,0BAIA+B,MAAA,yBACAjC,OAAA,mBACAkC,IAAA,aACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,qDACAR,WAAA,mCACAU,aAAA,KACAkC,SAAA,SACAC,KAAA,KACA9H,SACAqG,QAAA,WAAA,SAAA2C,GACA,MAAAA,GAAAzM,KAAAqK,GAAAT,EAAAS,KAAAtG,cAGAjD,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,mBAAA,MAAA0E,OAAA,sBACA,WACA1F,EAAAgB,GAAA,WAIA+B,MAAA,2BACAjC,OAAA,mBACAkC,IAAA,eACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,4DACAR,WAAA,mCACAU,aAAA,KACAmC,KAAA,KACA9H,SACAqG,QAAA,WAAA,SAAA2C,GACA,MAAAA,GAAAzM,KAAAqK,GAAAT,EAAAS,KAAAtG,cAGAjD,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,mBAAA,MAAA0E,OAAA,sBACA,WACA1F,EAAAgB,GAAA,WA1JAvH,QACAC,OAAA,uBACA2J,OAAAR,GAEAA,EAAAlJ,SAAA,qBCPA,WACA,YAQA,SAAA+N,GAAAlE,EAAAxD,EAAA2G,GAOA,QAAAb,KACAa,EAAA5M,MAAA,SAAAiB,GACA0H,EAAAiF,UAAA3M,EACA0H,EAAAsD,YAAA,OATA,GAAAtD,GAAAtF,IAEAsF,GAAAiF,aAEA7B,IAXArM,QACAC,OAAA,uBACAkJ,WAAA,6BAAA8E,GAEAA,EAAA/N,SAAA,SAAA,SAAA,eCPA,WACA,YAOA,SAAAgN,GAAA9M,GACA,GAAAoM,GAAA,mBAEA,OAAApM,GAAAoM,MACAlM,OAAAC,OAAA,MAAAC,SAAA,GACAC,KACAF,OAAA,MACAG,kBAAA,SAAAC,GAIA,MAHAA,KACAA,EAAAX,QAAAY,SAAAD,IAEAA,IAGAG,QAAAP,OAAA,SApBAP,QACAC,OAAA,uBACAe,QAAA,WAAAkM,GAEAA,EAAAhN,SAAA,gBCNA,WACA,YAQA,SAAAiO,GAAA/D,EAAAL,EAAAM,EAAAC,EAAAvH,EAAAwH,EAAA6D,EAAA3D,EAAA4D,EAAAC,GAwCA,QAAA5D,KACAJ,EAAAK,QAAA,UAGA,QAAA9J,KACAoI,EAAA2B,UAAA,EACA,OAAA3B,EAAAsF,WAAAzD,GACAsD,EAAAtN,OAAAmI,EAAAsF,WAAAxD,EAAAC,GAEAoD,EAAAvN,KAAAoI,EAAAsF,WAAAxD,EAAAC,GAIA,QAAAD,GAAAxJ,GACAwI,EAAAkB,MAAA,uCAAA1J,GACA+I,EAAAY,MAAA3J,GACA0H,EAAA2B,UAAA,EAGA,QAAAI,KACA/B,EAAA2B,UAAA,EAMA,QAAA4D,GAAAC,GACAxF,EAAAyF,qBAAAD,IAAA,EAlEA,GAAAxF,GAAAtF,IAEAsF,GAAAsF,WAAAhE,EACAtB,EAAAyB,MAAAA,EACAzB,EAAAyF,wBACAzF,EAAAuF,aAAAA,EACAvF,EAAApI,KAAAA,EACAoI,EAAAkC,KAAAV,EAAAnK,OAAAgN,OAAA,uBACAvK,EAAAwK,KAAAtE,EAAAsF,WAAA/J,SAAAyE,EAAAkC,KAAA3G,WAAAlD,KAAA,WACA,MAAA2H,GAAAsF,WAAAI,MAGAlE,EAAAhK,KAAAqK,GAAA7B,EAAAsF,WAAAI,QAAAnK,SAFAzB,EAAAsF,WAGA/G,KAAA,SAAAsN,GACA3F,EAAAkC,KAAAuC,KAAAkB,KAEA3F,EAAA4F,YAAAR,EAAA/N,OAAAgN,OAAA,uBACAvK,EAAAwK,KAAAtE,EAAAsF,WAAA/J,SAAAyE,EAAA4F,YAAArK,WAAAlD,KAAA,WACA,MAAA2H,GAAAsF,WAAAO,aAGAT,EAAA5N,KAAAqK,GAAA7B,EAAAsF,WAAAO,eAAAtK,SAFAzB,EAAAsF,WAGA/G,KAAA,SAAAyN,GACA9F,EAAA4F,YAAAnB,KAAAqB,KAEA9F,EAAA+F,UAAAV,EAAAhO,OAAAgN,OAAA,uBACAvK,EAAAwK,KAAAtE,EAAAsF,WAAA/J,SAAAyE,EAAA+F,UAAAxK,WAAAlD,KAAA,WACA,MAAA2H,GAAAsF,WAAAU,WAGAX,EAAA7N,KAAAqK,GAAA7B,EAAAsF,WAAAU,aAAAzK,SAFAzB,EAAAsF,WAGA/G,KAAA,SAAA4N,GACAjG,EAAA+F,UAAAtB,KAAAwB,KAGA9E,EAAA,WACApK,QAAAkC,QAAA,2BAAAkJ,UA0BAnC,EAAAyF,qBAAAS,WAAA,EACAlG,EAAAyF,qBAAAU,SAAA,EAtEApP,QACAC,OAAA,uBACAkJ,WAAA,qCAAAgF,GAEAA,EAAAjO,SAAA,WAAA,SAAA,eAAA,oBAAA,KAAA,SAAA,aAAA,MAAA,aAAA,eCPA,WACA,YAQA,SAAAmP,GAAAtF,EAAAhI,EAAAsI,EAAA3C,EAAA6C,EAAA6D,EAAA3D,EAAA4D,EAAAC,GACA,GAAArF,GAAAtF,IAEAsF,GAAAsF,WAAAhE,EACAtB,EAAAvB,cAAAA,EAAAJ,IAEA,IAAAgE,GAAAvJ,EAAAmI,IAAA,uCAAA,SAAAqB,EAAAhK,GACA0H,EAAAsF,WAAAhN,GAEAwI,GAAAG,IAAA,WAAAoB,GAfAtL,QACAC,OAAA,uBACAkJ,WAAA,qCAAAkG,GAEAA,EAAAnP,SAAA,SAAA,aAAA,eAAA,gBAAA,SAAA,aAAA,MAAA,aAAA,eCPA,WACA,YAQA,SAAAoP,GAAAhF,EAAAC,EAAA6D,GAOA,QAAA1D,KACAJ,EAAAK,QAAA,UAGA,QAAAc,GAAAX,GACAsD,EAAArN,QAAA+J,GAAAA,GACA,WACAR,EAAAY,OAAA,KAbA,GAAAjC,GAAAtF,IAEAsF,GAAAsF,WAAAhE,EACAtB,EAAAyB,MAAAA,EACAzB,EAAAwC,cAAAA,EAXAzL,QACAC,OAAA,uBACAkJ,WAAA,qCAAAmG,GAEAA,EAAApP,SAAA,oBAAA,SAAA,iBCPA,WACA,YAQA,SAAAkJ,GAAAC,GACAA,EACAC,MAAA,uBACAjC,OAAA,SACAkC,IAAA,uBACA5I,MACA2C,aAAA,aACAkG,UAAA,gBAEAC,OACAC,YACAC,YAAA,sDACAR,WAAA,+BACAU,aAAA,OAGA3F,aAGAoF,MAAA,8BACAjC,OAAA,SACAkC,IAAA,4BACA5I,MACA2C,aAAA,aACAkG,UAAA,cAEAC,OACAC,YACAC,YAAA,2DACAR,WAAA,qCACAU,aAAA,OAGA3F,SACAqG,QAAA,eAAA,aAAA,SAAAF,EAAA+D,GACA,MAAAA,GAAA3N,KAAAqK,GAAAT,EAAAS,KAAAtG,WAEAkD,eAAA,SAAA,SAAAnB,GACA,GAAAmF,IACApE,KAAAf,EAAAoF,QAAArE,MAAA,sBACAM,OAAArB,EAAAqB,OACA2B,IAAAhD,EAAAqF,KAAArF,EAAAoF,QAAArE,KAAAf,EAAAqB,QAEA,OAAA8D,QAIApC,MAAA,mCACAjC,OAAA,6BACAkC,IAAA,eACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,2DACAR,WAAA,qCACAU,aAAA,KACAkC,SAAA,SACAC,KAAA,KACA9H,SACAqG,QAAA,aAAA,SAAA6D,GACA,MAAAA,GAAA3N,KAAAqK,GAAAT,EAAAS,KAAAtG,cAGAjD,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,QAAA0E,QAAA,KACA,WACA1F,EAAAgB,GAAA,WAIA+B,MAAA,2BACAjC,OAAA,sBACAkC,IAAA,OACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,2DACAR,WAAA,qCACAU,aAAA,KACAkC,SAAA,SACAC,KAAA,KACA9H,SACAqG,OAAA,WACA,OACA4E,UAAA,KACAC,QAAA,KACAG,SAAA,KACAzE,GAAA,UAIAvJ,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,sBAAA,MAAA0E,OAAA,yBACA,WACA1F,EAAAgB,GAAA,6BAIA+B,MAAA,4BACAjC,OAAA,sBACAkC,IAAA,aACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,2DACAR,WAAA,qCACAU,aAAA,KACAkC,SAAA,SACAC,KAAA,KACA9H,SACAqG,QAAA,aAAA,SAAA6D,GACA,MAAAA,GAAA3N,KAAAqK,GAAAT,EAAAS,KAAAtG,cAGAjD,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,sBAAA,MAAA0E,OAAA,yBACA,WACA1F,EAAAgB,GAAA,WAIA+B,MAAA,8BACAjC,OAAA,sBACAkC,IAAA,eACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,kEACAR,WAAA,qCACAU,aAAA,KACAmC,KAAA,KACA9H,SACAqG,QAAA,aAAA,SAAA6D,GACA,MAAAA,GAAA3N,KAAAqK,GAAAT,EAAAS,KAAAtG,cAGAjD,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,sBAAA,MAAA0E,OAAA,yBACA,WACA1F,EAAAgB,GAAA,WAzJAvH,QACAC,OAAA,uBACA2J,OAAAR,GAEAA,EAAAlJ,SAAA,qBCPA,WACA,YAQA,SAAAsP,GAAAzF,EAAAxD,EAAA6H,EAAAqB,EAAAC,EAAAC,GAgBA,QAAAtD,KAMA,QAAAuD,KACA,GAAArO,IAAA0H,EAAA4G,UAAA,KAAA5G,EAAA6G,QAAA,MAAA,QAIA,OAHA,OAAA7G,EAAA4G,WACAtO,EAAAmM,KAAA,MAEAnM,EAGA,QAAAwO,GAAApP,EAAAuF,GACA+C,EAAA+G,MAAAP,EAAAQ,MAAA/J,EAAA,SACA+C,EAAAiH,WAAAhK,EAAA,gBACA,KAAA,GAAA3C,GAAA,EAAAA,EAAA5C,EAAA6C,OAAAD,IACA0F,EAAAkH,aAAAzC,KAAA/M,EAAA4C,IAIA,QAAA6M,GAAAC,GACAX,EAAAW,MAAAA,EAAA1P,KAAA2P,SAtBAlC,EAAA9N,OACAiQ,KAAAtH,EAAAsH,KACAvE,KAAA/C,EAAAuH,aACAZ,KAAAA,KACAG,EAAAK,GAsBA,QAAAlL,KACA+D,EAAAsH,KAAA,EACAtH,EAAAkH,gBACA9D,IAGA,QAAAoE,GAAAF,GACAtH,EAAAsH,KAAAA,EACAlE,IAlDA,GAAApD,GAAAtF,IAEAsF,GAAAkH,gBACAlH,EAAAwH,SAAAA,EACAxH,EAAAuH,aAAAb,EAAAa,aACAvH,EAAAsH,KAAA,EACAtH,EAAA+G,OACAU,KAAA,GAEAzH,EAAA4G,UAAA,KACA5G,EAAA/D,MAAAA,EACA+D,EAAA6G,SAAA,EAEAzD,IApBArM,QACAC,OAAA,uBACAkJ,WAAA,+BAAAqG,GAEAA,EAAAtP,SAAA,SAAA,SAAA,aAAA,aAAA,eAAA,0BCPA,WACA,YAOA,SAAAkO,GAAAhO,EAAAuQ,GACA,GAAAnE,GAAA,uBAEA,OAAApM,GAAAoM,MACAlM,OAAAC,OAAA,MAAAC,SAAA,GACAC,KACAF,OAAA,MACAG,kBAAA,SAAAC,GAMA,MALAA,KACAA,EAAAX,QAAAY,SAAAD,GACAA,EAAAwO,UAAAwB,EAAAC,0BAAAjQ,EAAAwO,WACAxO,EAAAyO,QAAAuB,EAAAC,0BAAAjQ,EAAAyO,UAEAzO,IAGAG,QAAAP,OAAA,SAtBAP,QACAC,OAAA,uBACAe,QAAA,aAAAoN,GAEAA,EAAAlO,SAAA,YAAA,gBCNA,WACA,YAQA,SAAA2Q,GAAAzG,EAAAL,EAAAM,EAAAC,EAAAC,EAAAE,EAAA6D,EAAA9D,GAaA,QAAAE,KACAJ,EAAAK,QAAA,UAGA,QAAA9J,KACAoI,EAAA2B,UAAA,EACA,OAAA3B,EAAA2F,IAAA9D,GACAL,EAAA3J,OAAAmI,EAAA2F,IAAA7D,EAAAC,GAEAP,EAAA5J,KAAAoI,EAAA2F,IAAA7D,EAAAC,GAIA,QAAAD,GAAAxJ,GACAwI,EAAAkB,MAAA,gCAAA1J,GACA+I,EAAAY,MAAA3J,GACA0H,EAAA2B,UAAA,EAGA,QAAAI,KACA/B,EAAA2B,UAAA,EAhCA,GAAA3B,GAAAtF,IAEAsF,GAAA2F,IAAArE,EACAtB,EAAAyB,MAAAA,EACAzB,EAAApI,KAAAA,EACAoI,EAAA+F,UAAAV,EAAAhO,QACA2I,EAAAqD,MAAA9B,EAAAlK,QAEA8J,EAAA,WACApK,QAAAkC,QAAA,2BAAAkJ,UAhBApL,QACAC,OAAA,uBACAkJ,WAAA,8BAAA0H,GAEAA,EAAA3Q,SAAA,WAAA,SAAA,eAAA,oBAAA,SAAA,MAAA,WAAA,WCPA,WACA,YAQA,SAAA4Q,GAAA/G,EAAAhI,EAAAsI,EAAA3C,EAAA6C,EAAAE,EAAA6D,EAAA9D,GACA,GAAAvB,GAAAtF,IAEAsF,GAAA2F,IAAArE,EACAtB,EAAAvB,cAAAA,EAAAJ,IAEA,IAAAgE,GAAAvJ,EAAAmI,IAAA,gCAAA,SAAAqB,EAAAhK,GACA0H,EAAA2F,IAAArN,GAEAwI,GAAAG,IAAA,WAAAoB,GAfAtL,QACAC,OAAA,uBACAkJ,WAAA,8BAAA2H,GAEAA,EAAA5Q,SAAA,SAAA,aAAA,eAAA,gBAAA,SAAA,MAAA,WAAA,WCPA,WACA,YAQA,SAAA6Q,GAAAzG,EAAAC,EAAAE,GAOA,QAAAC,KACAJ,EAAAK,QAAA,UAGA,QAAAc,GAAAX,GACAL,EAAA1J,QAAA+J,GAAAA,GACA,WACAR,EAAAY,OAAA,KAbA,GAAAjC,GAAAtF,IAEAsF,GAAA2F,IAAArE,EACAtB,EAAAyB,MAAAA,EACAzB,EAAAwC,cAAAA,EAXAzL,QACAC,OAAA,uBACAkJ,WAAA,8BAAA4H,GAEAA,EAAA7Q,SAAA,oBAAA,SAAA,UCPA,WACA,YAQA,SAAAkJ,GAAAC,GACAA,EACAC,MAAA,eACAjC,OAAA,SACAkC,IAAA,gCACA5I,MACA2C,aAAA,aACAkG,UAAA,QAEAC,OACAC,YACAC,YAAA,qCACAR,WAAA,wBACAU,aAAA,OAGAjC,QACA2I,MACAS,MAAA,IACAC,QAAA,GAEArB,MACAoB,MAAA,SACAC,QAAA,GAEAC,OAAA,MAEAhN,SACAiN,cAAA,eAAA,iBAAA,SAAA9G,EAAA+G,GACA,OACAb,KAAAa,EAAAC,UAAAhH,EAAAkG,MACAX,KAAAvF,EAAAuF,KACAC,UAAAuB,EAAAE,eAAAjH,EAAAuF;AACA2B,UAAAH,EAAAI,eAAAnH,EAAAuF,MACAsB,OAAA7G,EAAA6G,aAKA5H,MAAA,sBACAjC,OAAA,SACAkC,IAAA,oBACA5I,MACA2C,aAAA,aACAkG,UAAA,OAEAC,OACAC,YACAC,YAAA,2CACAR,WAAA,8BACAU,aAAA,OAGA3F,SACAqG,QAAA,eAAA,MAAA,SAAAF,EAAAI,GACA,MAAAA,GAAAhK,KAAAqK,GAAAT,EAAAS,KAAAtG,WAEAkD,eAAA,SAAA,SAAAnB,GACA,GAAAmF,IACApE,KAAAf,EAAAoF,QAAArE,MAAA,cACAM,OAAArB,EAAAqB,OACA2B,IAAAhD,EAAAqF,KAAArF,EAAAoF,QAAArE,KAAAf,EAAAqB,QAEA,OAAA8D,QAIApC,MAAA,2BACAjC,OAAA,qBACAkC,IAAA,eACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,2CACAR,WAAA,8BACAU,aAAA,KACAkC,SAAA,SACAC,KAAA,KACA9H,SACAqG,QAAA,MAAA,SAAAE,GACA,MAAAA,GAAAhK,KAAAqK,GAAAT,EAAAS,KAAAtG,cAGAjD,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,QAAA0E,QAAA,KACA,WACA1F,EAAAgB,GAAA,WAIA+B,MAAA,mBACAjC,OAAA,cACAkC,IAAA,OACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,2CACAR,WAAA,8BACAU,aAAA,KACAkC,SAAA,SACAC,KAAA,KACA9H,SACAqG,OAAA,WACA,OACAkH,SAAA,KACAC,UAAA,KACAC,UAAA,KACA7G,GAAA,UAIAvJ,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,cAAA,MAAA0E,OAAA,iBACA,WACA1F,EAAAgB,GAAA,qBAIA+B,MAAA,oBACAjC,OAAA,cACAkC,IAAA,aACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,2CACAR,WAAA,8BACAU,aAAA,KACAkC,SAAA,SACAC,KAAA,KACA9H,SACAqG,QAAA,MAAA,SAAAE,GACA,MAAAA,GAAAhK,KAAAqK,GAAAT,EAAAS,KAAAtG,cAGAjD,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,cAAA,MAAA0E,OAAA,iBACA,WACA1F,EAAAgB,GAAA,WAIA+B,MAAA,sBACAjC,OAAA,cACAkC,IAAA,eACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,kDACAR,WAAA,8BACAU,aAAA,KACAmC,KAAA,KACA9H,SACAqG,QAAA,MAAA,SAAAE,GACA,MAAAA,GAAAhK,KAAAqK,GAAAT,EAAAS,KAAAtG,cAGAjD,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,cAAA,MAAA0E,OAAA,iBACA,WACA1F,EAAAgB,GAAA,WA7KAvH,QACAC,OAAA,uBACA2J,OAAAR,GAEAA,EAAAlJ,SAAA,qBCPA,WACA,YAQA,SAAA0R,GAAA7H,EAAAxD,EAAAkE,EAAAgF,EAAAC,EAAAC,EAAAwB,GAWA,QAAA9E,KAMA,QAAAuD,KACA,GAAArO,IAAA0H,EAAA4G,UAAA,KAAA5G,EAAA6G,QAAA,MAAA,QAIA,OAHA,OAAA7G,EAAA4G,WACAtO,EAAAmM,KAAA,MAEAnM,EAEA,QAAAwO,GAAApP,EAAAuF,GACA+C,EAAA+G,MAAAP,EAAAQ,MAAA/J,EAAA,SACA+C,EAAAiH,WAAAhK,EAAA,iBACA+C,EAAA4I,WAAA5I,EAAAiH,WACAjH,EAAAkC,KAAAxK,EACAsI,EAAAsH,KAAAY,EAAAZ,KAEA,QAAAH,GAAAC,GACAX,EAAAW,MAAAA,EAAA1P,KAAA2P,SApBA7F,EAAAnK,OACAiQ,KAAAY,EAAAZ,KAAA,EACAvE,KAAA/C,EAAAuH,aACAZ,KAAAA,KACAG,EAAAK,GAoBA,QAAAK,GAAAF,GACAtH,EAAAsH,KAAAA,EACAtH,EAAA6I,aAGA,QAAAA,KACAvL,EAAAwL,aAAAxL,EAAAyL,UACAzB,KAAAtH,EAAAsH,KACAX,KAAA3G,EAAA4G,UAAA,KAAA5G,EAAA6G,QAAA,MAAA,QACAoB,OAAAjI,EAAAgJ,gBA5CA,GAAAhJ,GAAAtF,IAEAsF,GAAAwH,SAAAA,EACAxH,EAAA4G,UAAAsB,EAAAtB,UACA5G,EAAA6G,QAAAqB,EAAAI,UACAtI,EAAA6I,WAAAA,EACA7I,EAAAuH,aAAAb,EAAAa,aAEAnE,IAfArM,QACAC,OAAA,uBACAkJ,WAAA,wBAAAyI,GAEAA,EAAA1R,SAAA,SAAA,SAAA,MAAA,aAAA,eAAA,sBAAA,mBCPA,WACA,YAOA,SAAAuK,GAAArK,GACA,GAAAoM,GAAA,cAEA,OAAApM,GAAAoM,MACAlM,OAAAC,OAAA,MAAAC,SAAA,GACAC,KACAF,OAAA,MACAG,kBAAA,SAAAC,GAIA,MAHAA,KACAA,EAAAX,QAAAY,SAAAD,IAEAA,IAGAG,QAAAP,OAAA,SApBAP,QACAC,OAAA,uBACAe,QAAA,MAAAyJ,GAEAA,EAAAvK,SAAA,gBCNA,WACA,YAQA,SAAAkJ,GAAAC,GACAA,EAAAC,MAAA,UACA4I,UAAA,EACA7K,OAAA,QATArH,QACAC,OAAA,uBACA2J,OAAAR,GAEAA,EAAAlJ,SAAA,qBCPA,WACA,YAQA,SAAAiS,GAAA/H,EAAAL,EAAAM,EAAAC,EAAAC,EAAA+D,EAAAD,EAAA5D,GAgBA,QAAAC,KACAJ,EAAAK,QAAA,UAGA,QAAA9J,KACAoI,EAAA2B,UAAA,EACA,OAAA3B,EAAAiG,SAAApE,GACAwD,EAAAxN,OAAAmI,EAAAiG,SAAAnE,EAAAC,GAEAsD,EAAAzN,KAAAoI,EAAAiG,SAAAnE,EAAAC,GAIA,QAAAD,GAAAxJ,GACAwI,EAAAkB,MAAA,qCAAA1J,GACA+I,EAAAY,MAAA3J,GACA0H,EAAA2B,UAAA,EAGA,QAAAI,KACA/B,EAAA2B,UAAA,EAKA,QAAA4D,GAAAC,GACAxF,EAAAyF,qBAAAD,IAAA,EAzCA,GAAAxF,GAAAtF,IAEAsF,GAAAiG,SAAA3E,EACAtB,EAAAyB,MAAAA,EACAzB,EAAAyF,wBACAzF,EAAAuF,aAAAA,EACAvF,EAAApI,KAAAA,EACAoI,EAAA4F,YAAAR,EAAA/N,QACA2I,EAAAkC,KAAAV,EAAAnK,QACA2I,EAAA+F,UAAAV,EAAAhO,QAEA8J,EAAA,WACApK,QAAAkC,QAAA,2BAAAkJ,UA0BAnC,EAAAyF,qBAAA0D,UAAA,EA7CApS,QACAC,OAAA,uBACAkJ,WAAA,mCAAAgJ,GAEAA,EAAAjS,SAAA,WAAA,SAAA,eAAA,oBAAA,SAAA,WAAA,aAAA,UCPA,WACA,YAQA,SAAAmS,GAAAtI,EAAAhI,EAAAsI,EAAA3C,EAAA6C,EAAA+D,EAAAD,EAAA5D,GACA,GAAAxB,GAAAtF,IAEAsF,GAAAiG,SAAA3E,EACAtB,EAAAvB,cAAAA,EAAAJ,IAEA,IAAAgE,GAAAvJ,EAAAmI,IAAA,qCAAA,SAAAqB,EAAAhK,GACA0H,EAAAiG,SAAA3N,GAEAwI,GAAAG,IAAA,WAAAoB,GAfAtL,QACAC,OAAA,uBACAkJ,WAAA,mCAAAkJ,GAEAA,EAAAnS,SAAA,SAAA,aAAA,eAAA,gBAAA,SAAA,WAAA,aAAA,UCPA,WACA,YAQA,SAAAoS,GAAAhI,EAAAC,EAAA+D,GAOA,QAAA5D,KACAJ,EAAAK,QAAA,UAGA,QAAAc,GAAAX,GACAwD,EAAAvN,QAAA+J,GAAAA,GACA,WACAR,EAAAY,OAAA,KAbA,GAAAjC,GAAAtF,IAEAsF,GAAAiG,SAAA3E,EACAtB,EAAAyB,MAAAA,EACAzB,EAAAwC,cAAAA,EAXAzL,QACAC,OAAA,uBACAkJ,WAAA,mCAAAmJ,GAEAA,EAAApS,SAAA,oBAAA,SAAA,eCPA,WACA,YAQA,SAAAkJ,GAAAC,GACAA,EACAC,MAAA,oBACAjC,OAAA,SACAkC,IAAA,oBACA5I,MACA2C,aAAA,aACAkG,UAAA,aAEAC,OACAC,YACAC,YAAA,+CACAR,WAAA,6BACAU,aAAA,OAGA3F,aAGAoF,MAAA,2BACAjC,OAAA,SACAkC,IAAA,yBACA5I,MACA2C,aAAA,aACAkG,UAAA,YAEAC,OACAC,YACAC,YAAA,qDACAR,WAAA,mCACAU,aAAA,OAGA3F,SACAqG,QAAA,eAAA,WAAA,SAAAF,EAAAiE,GACA,MAAAA,GAAA7N,KAAAqK,GAAAT,EAAAS,KAAAtG,WAEAkD,eAAA,SAAA,SAAAnB,GACA,GAAAmF,IACApE,KAAAf,EAAAoF,QAAArE,MAAA,mBACAM,OAAArB,EAAAqB,OACA2B,IAAAhD,EAAAqF,KAAArF,EAAAoF,QAAArE,KAAAf,EAAAqB,QAEA,OAAA8D,QAIApC,MAAA,gCACAjC,OAAA,0BACAkC,IAAA,eACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,qDACAR,WAAA,mCACAU,aAAA,KACAkC,SAAA,SACAC,KAAA,KACA9H,SACAqG,QAAA,WAAA,SAAA+D,GACA,MAAAA,GAAA7N,KAAAqK,GAAAT,EAAAS,KAAAtG,cAGAjD,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,QAAA0E,QAAA,KACA,WACA1F,EAAAgB,GAAA,WAIA+B,MAAA,wBACAjC,OAAA,mBACAkC,IAAA,OACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,qDACAR,WAAA,mCACAU,aAAA,KACAkC,SAAA,SACAC,KAAA,KACA9H,SACAqG,OAAA,WACA,OACAgI,UAAA,KACAC,SAAA,KACAC,MAAA,KACAC,YAAA,KACAN,SAAA,KACAO,OAAA,KACAC,cAAA,KACA9H,GAAA,UAIAvJ,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,mBAAA,MAAA0E,OAAA,sBACA,WACA1F,EAAAgB,GAAA,0BAIA+B,MAAA,yBACAjC,OAAA,mBACAkC,IAAA,aACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,qDACAR,WAAA,mCACAU,aAAA,KACAkC,SAAA,SACAC,KAAA,KACA9H,SACAqG,QAAA,WAAA,SAAA+D,GACA,MAAAA,GAAA7N,KAAAqK,GAAAT,EAAAS,KAAAtG,cAGAjD,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,mBAAA,MAAA0E,OAAA,sBACA,WACA1F,EAAAgB,GAAA,WAIA+B,MAAA,2BACAjC,OAAA,mBACAkC,IAAA,eACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,4DACAR,WAAA,mCACAU,aAAA,KACAmC,KAAA,KACA9H,SACAqG,QAAA,WAAA,SAAA+D,GACA,MAAAA,GAAA7N,KAAAqK,GAAAT,EAAAS,KAAAtG,cAGAjD,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,mBAAA,MAAA0E,OAAA,sBACA,WACA1F,EAAAgB,GAAA,WA7JAvH,QACAC,OAAA,uBACA2J,OAAAR,GAEAA,EAAAlJ,SAAA,qBCPA,WACA,YAQA,SAAA2S,GAAA9I,EAAAxD,EAAA+H,EAAAmB,EAAAC,EAAAC,GAgBA,QAAAtD,KAMA,QAAAuD,KACA,GAAArO,IAAA0H,EAAA4G,UAAA,KAAA5G,EAAA6G,QAAA,MAAA,QAIA,OAHA,OAAA7G,EAAA4G,WACAtO,EAAAmM,KAAA,MAEAnM,EAGA,QAAAwO,GAAApP,EAAAuF,GACA+C,EAAA+G,MAAAP,EAAAQ,MAAA/J,EAAA,SACA+C,EAAAiH,WAAAhK,EAAA,gBACA,KAAA,GAAA3C,GAAA,EAAAA,EAAA5C,EAAA6C,OAAAD,IACA0F,EAAA+F,UAAAtB,KAAA/M,EAAA4C,IAIA,QAAA6M,GAAAC,GACAX,EAAAW,MAAAA,EAAA1P,KAAA2P,SAtBAhC,EAAAhO,OACAiQ,KAAAtH,EAAAsH,KACAvE,KAAA/C,EAAAuH,aACAZ,KAAAA,KACAG,EAAAK,GAsBA,QAAAlL,KACA+D,EAAAsH,KAAA,EACAtH,EAAA+F,aACA3C,IAGA,QAAAoE,GAAAF,GACAtH,EAAAsH,KAAAA,EACAlE,IAlDA,GAAApD,GAAAtF,IAEAsF,GAAA+F,aACA/F,EAAAwH,SAAAA,EACAxH,EAAAuH,aAAAb,EAAAa,aACAvH,EAAAsH,KAAA,EACAtH,EAAA+G,OACAU,KAAA,GAEAzH,EAAA4G,UAAA,KACA5G,EAAA/D,MAAAA,EACA+D,EAAA6G,SAAA,EAEAzD,IApBArM,QACAC,OAAA,uBACAkJ,WAAA,6BAAA0J,GAEAA,EAAA3S,SAAA,SAAA,SAAA,WAAA,aAAA,eAAA,0BCPA,WACA,YAOA,SAAAoO,GAAAlO,EAAAuQ,GACA,GAAAnE,GAAA,mBAEA,OAAApM,GAAAoM,MACAlM,OAAAC,OAAA,MAAAC,SAAA,GACAC,KACAF,OAAA,MACAG,kBAAA,SAAAC,GAKA,MAJAA,KACAA,EAAAX,QAAAY,SAAAD,GACAA,EAAAyR,SAAAzB,EAAAC,0BAAAjQ,EAAAyR,WAEAzR,IAGAG,QAAAP,OAAA,SArBAP,QACAC,OAAA,uBACAe,QAAA,WAAAsN,GAEAA,EAAApO,SAAA,YAAA,gBCNA,WACA,YAQA,SAAA4S,GAAA1I,EAAAL,EAAAM,EAAAC,EAAAvH,EAAAwH,EAAA8D,EAAAnB,EAAAoB,GAqBA,QAAA5D,KACAJ,EAAAK,QAAA,UAGA,QAAA9J,KACAoI,EAAA2B,UAAA,EACA,OAAA3B,EAAA8F,WAAAjE,GACAuD,EAAAvN,OAAAmI,EAAA8F,WAAAhE,EAAAC,GAEAqD,EAAAxN,KAAAoI,EAAA8F,WAAAhE,EAAAC,GAIA,QAAAD,GAAAxJ,GACAwI,EAAAkB,MAAA,uCAAA1J,GACA+I,EAAAY,MAAA3J,GACA0H,EAAA2B,UAAA,EAGA,QAAAI,KACA/B,EAAA2B,UAAA,EAxCA,GAAA3B,GAAAtF,IAEAsF,GAAA8F,WAAAxE,EACAtB,EAAAyB,MAAAA,EACAzB,EAAApI,KAAAA,EACAoI,EAAAiF,UAAAhB,EAAA5M,OAAAgN,OAAA,uBACAvK,EAAAwK,KAAAtE,EAAA8F,WAAAvK,SAAAyE,EAAAiF,UAAA1J,WAAAlD,KAAA,WACA,MAAA2H,GAAA8F,WAAAgE,WAGA7F,EAAAzM,KAAAqK,GAAA7B,EAAA8F,WAAAgE,aAAAvO,SAFAzB,EAAAsF,WAGA/G,KAAA,SAAA8L,GACAnE,EAAAiF,UAAAR,KAAAN,KAEAnE,EAAA+F,UAAAV,EAAAhO,QAEA8J,EAAA,WACApK,QAAAkC,QAAA,2BAAAkJ,UAxBApL,QACAC,OAAA,uBACAkJ,WAAA,qCAAA2J,GAEAA,EAAA5S,SAAA,WAAA,SAAA,eAAA,oBAAA,KAAA,SAAA,aAAA,WAAA,eCPA,WACA,YAQA,SAAA8S,GAAAjJ,EAAAhI,EAAAsI,EAAA3C,EAAA6C,EAAA8D,EAAAnB,EAAAoB,GACA,GAAArF,GAAAtF,IAEAsF,GAAA8F,WAAAxE,EACAtB,EAAAvB,cAAAA,EAAAJ,IAEA,IAAAgE,GAAAvJ,EAAAmI,IAAA,uCAAA,SAAAqB,EAAAhK,GACA0H,EAAA8F,WAAAxN,GAEAwI,GAAAG,IAAA,WAAAoB,GAfAtL,QACAC,OAAA,uBACAkJ,WAAA,qCAAA6J,GAEAA,EAAA9S,SAAA,SAAA,aAAA,eAAA,gBAAA,SAAA,aAAA,WAAA,eCPA,WACA,YAQA,SAAA+S,GAAA3I,EAAAC,EAAA8D,GAOA,QAAA3D,KACAJ,EAAAK,QAAA,UAGA,QAAAc,GAAAX,GACAuD,EAAAtN,QAAA+J,GAAAA,GACA,WACAR,EAAAY,OAAA,KAbA,GAAAjC,GAAAtF,IAEAsF,GAAA8F,WAAAxE,EACAtB,EAAAyB,MAAAA,EACAzB,EAAAwC,cAAAA,EAXAzL,QACAC,OAAA,uBACAkJ,WAAA,qCAAA8J,GAEAA,EAAA/S,SAAA,oBAAA,SAAA,iBCPA,WACA,YAQA,SAAAkJ,GAAAC,GACAA,EACAC,MAAA,sBACAjC,OAAA,SACAkC,IAAA,sBACA5I,MACA2C,aAAA,aACAkG,UAAA,eAEAC,OACAC,YACAC,YAAA,mDACAR,WAAA,+BACAU,aAAA,OAGA3F,aAGAoF,MAAA,6BACAjC,OAAA,SACAkC,IAAA,2BACA5I,MACA2C,aAAA,aACAkG,UAAA,cAEAC,OACAC,YACAC,YAAA,yDACAR,WAAA,qCACAU,aAAA,OAGA3F,SACAqG,QAAA,eAAA,aAAA,SAAAF,EAAAgE,GACA,MAAAA,GAAA5N,KAAAqK,GAAAT,EAAAS,KAAAtG,WAEAkD,eAAA,SAAA,SAAAnB,GACA,GAAAmF,IACApE,KAAAf,EAAAoF,QAAArE,MAAA,qBACAM,OAAArB,EAAAqB,OACA2B,IAAAhD,EAAAqF,KAAArF,EAAAoF,QAAArE,KAAAf,EAAAqB,QAEA,OAAA8D,QAIApC,MAAA,kCACAjC,OAAA,4BACAkC,IAAA,eACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,yDACAR,WAAA,qCACAU,aAAA,KACAkC,SAAA,SACAC,KAAA,KACA9H,SACAqG,QAAA,aAAA,SAAA8D,GACA,MAAAA,GAAA5N,KAAAqK,GAAAT,EAAAS,KAAAtG,cAGAjD,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,QAAA0E,QAAA,KACA,WACA1F,EAAAgB,GAAA,WAIA+B,MAAA,0BACAjC,OAAA,qBACAkC,IAAA,OACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,yDACAR,WAAA,qCACAU,aAAA,KACAkC,SAAA,SACAC,KAAA,KACA9H,SACAqG,OAAA,WACA,OACA2I,eAAA,KACApI,GAAA,UAIAvJ,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,qBAAA,MAAA0E,OAAA,wBACA,WACA1F,EAAAgB,GAAA,4BAIA+B,MAAA,2BACAjC,OAAA,qBACAkC,IAAA,aACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,yDACAR,WAAA,qCACAU,aAAA,KACAkC,SAAA,SACAC,KAAA,KACA9H,SACAqG,QAAA,aAAA,SAAA8D,GACA,MAAAA,GAAA5N,KAAAqK,GAAAT,EAAAS,KAAAtG,cAGAjD,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,qBAAA,MAAA0E,OAAA,wBACA,WACA1F,EAAAgB,GAAA,WAIA+B,MAAA,6BACAjC,OAAA,qBACAkC,IAAA,eACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,gEACAR,WAAA,qCACAU,aAAA,KACAmC,KAAA,KACA9H,SACAqG,QAAA,aAAA,SAAA8D,GACA,MAAAA,GAAA5N,KAAAqK,GAAAT,EAAAS,KAAAtG,cAGAjD,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,qBAAA,MAAA0E,OAAA,wBACA,WACA1F,EAAAgB,GAAA,WAvJAvH,QACAC,OAAA,uBACA2J,OAAAR,GAEAA,EAAAlJ,SAAA,qBCPA,WACA,YAQA,SAAAiT,GAAApJ,EAAAxD,EAAA8H,GAOA,QAAAhC,KACAgC,EAAA/N,MAAA,SAAAiB,GACA0H,EAAA4F,YAAAtN,EACA0H,EAAAsD,YAAA,OATA,GAAAtD,GAAAtF,IAEAsF,GAAA4F,eAEAxC,IAXArM,QACAC,OAAA,uBACAkJ,WAAA,+BAAAgK,GAEAA,EAAAjT,SAAA,SAAA,SAAA,iBCPA,WACA,YAOA,SAAAmO,GAAAjO,GACA,GAAAoM,GAAA,qBAEA,OAAApM,GAAAoM,MACAlM,OAAAC,OAAA,MAAAC,SAAA,GACAC,KACAF,OAAA,MACAG,kBAAA,SAAAC,GAIA,MAHAA,KACAA,EAAAX,QAAAY,SAAAD,IAEAA,IAGAG,QAAAP,OAAA,SApBAP,QACAC,OAAA,uBACAe,QAAA,aAAAqN,GAEAA,EAAAnO,SAAA,gBCNA,WACA,YAQA,SAAAkT,GAAAhJ,EAAAL,EAAAM,EAAAC,EAAAvH,EAAAwH,EAAA4C,EAAAT,GAoBA,QAAAhC,KACAJ,EAAAK,QAAA,UAGA,QAAA9J,KACAoI,EAAA2B,UAAA,EACA,OAAA3B,EAAAwE,QAAA3C,GACAqC,EAAArM,OAAAmI,EAAAwE,QAAA1C,EAAAC,GAEAmC,EAAAtM,KAAAoI,EAAAwE,QAAA1C,EAAAC,GAIA,QAAAD,GAAAxJ,GACAwI,EAAAkB,MAAA,oCAAA1J,GACA+I,EAAAY,MAAA3J,GACA0H,EAAA2B,UAAA,EAGA,QAAAI,KACA/B,EAAA2B,UAAA,EAvCA,GAAA3B,GAAAtF,IAEAsF,GAAAwE,QAAAlD,EACAtB,EAAAyB,MAAAA,EACAzB,EAAApI,KAAAA,EACAoI,EAAA+D,QAAAN,EAAApM,OAAAgN,OAAA,oBACAvK,EAAAwK,KAAAtE,EAAAwE,QAAAjJ,SAAAyE,EAAA+D,QAAAxI,WAAAlD,KAAA,WACA,MAAA2H,GAAAwE,QAAA4F,SAGA3G,EAAAjM,KAAAqK,GAAA7B,EAAAwE,QAAA4F,WAAA7O,SAFAzB,EAAAsF,WAGA/G,KAAA,SAAAqL,GACA1D,EAAA+D,QAAAU,KAAAf,KAGAvC,EAAA,WACApK,QAAAkC,QAAA,2BAAAkJ,UAvBApL,QACAC,OAAA,uBACAkJ,WAAA,kCAAAiK,GAEAA,EAAAlT,SAAA,WAAA,SAAA,eAAA,oBAAA,KAAA,SAAA,UAAA,aCPA,WACA,YAQA,SAAAoT,GAAAvJ,EAAAhI,EAAAsI,EAAA3C,EAAA6C,EAAA4C,EAAAT,GACA,GAAAzD,GAAAtF,IAEAsF,GAAAwE,QAAAlD,EACAtB,EAAAvB,cAAAA,EAAAJ,IAEA,IAAAgE,GAAAvJ,EAAAmI,IAAA,oCAAA,SAAAqB,EAAAhK,GACA0H,EAAAwE,QAAAlM,GAEAwI,GAAAG,IAAA,WAAAoB,GAfAtL,QACAC,OAAA,uBACAkJ,WAAA,kCAAAmK,GAEAA,EAAApT,SAAA,SAAA,aAAA,eAAA,gBAAA,SAAA,UAAA,aCPA,WACA,YAQA,SAAAqT,GAAAjJ,EAAAC,EAAA4C,GAOA,QAAAzC,KACAJ,EAAAK,QAAA,UAGA,QAAAc,GAAAX,GACAqC,EAAApM,QAAA+J,GAAAA,GACA,WACAR,EAAAY,OAAA,KAbA,GAAAjC,GAAAtF,IAEAsF,GAAAwE,QAAAlD,EACAtB,EAAAyB,MAAAA,EACAzB,EAAAwC,cAAAA,EAXAzL,QACAC,OAAA,uBACAkJ,WAAA,kCAAAoK,GAEAA,EAAArT,SAAA,oBAAA,SAAA,cCPA,WACA,YAQA,SAAAkJ,GAAAC,GACAA,EACAC,MAAA,mBACAjC,OAAA,SACAkC,IAAA,mBACA5I,MACA2C,aAAA,aACAkG,UAAA,aAEAC,OACAC,YACAC,YAAA,8CACAR,WAAA,4BACAU,aAAA,OAGA3F,aAGAoF,MAAA,0BACAjC,OAAA,SACAkC,IAAA,wBACA5I,MACA2C,aAAA,aACAkG,UAAA,WAEAC,OACAC,YACAC,YAAA,mDACAR,WAAA,kCACAU,aAAA,OAGA3F,SACAqG,QAAA,eAAA,UAAA,SAAAF,EAAA8C,GACA,MAAAA,GAAA1M,KAAAqK,GAAAT,EAAAS,KAAAtG,WAEAkD,eAAA,SAAA,SAAAnB,GACA,GAAAmF,IACApE,KAAAf,EAAAoF,QAAArE,MAAA,kBACAM,OAAArB,EAAAqB,OACA2B,IAAAhD,EAAAqF,KAAArF,EAAAoF,QAAArE,KAAAf,EAAAqB,QAEA,OAAA8D,QAIApC,MAAA,+BACAjC,OAAA,yBACAkC,IAAA,eACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,mDACAR,WAAA,kCACAU,aAAA,KACAkC,SAAA,SACAC,KAAA,KACA9H,SACAqG,QAAA,UAAA,SAAA4C,GACA,MAAAA,GAAA1M,KAAAqK,GAAAT,EAAAS,KAAAtG,cAGAjD,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,QAAA0E,QAAA,KACA,WACA1F,EAAAgB,GAAA,WAIA+B,MAAA,uBACAjC,OAAA,kBACAkC,IAAA,OACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,mDACAR,WAAA,kCACAU,aAAA,KACAkC,SAAA,SACAC,KAAA,KACA9H,SACAqG,OAAA,WACA,OACAiJ,YAAA,KACA1I,GAAA,UAIAvJ,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,kBAAA,MAAA0E,OAAA,qBACA,WACA1F,EAAAgB,GAAA,yBAIA+B,MAAA,wBACAjC,OAAA,kBACAkC,IAAA,aACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,mDACAR,WAAA,kCACAU,aAAA,KACAkC,SAAA,SACAC,KAAA,KACA9H,SACAqG,QAAA,UAAA,SAAA4C,GACA,MAAAA,GAAA1M,KAAAqK,GAAAT,EAAAS,KAAAtG,cAGAjD,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,kBAAA,MAAA0E,OAAA,qBACA,WACA1F,EAAAgB,GAAA,WAIA+B,MAAA,0BACAjC,OAAA,kBACAkC,IAAA,eACA5I,MACA2C,aAAA,cAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,0DACAR,WAAA,kCACAU,aAAA,KACAmC,KAAA,KACA9H,SACAqG,QAAA,UAAA,SAAA4C,GACA,MAAAA,GAAA1M,KAAAqK,GAAAT,EAAAS,KAAAtG,cAGAjD,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,kBAAA,MAAA0E,OAAA,qBACA,WACA1F,EAAAgB,GAAA,WAvJAvH,QACAC,OAAA,uBACA2J,OAAAR,GAEAA,EAAAlJ,SAAA,qBCPA,WACA,YAQA,SAAAuT,GAAA1J,EAAAxD,EAAA4G,GAOA,QAAAd,KACAc,EAAA7M,MAAA,SAAAiB,GACA0H,EAAAoE,UAAA9L,EACA0H,EAAAsD,YAAA,OATA,GAAAtD,GAAAtF,IAEAsF,GAAAoE,aAEAhB,IAXArM,QACAC,OAAA,uBACAkJ,WAAA,4BAAAsK,GAEAA,EAAAvT,SAAA,SAAA,SAAA,cCPA,WACA,YAOA,SAAAiN,GAAA/M,GACA,GAAAoM,GAAA,mBAEA,OAAApM,GAAAoM,MACAlM,OAAAC,OAAA,MAAAC,SAAA,GACAC,KACAF,OAAA,MACAG,kBAAA,SAAAC,GAIA,MAHAA,KACAA,EAAAX,QAAAY,SAAAD,IAEAA,IAGAG,QAAAP,OAAA,SApBAP,QACAC,OAAA,uBACAe,QAAA,UAAAmM,GAEAA,EAAAjN,SAAA,gBCNA,WACA,YAMA,SAAAwT,KAGA,QAAAC,GAAAC,EAAAF,GACA,GAAAG,MAAAH,GACA,MAAAE,EAEA,IAAAF,GAAA,EACA,MAAA,EAEA,IAAAE,EAAA,CACA,GAAAE,GAAAF,EAAAxO,MAAA,MACA0O,GAAAtQ,OAAAkQ,IACAE,EAAAE,EAAAC,MAAA,EAAAL,GAAAM,KAAA,KAAA,OAGA,MAAAJ,GAfA,MAAAD,GALA3T,QACAC,OAAA,uBACAqN,OAAA,QAAAoG,MCLA,WACA,YAMA,SAAAO,KAGA,QAAAC,GAAAN,EAAAO,EAAAC,GACA,GAAAP,MAAAM,GACA,MAAAP,EAEA,IAAAO,GAAA,EACA,MAAA,EAEA,IAAAP,GAAAA,EAAApQ,OAAA2Q,EAAA,CAGA,GAFAP,EAAAA,EAAAS,UAAA,EAAAF,GAEAC,EAOA,KAAA,MAAAR,EAAAU,OAAAV,EAAApQ,OAAA,IACAoQ,EAAAA,EAAAW,OAAA,EAAAX,EAAApQ,OAAA,OARA,CACA,GAAAgR,GAAAZ,EAAAa,YAAA,IAEAD,MAAA,IACAZ,EAAAA,EAAAW,OAAA,EAAAC,IAOA,MAAAZ,GAAA,MAEA,MAAAA,GAzBA,MAAAM,GALAlU,QACAC,OAAA,uBACAqN,OAAA,aAAA2G,MCLA,WACA,YAMA,SAAAS,KAUA,QAAA1S,GAAAC,EAAAC,EAAAC,EAAAwS,GACAzS,EAAA+E,KAAA,QAAA,WACA0N,EAAA/E,KAAAzN,EAAAuS,YAXA,GAAApS,IACAE,SAAA,IACAP,OAAA,EACA2S,QAAA,UACAlS,KAAAV,EAGA,OAAAM,GAZAtC,QACAC,OAAA,uBACAqC,UAAA,WAAAoS,MCLA,WACA,YAMA,SAAAG,KACA,GAAAvS,IACAE,SAAA,IACAP,OACA4N,UAAA,UACA0B,UAAA,IACA1K,SAAA,KAEAsC,WAAA2L,EACAjL,aAAA,KACAkL,kBAAA,EAGA,OAAAzS,GAKA,QAAAwS,GAAA/K,EAAAiL,GAWA,QAAAC,GAAA/S,GACA,GAAAgT,GAAAhT,EAAAiT,KAAA,kBACAC,EAAA,iBACAC,EAAA,+BACAC,EAAA,mCACAC,EAAAH,EAAA,IAAAE,EACAE,EAAAH,CACApM,GAAAsI,YACAgE,EAAAH,EAAA,IAAAC,EACAG,EAAAF,GAEArM,EAAAwM,eACAP,EAAA7S,YAAAkT,GACAL,EAAA9S,SAAAoT,GAGA,QAAAC,KACA,GAAAC,GAAAV,EAAAG,KAAA,kBACAC,EAAA,iBACAC,EAAA,+BACAC,EAAA,kCACAI,GAAArT,YAAAgT,EAAA,IAAAC,GACAI,EAAAtT,SAAAgT,GAGA,QAAAxF,GAAA+F,GACAA,IAAA1M,EAAA4G,UACA5G,EAAAsI,WAAA,EAEAtI,EAAAsI,WAAAtI,EAAAsI,UAEAtI,EAAA4G,UAAA8F,EACA5L,EAAA6L,SACA3M,EAAApC,WAGA,QAAAgP,GAAAC,GACA7M,EAAAwM,eACAK,GAAA,WAAAA,EAAA,IACA7M,EAAAgM,WAAAD,EAAAG,KAAA,kBAAAW,EAAA,GAAA,OAjDA,GAAA7M,GAAAtF,IAEAsF,GAAAgM,WAAAA,EACAhM,EAAAwM,aAAAA,EACAxM,EAAA2G,KAAAA,EACA3G,EAAA4M,aAAAA,EAEA9L,EAAAgM,aAAA,eAAA,gBAAA9M,EAAA4M,cACA5M,EAAA4M,eA/BA7V,QACAC,OAAA,uBACAqC,UAAA,SAAAuS,GAkBAC,EAAA5U,SAAA,SAAA,eCvBA,WACA,YAMA,SAAAuP,KAQA,QAAAQ,GAAA+F,GACA,GAAA,IAAAA,EAAAxS,OACA,KAAA,IAAAyS,OAAA,mCAIA,IAAAC,GAAAF,EAAA5Q,MAAA,KACA4K,IAoBA,OAlBAhQ,SAAAmW,QAAAD,EAAA,SAAAE,GACA,GAAAC,GAAAD,EAAAhR,MAAA,KACA,IAAA,IAAAiR,EAAA7S,OACA,KAAA,IAAAyS,OAAA,qCAEA,IAAA1M,GAAA8M,EAAA,GAAA9T,QAAA,QAAA,MAAA+T,OACAC,IACAhN,GAAAhH,QACA,GAAAiU,QAAA,uBAAA,KACA,SAAAC,EAAAC,EAAAC,EAAAC,GAAAL,EAAAG,GAAAE,GAEA,IAAArG,GAAAgG,EAAAhG,IACAvQ,SAAA6W,SAAAtG,KACAA,EAAAuG,SAAAvG,GAEA,IAAAjJ,GAAA+O,EAAA,GAAA9T,QAAA,aAAA,MAAA+T,MACAtG,GAAA1I,GAAAiJ,IAEAP,EAjCA,GAAA3P,IACA4P,MAAAA,EAGA,OAAA5P,GAVAL,QACAC,OAAA,uBACAe,QAAA,aAAAyO,MCLA,WACA,YAMA,SAAA2B,KAUA,QAAAI,GAAA5B,GACA,GAAAmH,GAAAnH,EAAAxK,MAAA,IACA,SAAA2R,EAAAvT,OAAA,IACA,QAAAoM,EAAAxK,MAAA,KAAA2O,OAAA,GAAA,GAQA,QAAA1C,GAAAd,GACA,MAAAuG,UAAAvG,GAIA,QAAAe,GAAA1B,GACA,GAAAmH,GAAAnH,EAAAxK,MAAA,IAIA,OAHA2R,GAAAvT,OAAA,GACAuT,EAAAC,MAEAD,EAAA/C,KAAA,KA7BA,GAAA3T,IACAmR,eAAAA,EACAH,UAAAA,EACAC,eAAAA,EAGA,OAAAjR,GAZAL,QACAC,OAAA,uBACAe,QAAA,iBAAAoQ,MCLA,WACA,YAEA,IAAA6F,IACAxU,SAAA,sRAKAyU,UACA3G,KAAA,IACAsB,WAAA,SACArB,aAAA,KAIAxQ,SACAC,OAAA,uBACAkX,UAAA,eAAAF,MClBA,WACA,YAQA,SAAAtG,GAAAyG,GAWA,QAAAxG,GAAAnC,GACA,MAAAA,GACA,GAAA4I,MAAA5I,GAEA,KAIA,QAAA6I,GAAA7I,GACA,GAAAA,EAAA,CACA,GAAA8I,GAAA9I,EAAArJ,MAAA,IACA,OAAA,IAAAiS,MAAAE,EAAA,GAAAA,EAAA,GAAA,EAAAA,EAAA,IAEA,MAAA,MAGA,QAAAC,GAAA/I,GACA,MAAAA,GACA2I,EAAA,QAAA3I,EAAA,cAEA,KAIA,QAAAgJ,KACA,MAAA,aAlCA,GAAApX,IACAuQ,0BAAAA,EACA0G,2BAAAA,EACAE,yBAAAA,EACAC,WAAAA,EAGA,OAAApX,GAfAL,QACAC,OAAA,uBACAe,QAAA,YAAA2P,GAEAA,EAAAzQ,SAAA,cCPA,WACA,YAQA,SAAAwX,GAAAC,GAWA,QAAAC,GAAAC,GACA,MAAA7X,SAAA6W,SAAAgB,GAGAA,EAAArU,OAAA,GACAqU,EAEAA,EAAAA,EAAAxD,UAAA,EAAA,IAAA,MAAAwD,EAAA9D,OAAA,IAAA,GALA,GAQA,QAAA+D,GAAAC,GAKA,QAAAC,GAAAC,EAAAC,GACA,MAAAA,GAAAtW,QAAAqW,EAAAC,EAAA1U,OAAAyU,EAAAzU,WAAA,EAGA,QAAA2U,GAAAJ,GACA,MAAAC,GAAA,KAAAD,GACA,EAEAC,EAAA,IAAAD,GACA,EAEA,EAGA,QAAA/L,GAAA+L,GACA,MAAAA,GAAAvU,OAAA,EAAA,EAAA2U,EAAAJ,GAGA,QAAAK,GAAApM,GACA,MAAAA,GAAAqM,WAAA9V,QAAA,wBAAA,KAAA,SAvBA,MAAAvC,SAAA6W,SAAAkB,GA0BAK,EAAApM,EAAA+L,IAzBA,GA4BA,QAAAO,GAAAC,EAAA5X,GACAgX,EAAA5P,KAAA,QAAAwQ,EAAA,WAAA5X,EAAA,SAAA,wBAGA,QAAA6X,GAAAC,EAAA3R,GACA,GAAA4R,GAAA,GAAAC,WACAD,GAAAE,cAAAH,GACAC,EAAAG,OAAA,SAAAC,GACA,GAAAC,GAAAD,EAAAE,OAAAzX,OAAAgT,OAAAuE,EAAAE,OAAAzX,OAAAK,QAAA,WAAA,UAAA4B,OACAsD,GAAAiS,IA1DA,GAAA1Y,IACAuX,WAAAA,EACAE,SAAAA,EACAQ,SAAAA,EACAE,SAAAA,EAGA,OAAAnY,GAfAL,QACAC,OAAA,uBACAe,QAAA,YAAA0W,GAEAA,EAAAxX,SAAA,cCPA,WACA,YAMA,SAAA+Y,KAGA,QAAAC,GAAAtF,GAKA,MAJA,QAAAA,IACAA,EAAAA,EAAAuF,cACAvF,EAAAA,EAAAS,UAAA,EAAA,GAAA+E,cAAAxF,EAAAS,UAAA,IAEAT,EAPA,MAAAsF,GALAlZ,QACAC,OAAA,uBACAqN,OAAA,aAAA2L,MCLA,WAEA,YAMA,SAAAI,KAcA,QAAAC,GAAA1F,GAMA,IALA,GACA2F,GAAAC,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EAFAC,EAAA,GAGAvW,EAAA,EAEAA,EAAAqQ,EAAApQ,QACA+V,EAAA3F,EAAAmG,WAAAxW,KACAiW,EAAA5F,EAAAmG,WAAAxW,KACAkW,EAAA7F,EAAAmG,WAAAxW,KAEAmW,EAAAH,GAAA,EACAI,GAAA,EAAAJ,IAAA,EAAAC,GAAA,EACAI,GAAA,GAAAJ,IAAA,EAAAC,GAAA,EACAI,EAAA,GAAAJ,EAEA5F,MAAA2F,GACAI,EAAAC,EAAA,GACAhG,MAAA4F,KACAI,EAAA,IAGAC,EAAAA,EACAE,EAAA1F,OAAAoF,GACAM,EAAA1F,OAAAqF,GACAK,EAAA1F,OAAAsF,GACAI,EAAA1F,OAAAuF,EAGA,OAAAC,GAGA,QAAAG,GAAArG,GACA,GACA2F,GAAAC,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EAFAC,EAAA,GAGAvW,EAAA,CAKA,KAFAqQ,EAAAA,EAAArR,QAAA,sBAAA,IAEAgB,EAAAqQ,EAAApQ,QACAkW,EAAAM,EAAApY,QAAAgS,EAAAU,OAAA/Q,MACAoW,EAAAK,EAAApY,QAAAgS,EAAAU,OAAA/Q,MACAqW,EAAAI,EAAApY,QAAAgS,EAAAU,OAAA/Q,MACAsW,EAAAG,EAAApY,QAAAgS,EAAAU,OAAA/Q,MAEAgW,EAAAG,GAAA,EAAAC,GAAA,EACAH,GAAA,GAAAG,IAAA,EAAAC,GAAA,EACAH,GAAA,EAAAG,IAAA,EAAAC,EAEAC,GAAAI,OAAAC,aAAAZ,GAEA,KAAAK,IACAE,GAAAI,OAAAC,aAAAX,IAEA,KAAAK,IACAC,GAAAI,OAAAC,aAAAV,GAIA,OAAAK,GA1EA,GAAAE,GAAA,oEAMA3Z,GACA4Z,OAAAA,EACAX,OAAAA,EAGA,OAAAjZ,GAhBAL,QACAC,OAAA,uBACAe,QAAA,SAAAqY,MCNA,WACA,YAQA,SAAA5S,GAAAqF,GAYA,QAAA/D,KACA,OAAAqS,IACAA,EAAAtO,EAAA/D,MACAsS,WAAA,EACA1Q,YAAA,kCACAR,WAAA,kBACAU,aAAA,OAEAuQ,EAAA7Y,OAAAD,KACAgZ,EACAA,IArBA,GAAAja,IACA0H,KAAAA,GAGAqS,EAAA,KACAE,EAAA,WACAF,EAAA,KAGA,OAAA/Z,GAhBAL,QACAC,OAAA,uBACAe,QAAA,eAAAyF,GAEAA,EAAAvG,SAAA,gBCPA,WACA,YAQA,SAAAqa,GAAAxY,EAAAwE,EAAA6D,EAAA9D,EAAAgE,GAeA,QAAAkQ,KACAvR,EAAArD,aACAE,SAAA,KACAC,SAAA,KACAC,YAAA,GAEAiD,EAAAwR,qBAAA,EACAnQ,EAAAK,QAAA,UAGA,QAAAhF,GAAA4F,GACAA,EAAAmP,iBACApU,EAAAX,OACAG,SAAAmD,EAAAnD,SACAC,SAAAkD,EAAAlD,SACAC,WAAAiD,EAAAjD,aACA1E,KAAA,WAYA,GAXA2H,EAAAwR,qBAAA,EACAnQ,EAAAY,QACA,aAAA3E,EAAAoF,QAAArE,MAAA,aAAAf,EAAAoF,QAAArE,MACA,gBAAAf,EAAAoF,QAAArE,MAAA,iBAAAf,EAAAoF,QAAArE,MACAf,EAAAgB,GAAA,QAGAxF,EAAA4Y,WAAA,yBAIArU,EAAAmB,mBAAA,CACA,GAAAC,GAAApB,EAAAmB,kBACAnB,GAAAqB,qBACApB,EAAAgB,GAAAG,EAAAJ,KAAAI,EAAAE,WAEAnD,MAAA,WACAwE,EAAAwR,qBAAA,IAIA,QAAAxQ,KACAK,EAAAK,QAAA,UACApE,EAAAgB,GAAA,YAGA,QAAAqT,KACAtQ,EAAAK,QAAA,UACApE,EAAAgB,GAAA,gBA3DA,GAAA0B,GAAAtF,IAEAsF,GAAAwR,qBAAA,EACAxR,EAAAuR,OAAAA,EACAvR,EAAArD,eACAqD,EAAAtD,MAAAA,EACAsD,EAAAlD,SAAA,KACAkD,EAAAgB,SAAAA,EACAhB,EAAAjD,YAAA,EACAiD,EAAA2R,qBAAAA,EACA3R,EAAAnD,SAAA,KAEAsE,EAAA,WAAApK,QAAAkC,QAAA,aAAAkJ,UAnBApL,QACAC,OAAA,uBACAkJ,WAAA,kBAAAoR,GAEAA,EAAAra,SAAA,aAAA,SAAA,WAAA,OAAA,wBCPA,WACA,YAMA,SAAA2a,KASA,QAAA7Y,GAAAC,EAAAC,EAAAC,EAAA2Y,GACA5Y,EAAAiT,KAAA,eAAA4F,KAAA,WACA,GAAAC,GAAAhb,QAAAkC,QAAAyB,MACAsX,EAAAD,EAAA7F,KAAA,sDAEA8F,GAAAzX,OAAA,GACAyX,EAAAF,KAAA,WACA,GAAAG,GAAAlb,QAAAkC,QAAAyB,MACAwX,EAAAD,EAAAE,KAAA,OACAnZ,GAAAkD,OAAA,WACA,MAAA2V,GAAAK,GAAAE,UAAAP,EAAAK,GAAAG,QACA,SAAAC,GACAP,EAAAQ,YAAA,YAAAD,SApBA,GAAAjZ,IACAE,SAAA,IACAoS,QAAA,OACAlS,KAAAV,EAGA,OAAAM,GAXAtC,QACAC,OAAA,uBACAqC,UAAA,iBAAAuY,MCLA,WACA,YAEA7a,SACAC,OAAA,uBACAwb,SAAA,uBACAjL,aAAA,QCNA,WACA,YAMA,SAAAkL,KASA,QAAA1Z,GAAAC,EAAAC,EAAAC,EAAAwZ,GACAA,IAIAA,EAAAC,YAAAF,SAAA,SAAAG,GACA,MAAAF,GAAAG,SAAAD,IAAAE,EAAAF,IAAA1Z,EAAAuZ,WAIA,QAAA1D,GAAAC,EAAAC,GACA,MAAAA,GAAAtW,QAAAqW,EAAAC,EAAA1U,OAAAyU,EAAAzU,WAAA,EAGA,QAAA2U,GAAAJ,GACA,MAAAC,GAAA,KAAAD,GACA,EAEAC,EAAA,IAAAD,GACA,EAEA,EAGA,QAAAgE,GAAAhE,GACA,MAAAA,GAAAvU,OAAA,EAAA,EAAA2U,EAAAJ,GAjCA,GAAAzV,IACAE,SAAA,IACAoS,QAAA,WACAlS,KAAAV,EAGA,OAAAM,GAXAtC,QACAC,OAAA,uBACAqC,UAAA,WAAAoZ,MCLA,WACA,YAMA,SAAAM,KASA,QAAAha,GAAAC,EAAAC,EAAAC,EAAAwZ,GACAA,IAIAA,EAAAC,YAAAI,SAAA,SAAAH,GACA,MAAAF,GAAAG,SAAAD,IAAAE,EAAAF,IAAA1Z,EAAA6Z,WAIA,QAAAhE,GAAAC,EAAAC,GACA,MAAAA,GAAAtW,QAAAqW,EAAAC,EAAA1U,OAAAyU,EAAAzU,WAAA,EAGA,QAAA2U,GAAAJ,GACA,MAAAC,GAAA,KAAAD,GACA,EAEAC,EAAA,IAAAD,GACA,EAEA,EAGA,QAAAgE,GAAAhE,GACA,MAAAA,GAAAvU,OAAA,EAAA,EAAA2U,EAAAJ,GAjCA,GAAAzV,IACAE,SAAA,IACAoS,QAAA,WACAlS,KAAAV,EAGA,OAAAM,GAXAtC,QACAC,OAAA,uBACAqC,UAAA,WAAA0Z,MCLA,WACA,YAiBA,SAAAC,GAAAlS,EAAA2F,EAAA3N,GAKA,QAAAma,GAAA5L,EAAA1J,EAAAjG,GACAsI,EAAAkT,OAAAzO,KACAgC,EAAA8F,KAEA+C,KAAA,SACA6D,IAAA9L,EACA+L,QAAA,IACAC,MAAA5M,EAAA6M,UACAC,QAAA,GAEAvT,EAAAkT,SAdA,GAAAlT,GAAAtF,IAEAsF,GAAAkT,SAiBA,IAAAM,GAAA1a,EAAAmI,IAAA,gCAAA,SAAAqB,EAAAmR,GACA,GAAAnZ,EAEA,QADAgI,EAAAoR,kBACAD,EAAAE,QAEA,IAAA,GACAV,EAAA,uBAAA,6BACA,MAEA,KAAA,KACA,GAAAhW,GAAA2W,OAAAC,KAAAJ,EAAAxW,WAAAoH,OAAA,SAAA0I,GACA,MAAAA,GAAApU,QAAA,YAAAoU,EAAAxS,OAAA,YAAAA,WAAA,GAAAwS,EAAApU,QAAA,aAAAoU,EAAAxS,OAAA,aAAAA,WAAA,IACAoM,OACAmN,EAAAL,EAAAxW,QAAAA,EAAA,IACA8W,EAAAN,EAAAxW,QAAAA,EAAA,GACA,IAAA6W,EAAA,CACA,GAAAE,GAAAD,CACAd,GAAAa,EAAAA,GAAAE,WAAAA,QACA,IAAAP,EAAA/b,MAAA+b,EAAA/b,KAAAuc,YACA,IAAA3Z,EAAA,EAAAA,EAAAmZ,EAAA/b,KAAAuc,YAAA1Z,OAAAD,IAAA,CACA,GAAA4Z,GAAAT,EAAA/b,KAAAuc,YAAA3Z,GAEA6Z,EAAAD,EAAAxH,MAAApT,QAAA,WAAA,MACA8a,EAAAD,EAAA9I,OAAA,GAAA8E,cAAAgE,EAAArJ,MAAA,EACAmI,GAAA,SAAAmB,EAAA,mBAAA,SAAAF,EAAA7M,SAAA+M,UAAAA,QAEAX,GAAA/b,MAAA+b,EAAA/b,KAAA2P,QACA4L,EAAAQ,EAAA/b,KAAA2P,QAAAoM,EAAA/b,KAAA2P,QAAAoM,EAAA/b,MAEAub,EAAAQ,EAAA/b,KAEA,MAEA,KAAA,KACAub,EAAA,YAAA,sBACA,MAEA,SAEAA,EADAQ,EAAA/b,MAAA+b,EAAA/b,KAAA2P,QACAoM,EAAA/b,KAAA2P,QAEAtQ,QAAAsd,OAAAZ,MAKA3S,GAAAG,IAAA,WAAA,WACAlK,QAAAsE,UAAAmY,IAAA,OAAAA,IACAA,IACAxT,EAAAkT,aApFA,GAAAoB,IACA9a,SAAA,iQAKA0G,WAAA8S,EAGAjc,SACAC,OAAA,uBACAkX,UAAA,gBAAAoG,GAEAtB,EAAA/b,SAAA,SAAA,eAAA,iBChBA,WACA,YAMA,SAAAwP,KAWA,QAAA8N,GAAApT,EAAAqT,GAoBA,QAAAlB,KACA,MAAAD,GAGA,QAAA5R,KACAyR,KAGA,QAAA1b,KACA,MAAA0b,GAGA,QAAA/V,GAAAgW,EAAAxU,EAAA8V,GACA,MAAA/Z,MAAA6R,KACA+C,KAAA,UACA6D,IAAAA,EACAxU,OAAAA,EACAyU,QAAAA,EACAC,MAAAA,EACAoB,SAAAA,IAIA,QAAArN,GAAA+L,EAAAxU,EAAA8V,GACA,MAAA/Z,MAAA6R,KACA+C,KAAA,SACA6D,IAAAA,EACAxU,OAAAA,EACAyU,QAAAA,EACAC,MAAAA,EACAoB,SAAAA,IAIA,QAAAC,GAAAvB,EAAAxU,EAAA8V,GACA,MAAA/Z,MAAA6R,KACA+C,KAAA,UACA6D,IAAAA,EACAxU,OAAAA,EACAyU,QAAAA,EACAC,MAAAA,EACAoB,SAAAA,IAIA,QAAAE,GAAAxB,EAAAxU,EAAA8V,GACA,MAAA/Z,MAAA6R,KACA+C,KAAA,OACA6D,IAAAA,EACAxU,OAAAA,EACAyU,QAAAA,EACAC,MAAAA,EACAoB,SAAAA,IAIA,QAAA1c,GAAA6c,GACA,GAAAC,IACAvF,KAAAsF,EAAAtF,KACA6D,IAAAqB,EAAAM,YAAAF,EAAAzB,KACAtR,GAAA+S,EAAAG,QACA3B,QAAAwB,EAAAxB,QACAC,MAAAuB,EAAAvB,MACAoB,SAAAG,EAAAH,SAAAG,EAAAH,SAAA,YACAlB,OAAAqB,EAAArB,OACAtR,MAAA,SAAAiR,GACA,MAAA8B,GAAAta,KAAAmH,GAAAqR,IAMA,OAHA2B,GAAAtB,QACAL,EAAAzO,KAAAoQ,GAEAA,EAGA,QAAAI,GAAAL,EAAAM,GACAN,EAAAG,QAAAA,GACA,IAAAI,GAAAza,KACAma,EAAAna,KAAA3C,QAAA6c,EAMA,OALAA,GAAAxB,SAAAwB,EAAAxB,QAAA,GACAjS,EAAA,WACAgU,EAAAH,WAAAJ,EAAAG,QAAAG,IACAN,EAAAxB,SAEAyB,EAGA,QAAAG,GAAAnT,EAAAqT,GACA,GAAAE,GAAAF,EAAAA,EAAAhC,CACA,OAAAmC,GAAAD,EAAAE,IAAA,SAAAzF,GAAA,MAAAA,GAAAhO,KAAAlJ,QAAAkJ,GAAAuT,GAGA,QAAAC,GAAAE,EAAAH,GACA,MAAAA,GAAAI,OAAAD,EAAA,GAhHA,GAAAlC,GAAA3Y,KAAA2Y,MACA0B,EAAA,EACA7B,KACAE,EAAA,GAEA,QACArb,QAAAA,EACAub,QAAAA,EACA/G,IAAA0I,EACAD,WAAAA,EACAK,kBAAAA,EACA5T,MAAAA,EACAjK,IAAAA,EACA2F,QAAAA,EACAiK,MAAAA,EACAuN,KAAAA,EACAD,QAAAA,GA3BAha,KAAA2Y,OAAA,EAEA3Y,KAAA+a,KAAAlB,EAEA7Z,KAAAgb,YAAA,SAAApC,GACA5Y,KAAA2Y,MAAAC,GAGAiB,EAAAtd,SAAA,WAAA,QAbAF,QACAC,OAAA,uBACA2e,SAAA,eAAAlP,MCLA,WACA,YAiBA,SAAAmP,GAAA9U,EAAA2F,GACA,GAAAzG,GAAAtF,IAEAsF,GAAAkT,OAAAzM,EAAAjP,MACAsJ,EAAAG,IAAA,WAAA,WACAjB,EAAAkT,YApBA,GAAA2C,IACArc,SAAA,2QAKA0G,WAAA0V,EAGA7e,SACAC,OAAA,uBACAkX,UAAA,WAAA2H,GAEAD,EAAA3e,SAAA,SAAA,mBChBA,WACA,YAQA,SAAA6e,GAAAhc,EAAA2M,GAOA,QAAAjO,GAAAA,GACA,GAAAyE,GAAA2W,OAAAC,KAAArb,EAAAyE,WAAAoH,OAAA,SAAA0I,GACA,MAAAA,GAAApU,QAAA,YAAAoU,EAAAxS,OAAA,YAAAA,WAAA,GAAAwS,EAAApU,QAAA,aAAAoU,EAAAxS,OAAA,aAAAA,WAAA,IACAoM,OACAoP,EAAAvd,EAAAyE,QAAAA,EAAA,GAIA,OAHAlG,SAAA6W,SAAAmI,IACAtP,EAAAtJ,QAAA4Y,GAAAC,MAAAxd,EAAAyE,QAAAA,EAAA,MAEAzE,EAdA,GAAApB,IACAoB,SAAAA,EAGA,OAAApB,GAXAL,QACAC,OAAA,uBACAe,QAAA,0BAAA+d,GAEAA,EAAA7e,SAAA,KAAA;ICPA,WACA,YAQA,SAAAgf,GAAAnc,EAAAhB,GAOA,QAAAod,GAAA1d,GAIA,MAHA,OAAAA,EAAAmb,SAAA,KAAAnb,EAAAd,MAAAc,EAAAd,KAAAye,MAAA,IAAA3d,EAAAd,KAAAye,KAAAxd,QAAA,kBACAG,EAAAkJ,MAAA,gCAAAxJ,GAEAsB,EAAAsF,OAAA5G,GAVA,GAAApB,IACA8e,cAAAA,EAGA,OAAA9e,GAXAL,QACAC,OAAA,uBACAe,QAAA,0BAAAke,GAEAA,EAAAhf,SAAA,KAAA,iBCPA,WACA,YAQA,SAAAmf,GAAAtd,EAAAgB,EAAAuc,GAOA,QAAAH,GAAA1d,GAGA,GAAA,MAAAA,EAAAmb,QAAA5c,QAAAsE,UAAA7C,EAAAd,KAAAye,OAAA3d,EAAAd,KAAAye,KAAAxd,QAAA,mBAAA,EAAA,CACA,GAAA0E,GAAAgZ,EAAA7e,IAAA,QACA8e,EAAAxd,EAAAqF,QACAQ,EAAA7F,EAAA+F,aACAxB,GAAAD,SACA,iBAAAkZ,EAAAjY,MACAhB,EAAAuB,mBAAA0X,EAAAjY,KAAAM,EAEA,IAAAnB,GAAA6Y,EAAA7e,IAAA,eACAgG,GAAAsB,OAEA,MAAAhF,GAAAsF,OAAA5G,GApBA,GAAApB,IACA8e,cAAAA,EAGA,OAAA9e,GAXAL,QACAC,OAAA,uBACAe,QAAA,yBAAAqe,GAEAA,EAAAnf,SAAA,aAAA,KAAA,gBCPA,WACA,YASA,SAAAJ,GAAAiC,EAAAwE,EAAAC,EAAAmR,EACArR,EAAAxD,EAAA0c,GAKA,QAAAzf,KACAgC,EAAAyd,QAAAA,CAEA,IAAAC,GAAA1d,EAAAmI,IAAA,oBAAA,SAAAqB,EAAAnE,EAAAU,EAAAN,GACAzF,EAAAqF,QAAAA,EACArF,EAAA+F,cAAAA,EACA/F,EAAAyF,UAAAA,EAGAJ,EAAAsY,WACAnU,EAAAmP,iBACA/C,EAAA5P,KAAAX,EAAAmC,IAAA,UAGAzG,EAAA6B,sBACA2B,EAAAY,cAKAyY,EAAA5d,EAAAmI,IAAA,sBAAA,SAAAqB,EAAAnE,EAAAwY,EAAApY,EAAAqY,GACA,GAAAC,GAAA,kBAGA1Y,GAAAzG,KAAA6I,YACAsW,EAAA1Y,EAAAzG,KAAA6I,WAEAmO,EAAAoI,SAAA7T,MAAA4T,GAGA/d,GAAAmI,IAAA,WAAA,WACAlK,QAAAsE,UAAAmb,IAAA,OAAAA,GACAA,IAEAzf,QAAAsE,UAAAqb,IAAA,OAAAA,GACAA,MAvCA,OACA5f,WAAAA,GAVAC,QACAC,OAAA,uBACAe,QAAA,eAAAlB,GAEAA,EAAAI,SAAA,aAAA,SAAA,kBAAA,UACA,OAAA,YAAA,cCRA,WACA,YAQA,SAAA8f,GAAAC,EAAAtQ,GACAsQ,EAAAzP,aAAAb,EAAAa,aACAyP,EAAAC,QAAA,EACAD,EAAAE,eAAA,EACAF,EAAAG,UAAA,IACAH,EAAAI,aAAA,IACAJ,EAAAK,SAAA,IACAL,EAAAM,SAAA,IAbAvgB,QACAC,OAAA,uBACA2J,OAAAoW,GAEAA,EAAA9f,SAAA,sBAAA,0BCPA,WACA,YAQA,SAAAsgB,GAAAC,EAAA9Q,GACA8Q,EAAAjQ,aAAAb,EAAAa,aACAiQ,EAAAJ,aAAA,IACAI,EAAAH,SAAA,IATAtgB,QACAC,OAAA,uBACA2J,OAAA4W,GAEAA,EAAAtgB,SAAA,iBAAA,0BCPA,WACA,YAQA,SAAAwgB,GAAAC,EAAAC,GACAD,EAAAE,aAAA,QACAD,EAAAC,aAAA,QARA7gB,QACAC,OAAA,uBACA2J,OAAA8W,GAEAA,EAAAxgB,SAAA,wBAAA,8BCPA,WACA,YAQA,SAAA4gB,GAAAC,EAAAC,EAAAC,EAAAC,GAEAD,EAAAE,cAAA,UAAA,kBAAA,GAEAJ,EAAAK,UAAA,KAEAJ,EAAAK,aAAA3T,KAAA,2BACAsT,EAAAK,aAAA3T,KAAA,0BACAsT,EAAAK,aAAA3T,KAAA,2BAGAwT,EAAA3I,KAAA,WACAjR,KAAA,UACA2S,OAAA,SAAAqH,GAAA,MAAAA,MAAA,GAAA,SAAAA,GACAhI,OAAA,SAAAgI,GAAA,MAAAA,GAAA,EAAA,GACAC,OAAA,SAAAC,EAAAC,GAAA,MAAA9d,MAAA+d,GAAAF,IAAAA,IAAAC,GACAC,GAAA,SAAAJ,GAAA,QAAA,GAAA,EAAA,EAAA,GAAA1f,QAAA0f,IAAA,GACAK,QAAA,kBAvBA3hB,QACAC,OAAA,uBACA2J,OAAAkX,GAEAA,EAAA5gB,SAAA,qBAAA,gBAAA,4CAAA,iCCPA,WACA,YAQA,SAAA0hB,GAAAC,EAAAC,GAEAD,EAAAE,iBAAAD,GARA9hB,QACAC,OAAA,uBACA2J,OAAAgY,GAEAA,EAAA1hB,SAAA,mBAAA,yBCPA,WACA,YAQA,SAAA8hB,GAAAC,GAEAA,EAAAtD,aAAA,GARA3e,QACAC,OAAA,uBACA2J,OAAAoY,GAEAA,EAAA9hB,SAAA,2BCPA,WACA,YAQA,SAAAkJ,GAAAC,GACAA,EAAAC,MAAA,OACA4I,UAAA,EACAzI,OACAyY,WACAvY,YAAA,iCACAR,WAAA,mBACAU,aAAA,OAGA3F,SACAgD,WAAA,OACA,SAAAZ,GACA,MAAAA,GAAAY,iBAnBAlH,QACAC,OAAA,uBACA2J,OAAAR,GAEAA,EAAAlJ,SAAA,qBCPA,WACA,YAEAF,SACAC,OAAA,uBACAwb,SAAA,UAAA,kBACAA,SAAA,sBAAA,MCNA,WACA,YAQA,SAAA0G,GAAA9X,EAAAC,EAAAC,EAAApK,GAWA,QAAAuK,KACAJ,EAAAK,QAAA,UAGA,QAAAI,GAAAxJ,GACA0H,EAAA2B,UAAA,EACAN,EAAAY,MAAA3J,GAGA,QAAAyJ,KACA/B,EAAA2B,UAAA,EAGA,QAAA/J,KACAoI,EAAA2B,UAAA,EACA,OAAA3B,EAAAmZ,KAAAtX,GACA3K,EAAAW,OAAAmI,EAAAmZ,KAAArX,EAAAC,IAEA/B,EAAAmZ,KAAAC,QAAA,KACAliB,EAAAU,KAAAoI,EAAAmZ,KAAArX,EAAAC,IA7BA,GAAA/B,GAAAtF,IAEAsF,GAAA3F,aAAA,YAAA,cACA2F,EAAAyB,MAAAA,EACAzB,EAAAqZ,UAAA,KACArZ,EAAApI,KAAAA,EACAoI,EAAAmZ,KAAA7X,EAbAvK,QACAC,OAAA,uBACAkJ,WAAA,iCAAAgZ,GAEAA,EAAAjiB,SAAA,eAAA,oBAAA,SAAA,WCPA,WACA,YAQA,SAAAqiB,GAAAlY,EAAAlK,GAQA,QAAAqiB,GAAA7c,GACAxF,EAAAM,KAAAkF,MAAAA,GAAA,SAAApE,GACA0H,EAAAmZ,KAAA7gB,IATA,GAAA0H,GAAAtF,IAEAsF,GAAAuZ,KAAAA,EACAvZ,EAAAmZ,QAEAnZ,EAAAuZ,KAAAnY,EAAA1E,OAZA3F,QACAC,OAAA,uBACAkJ,WAAA,iCAAAoZ,GAEAA,EAAAriB,SAAA,eAAA,WCPA,WACA,YAQA,SAAAuiB,GAAAnY,EAAAC,EAAApK,GAOA,QAAAuK,KACAJ,EAAAK,QAAA,UAGA,QAAAc,GAAA9F,GACAxF,EAAAY,QAAA4E,MAAAA,GACA,WACA2E,EAAAY,OAAA,KAbA,GAAAjC,GAAAtF,IAEAsF,GAAAmZ,KAAA7X,EACAtB,EAAAyB,MAAAA,EACAzB,EAAAwC,cAAAA,EAXAzL,QACAC,OAAA,uBACAkJ,WAAA,iCAAAsZ,GAEAA,EAAAviB,SAAA,oBAAA,SAAA,WCPA,WACA,YAQA,SAAAkJ,GAAAC,GACAA,EACAC,MAAA,mBACAjC,OAAA,QACAkC,IAAA,6BACA5I,MACA2C,aAAA,cACAkG,UAAA,SAEAC,OACAC,YACAC,YAAA,iDACAR,WAAA,2BACAU,aAAA,OAEAjC,QACA2I,MACAS,MAAA,IACAC,QAAA,GAEArB,MACAoB,MAAA,SACAC,QAAA,IAGA/M,SACAiN,cAAA,eAAA,iBAAA,SAAA9G,EAAA+G,GACA,OACAb,KAAAa,EAAAC,UAAAhH,EAAAkG,MACAX,KAAAvF,EAAAuF,KACAC,UAAAuB,EAAAE,eAAAjH,EAAAuF,MACA2B,UAAAH,EAAAI,eAAAnH,EAAAuF,YAIAtG,MAAA,0BACAjC,OAAA,QACAkC,IAAA,eACA5I,MACA2C,aAAA,cACAkG,UAAA,oBAEAC,OACAC,YACAC,YAAA,wDACAR,WAAA,iCACAU,aAAA,SAIAP,MAAA,uBACAjC,OAAA,kBACAkC,IAAA,OACA5I,MACA2C,aAAA,eAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,wDACAR,WAAA,iCACAU,aAAA,KACAkC,SAAA,SACAC,KAAA,KACA9H,SACAqG,OAAA,WACA,OACAO,GAAA,KAAAnF,MAAA,KAAA4M,UAAA,KAAAC,SAAA,KAAAC,MAAA,KACAiQ,WAAA,EAAAL,QAAA,KAAAM,UAAA,KAAAC,YAAA,KACAC,eAAA,KAAAC,iBAAA,KAAAC,UAAA,KACAC,SAAA,KAAA1f,YAAA,UAIA/B,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,kBAAA,MAAA0E,QAAA,KACA,WACA1F,EAAAgB,GAAA,yBAIA+B,MAAA,wBACAjC,OAAA,kBACAkC,IAAA,gBACA5I,MACA2C,aAAA,eAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,wDACAR,WAAA,iCACAU,aAAA,KACAkC,SAAA,SACAC,KAAA,KACA9H,SACAqG,QAAA,OAAA,SAAApK,GACA,MAAAA,GAAAM,KAAAkF,MAAA0E,EAAA1E,aAGApE,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,kBAAA,MAAA0E,QAAA,KACA,WACA1F,EAAAgB,GAAA,WAIA+B,MAAA,0BACAjC,OAAA,kBACAkC,IAAA,kBACA5I,MACA2C,aAAA,eAEAuI,SAAA,eAAA,SAAA,YAAA,SAAAxB,EAAA9D,EAAAuF,GACAA,EAAA/D,MACA4B,YAAA,+DACAR,WAAA,iCACAU,aAAA,KACAmC,KAAA,KACA9H,SACAqG,QAAA,OAAA,SAAApK,GACA,MAAAA,GAAAM,KAAAkF,MAAA0E,EAAA1E,aAGApE,OAAAD,KAAA,WACAiF,EAAAgB,GAAA,kBAAA,MAAA0E,QAAA,KACA,WACA1F,EAAAgB,GAAA,WAnIAvH,QACAC,OAAA,uBACA2J,OAAAR,GAEAA,EAAAlJ,SAAA,qBCPA,WACA,YAQA,SAAA+iB,GAAAngB,EAAA3C,EAAAsP,EAAAC,EAAAnJ,EAAA4K,EAAAxB,GAwBA,QAAAuT,GAAAd,EAAAe,GACAf,EAAAM,UAAAS,EACAhjB,EAAAW,OAAAshB,EAAA,WACAnZ,EAAAoD,UACApD,EAAAyB,UAIA,QAAA2B,KACAlM,EAAAG,OACAiQ,KAAAY,EAAAZ,KAAA,EACAvE,KAAA/C,EAAAuH,aACAZ,KAAAA,KACAG,EAAAK,GAGA,QAAAL,GAAApP,EAAAuF,GAEA,GAAAkd,GAAA,CACA,KAAA,GAAA7f,KAAA5C,GACA,kBAAAA,EAAA4C,GAAA,QACA5C,EAAA8d,OAAAlb,EAAA,GACA6f,IAGAna,GAAA+G,MAAAP,EAAAQ,MAAA/J,EAAA,SACA+C,EAAAiH,WAAAhK,EAAA,iBAAAkd,EACAna,EAAA4I,WAAA5I,EAAAiH,WACAjH,EAAAsH,KAAAY,EAAAZ,KACAtH,EAAAoa,MAAA1iB,EAGA,QAAAyP,GAAAC,GACAX,EAAAW,MAAAA,EAAA1P,KAAA2P,SAGA,QAAA5F,KACAzB,EAAAmZ,MACAtX,GAAA,KAAAnF,MAAA,KAAA4M,UAAA,KAAAC,SAAA,KAAAC,MAAA,KACAiQ,UAAA,KAAAL,QAAA,KAAAM,UAAA,KAAAC,YAAA,KACAC,eAAA,KAAAC,iBAAA,KAAAC,UAAA,KACAC,SAAA,KAAA1f,YAAA,MAIA,QAAAsM,KACA,GAAArO,IAAA0H,EAAA4G,UAAA,KAAA5G,EAAA6G,QAAA,MAAA,QAIA,OAHA,OAAA7G,EAAA4G,WACAtO,EAAAmM,KAAA,MAEAnM,EAGA,QAAAkP,GAAAF,GACAtH,EAAAsH,KAAAA,EACAtH,EAAA6I,aAGA,QAAAA,KACAvL,EAAAwL,aAAAxL,EAAAyL,UACAzB,KAAAtH,EAAAsH,KACAX,KAAA3G,EAAA4G,UAAA,KAAA5G,EAAA6G,QAAA,MAAA,QACAoB,OAAAjI,EAAAgJ,gBArFA,GAAAhJ,GAAAtF,IAEAsF,GAAA3F,aAAA,YAAA,cACA2F,EAAAqa,eAAA,KACAra,EAAAqZ,UAAA,KACArZ,EAAAoD,QAAAA,EACApD,EAAAia,UAAAA,EACAja,EAAAoa,SACApa,EAAAsH,KAAA,EACAtH,EAAAiH,WAAA,KACAjH,EAAAyB,MAAAA,EACAzB,EAAA+G,MAAA,KACA/G,EAAAwH,SAAAA,EACAxH,EAAA4G,UAAAsB,EAAAtB,UACA5G,EAAA6G,QAAAqB,EAAAI,UACAtI,EAAAuH,aAAAb,EAAAa,aACAvH,EAAA6I,WAAAA,EAEA7I,EAAAoD,UACAvJ,EAAAI,WAAA5B,KAAA,SAAA0C,GACAiF,EAAAqa,eAAAtf,IA3BAhE,QACAC,OAAA,uBACAkJ,WAAA,2BAAA8Z,GAEAA,EAAA/iB,SAAA,YAAA,OAAA,aAAA,eAAA,SAAA,eAAA,0BCPA,WACA,YAQA,SAAAkJ,GAAAC,GACAA,EAAAC,MAAA,eACAjC,OAAA,QACAkC,IAAA,WACA5I,MACA2C,aAAA,cACAkG,UAAA,uBAEAC,OACAC,YACAC,YAAA,iCACAR,WAAA,iCACAU,aAAA,SAlBA7J,QACAC,OAAA,uBACA2J,OAAAR,GAEAA,EAAAlJ,SAAA,qBCPA,WACA,YAQA,SAAAqjB,GAAAxhB,EAAAb,GAQA,QAAAsiB,KACA,MAAAtiB,GAAAT,IAAA,sBAAAa,KAAA,SAAAG,GACA,MAAAA,GAAAd,OAIA,QAAA8iB,KACA,MAAAviB,GAAAT,IAAA,mBAAAa,KAAA,SAAAG,GACA,MAAAA,GAAAd,OAfA,GAAAN,IACAmjB,WAAAA,EACAC,WAAAA,EAGA,OAAApjB,GAZAL,QACAC,OAAA,uBACAe,QAAA,oBAAAuiB,GAEAA,EAAArjB,SAAA,aAAA,YCPA,WACA,YAQA,SAAAwjB,GAAApZ,EAAAmZ,GA2BA,QAAAjJ,KACAlQ,EAAAK,QAAA,UAGA,QAAAgZ,GAAAC,GACA,MAAA,aAAAA,EACA,gBACA,YAAAA,EACA,aACA,kBAAAA,EACA,gBACA,YAAAA,EACA,eADA,OArCA,GAAA3a,GAAAtF,IAEAsF,GAAAuR,OAAAA,EACAvR,EAAA0a,cAAAA,EACA1a,EAAAwa,WAAAA,EACAxa,EAAA4a,cAAA,EACA5a,EAAA6a,kBAAA,EACA7a,EAAA8a,mBAAA,EACA9a,EAAA+a,uBAAA,EACA/a,EAAAgb,kBAAA,EAEAjkB,QAAAmW,QAAAsN,EAAA,SAAAzS,GACA,aAAAA,EAAA4S,YACA3a,EAAA8a,oBAAA,EACA,YAAA/S,EAAA4S,YACA3a,EAAAgb,mBAAA,EACA,kBAAAjT,EAAA4S,YACA3a,EAAA+a,wBAAA,EACA,YAAAhT,EAAA4S,cACA3a,EAAA6a,mBAAA,KAIA7a,EAAA4a,cAAA5a,EAAA8a,mBAAA9a,EAAAgb,kBACAhb,EAAA+a,uBAAA/a,EAAA6a,kBA/BA9jB,QACAC,OAAA,uBACAkJ,WAAA,sCAAAua,GAEAA,EAAAxjB,SAAA,oBAAA,iBCPA,WACA,YAQA,SAAAgkB,GAAAna,EAAAwZ,EAAAzX,GAqBA,QAAAqY,KACAlb,EAAAmb,iBAAA,EACAb,EAAAC,aAAAliB,KAAA,SAAAiD,GACA0E,EAAAob,QAAA9f,EACA0E,EAAAmb,iBAAA,GACA,SAAA7f,GACA0E,EAAAob,QAAA9f,EAAA5D,KACAsI,EAAAmb,iBAAA,IAIA,QAAAE,KACAf,EAAAE,aAAAniB,KAAA,SAAAX,GACAmL,EAAA/D,MACA4B,YAAA,uCACAR,WAAA,sCACAU,aAAA,KACAmC,KAAA,KACA9H,SACAuf,WAAA,WACA,MAAA9iB,SAxCA,GAAAsI,GAAAtF,IAEAsF,GAAAob,WACApb,EAAAkb,QAAAA,EACAlb,EAAAqb,sBAAAA,EACArb,EAAAsb,iBACAtb,EAAAmb,iBAAA,EAEAnb,EAAAkb,UAEApa,EAAA5E,OAAA,aAAA,SAAAqf,GACAvb,EAAAsb,iBACAvkB,QAAAmW,QAAAqO,EAAAC,OAAA,SAAAzT,EAAApK,GACAA,EAAAhF,QAAA,eAAA,GAAAgF,EAAAhF,QAAA,cAAA,IACAqH,EAAAsb,cAAA3d,GAAAoK,OArBAhR,QACAC,OAAA,uBACAkJ,WAAA,iCAAA+a,GAEAA,EAAAhkB,SAAA,SAAA,oBAAA,gBCPA,WACA,YAQA,SAAAkJ,GAAAC,GACAA,EAAAC,MAAA,QACAjC,OAAA,QACAkC,IAAA,QACA5I,MACA2C,aAAA,cACAkG,UAAA,QAEAC,OACAC,YACAC,YAAA,2BACAR,WAAA,iBACAU,aAAA,SAlBA7J,QACAC,OAAA,uBACA2J,OAAAR,GAEAA,EAAAlJ,SAAA,qBCPA,WACA,YAQA,SAAAwkB,GAAAtkB,GACA,GAAAC,GAAAD,EAAA,sBACAukB,SAAApkB,OAAA,MAAAC,SAAA,GACAokB,aAAArkB,OAAA,QAGA,OAAAF,GAZAL,QACAC,OAAA,uBACAe,QAAA,cAAA0jB,GAEAA,EAAAxkB,SAAA,gBCPA,WACA,YAQA,SAAA2kB,GAAAH,GAMA,QAAAE,GAAAtd,EAAAwd,GACAJ,EAAAE,aAAAtd,KAAAA,EAAAwd,MAAAA,GAAA,WACA7b,EAAA8b,QAAAL,EAAAC,YAPA,GAAA1b,GAAAtF,IAEAsF,GAAA2b,YAAAA,EACA3b,EAAA8b,QAAAL,EAAAC,UAVA3kB,QACAC,OAAA,uBACAkJ,WAAA,iBAAA0b,GAEAA,EAAA3kB,SAAA,kBCPA,WACA,YAQA,SAAAkJ,GAAAC,GACAA,EAAAC,MAAA,cACAjC,OAAA,QACAkC,IAAA,UACA5I,MACA2C,aAAA,cACAkG,UAAA,iBAEAC,OACAC,YACAC,YAAA,+BACAR,WAAA,2BACAU,aAAA,SAlBA7J,QACAC,OAAA,uBACA2J,OAAAR,GAEAA,EAAAlJ,SAAA,qBCPA,WACA,YAQA,SAAA8kB,GAAAjjB,EAAAb,GAWA,QAAA+jB,KACA,MAAA/jB,GAAAT,IAAA,qBAAAa,KAAA,SAAAG,GACA,MAAAA,GAAAd,OAIA,QAAAukB,GAAAvkB,GACA,GAAAc,KAEA,OADA0jB,GAAA1jB,EAAA,KAAAd,GACAc,EAGA,QAAA2jB,GAAA9d,GACA,GAAAA,EAAA,CACA,GAAAlC,GAAAkC,EAAAlC,MAAA,IACA,OAAAA,GAAA,IAIA,QAAAigB,GAAA/d,GACA,GAAAA,EAAA,CACA,GAAAlC,GAAAkC,EAAAlC,MAAA,IACAA,GAAAqZ,OAAA,EAAA,EACA,IAAA6G,GAAAlgB,EAAA4O,KAAA,IACA,OAAAsR,GAAA,MAAAA,EAAA,IAKA,QAAAH,GAAA5jB,EAAA6d,EAAAze,GAWA,MAVAX,SAAAmW,QAAAxV,EAAA,SAAAqQ,EAAApK,GACA2e,EAAAvU,KACAwU,EAAAxU,IACAyU,EAAAlkB,GAAA,EAAAyP,EAAA0U,EAAAtG,EAAAxY,IACAue,EAAA5jB,EAAAmkB,EAAAtG,EAAAxY,GAAAoK,IAEAyU,EAAAlkB,GAAA,EAAAyP,EAAA0U,EAAAtG,EAAAxY,OAIArF,EAGA,QAAAkkB,GAAAlkB,EAAAokB,EAAAC,EAAAte,GAEA,GAAAue,IACAve,KAAAA,GAEAwe,KACAC,GAAA,CAsBA,OApBA/lB,SAAAmW,QAAAyP,EAAA,SAAA5U,EAAApK,GACA,WAAAA,GAAA,UAAAA,EACAif,EAAAjf,GAAAoK,EAEAuU,EAAAvU,KACA8U,EAAAlf,GAAAoK,EACA+U,GAAA,KAMAA,GACA/lB,QAAAgmB,OAAAH,GAAAC,QAAAA,KAIAH,GAAAI,GAAAF,EAAAxV,QACA9O,EAAAmM,KAAAmY,GAEAA,EAGA,QAAAH,GAAAtG,EAAA9X,GACA,GAAA/F,EAUA,OARAA,GADA6d,GAAA9X,EACA8X,EAAA6G,EAAA3e,EACA8X,EACAA,EACA9X,EACAA,EAEA,GAKA,QAAAke,GAAAI,GACA,GAAArkB,IAAA,CAMA,OALAvB,SAAAmW,QAAAyP,EAAA,SAAA5U,GACAA,GAAAA,EAAA4L,SACArb,GAAA,KAGAA,EAGA,QAAAgkB,GAAAK,GACA,GAAArkB,IAAA,CAMA,OALAvB,SAAAmW,QAAAyP,EAAA,SAAA5U,EAAApK,GACA,WAAAA,IACArF,GAAA,KAGAA,EAnHA,GAAA0kB,GAAA,IACA5lB,GACA4kB,YAAAA,EACAC,oBAAAA,EACAE,YAAAA,EACAC,iBAAAA,EAGA,OAAAhlB,GAfAL,QACAC,OAAA,uBACAe,QAAA,mBAAAgkB,GAEAA,EAAA9kB,SAAA,aAAA,YCPA,WACA,YAOA,SAAAgmB,GAAA5b,EAAA6b,EAAAC,EAAAC,GAQA,QAAA7L,KACAlQ,EAAAK,QAAA,UARA,GAAA1B,GAAAtF,IAEAsF,GAAAuR,OAAAA,EACAvR,EAAAkd,cAAAA,EACAld,EAAAmd,SAAAA,EACAnd,EAAAod,cAAAA,EAXArmB,QAAAC,OAAA,uBACAkJ,WAAA,wBAAA+c,GAEAA,EAAAhmB,SAAA,oBAAA,gBAAA,WAAA,oBCNA,WACA,YAQA,SAAAomB,GAAAtB,EAAAlZ,GAYA,QAAA6X,GAAA4C,GACA,MAAA,OAAAA,EACA,gBAEA,eAIA,QAAApC,KACAlb,EAAAud,gBAAA,EACAxB,EAAAC,cAAA3jB,KAAA,SAAAG,GACAwH,EAAA4c,WAAAb,EAAAE,oBAAAzjB,GACAwH,EAAAud,gBAAA,GACA,SAAA/kB,GACAwH,EAAA4c,WAAAb,EAAAE,oBAAAzjB,EAAAd,MACAsI,EAAAud,gBAAA,IAIA,QAAAC,GAAAC,GACA5a,EAAA/D,MACA4B,YAAA,qCACAR,WAAA,wBACAU,aAAA,KACAmC,KAAA,KACA9H,SACAiiB,cAAA,WACA,MAAAO,IAEAN,SAAA,WACA,MAAAnd,GAAAmd,UAEAC,cAAA,WACA,MAAApd,GAAAod,kBA5CA,GAAApd,GAAAtF,IAEAsF,GAAAud,gBAAA,EACAvd,EAAA0a,cAAAA,EACA1a,EAAAkb,QAAAA,EACAlb,EAAAwd,WAAAA,EACAxd,EAAAmd,SAAApB,EAAAI,YACAnc,EAAAod,cAAArB,EAAAK,iBAEApc,EAAAkb,UAhBAnkB,QACAC,OAAA,uBACAkJ,WAAA,2BAAAmd,GAEAA,EAAApmB,SAAA,mBAAA,gBCPA,WACA,YAQA,SAAAkJ,GAAAC,GACAA,EAAAC,MAAA,QACAjC,OAAA,QACAkC,IAAA,QACA5I,MACA2C,aAAA,cACAkG,UAAA,OAEAC,OACAC,YACAC,YAAA,+BAhBA3J,QACAC,OAAA,uBACA2J,OAAAR,GAEAA,EAAAlJ,SAAA,qBCPA,WACA,YAQA,SAAAkJ,GAAAC,GACAA,EAAAC,MAAA,qBACAjC,OAAA,QACAkC,IAAA,iBACA5I,MACA2C,aAAA,cACAkG,UAAA,iBAEAC,OACAC,YACAC,YAAA,6CACAR,WAAA,6BACAU,aAAA,SAlBA7J,QACAC,OAAA,uBACA2J,OAAAR,GAEAA,EAAAlJ,SAAA,qBCPA,WACA,YAQA,SAAAymB,GAAAvP,EAAAlW,GAQA,QAAAT,KAGA,QAAAmmB,GAAAnlB,GACA,GAAAolB,KACA7mB,SAAAmW,QAAA1U,EAAAd,KAAA,SAAAA,GACAkmB,EAAAnZ,KAAA/M,IAEA,IAAAmmB,GAAA1P,EAAA,UACA,OAAA0P,GAAAD,EAAA,UARA,MAAA3lB,GAAAT,IAAA,0BAAAa,KAAAslB,GAYA,QAAAG,KAGA,QAAAC,GAAAvlB,GACA,GAAAolB,KAQA,OAPA7mB,SAAAmW,QAAA1U,EAAAd,KAAA,SAAA2gB,EAAA1a,GACA,GAAAqgB,KACAjnB,SAAAmW,QAAAmL,EAAA,SAAA4F,EAAAC,GACAF,EAAAvZ,MAAA9G,IAAAugB,EAAA7F,IAAA4F,MAEAL,EAAAjgB,GAAAqgB,IAEAJ,EAXA,MAAA3lB,GAAAT,IAAA,kBAAAa,KAAA0lB,GArBA,GAAA3mB,IACAI,IAAAA,EACAsmB,OAAAA,EAGA,OAAA1mB,GAZAL,QACAC,OAAA,uBACAe,QAAA,0BAAA2lB,GAEAA,EAAAzmB,SAAA,UAAA,YCPA,WACA,YAQA,SAAAknB,GAAA9Z,EAAAqZ,GACA,GAAA1d,GAAAtF,IAEAsF,GAAAoe,iBAAA,KACApe,EAAAqe,cAAA,KAEAX,EAAAlmB,MAAAa,KAAA,SAAAgmB,GACAre,EAAAqe,cAAAA,IAEAX,EAAAI,SAAAzlB,KAAA,SAAAgmB,GACAre,EAAAoe,iBAAAC,IAhBAtnB,QACAC,OAAA,uBACAkJ,WAAA,6BAAAie,GAEAA,EAAAlnB,SAAA,UAAA,8BCPA,WACA,YAQA,SAAAkJ,GAAAC,GACAA,EAAAC,MAAA,UACAjC,OAAA,QACAkC,IAAA,UACA5I,MACA2C,aAAA,cACAkG,UAAA,UAEAC,OACAC,YACAC,YAAA,+BACAR,WAAA,mBACAU,aAAA,SAlBA7J,QACAC,OAAA,uBACA2J,OAAAR,GAEAA,EAAAlJ,SAAA,qBCPA,WACA,YAQA,SAAAqnB,GAAAnnB,GACA,GAAAC,GAAAD,EAAA,4BACAK,KACAF,OAAA,MACAC,SAAA,GAEAF,OACAC,OAAA,MACAC,SAAA,EACAoH,QAAA4f,SAAA,KAAAC,OAAA,QAIA,OAAApnB,GAnBAL,QACAC,OAAA,uBACAe,QAAA,gBAAAumB,GAEAA,EAAArnB,SAAA,gBCPA,WACA,YAQA,SAAAwnB,GAAAtQ,EAAAmQ,EAAA9X,GAkBA,QAAAkY,KACA,GAAAC,GAAA,aACAJ,EAAApQ,EAAA,QAAAnO,EAAAue,SAAAI,GACAH,EAAArQ,EAAA,QAAAnO,EAAAwe,OAAAG,EAEAL,GAAAjnB,OAAAiQ,KAAAtH,EAAAsH,KAAA,EAAAvE,KAAA,GAAAwb,SAAAA,EAAAC,OAAAA,GAAA,SAAAlmB,EAAA2E,GACA+C,EAAA4e,OAAAtmB,EACA0H,EAAA+G,MAAAP,EAAAQ,MAAA/J,EAAA,SACA+C,EAAAiH,WAAAhK,EAAA,mBAKA,QAAA4hB,KAEA,GAAAA,GAAA,GAAAzQ,KACApO,GAAAwe,OAAA,GAAApQ,MAAAyQ,EAAAC,cAAAD,EAAAE,WAAAF,EAAAG,UAAA,GAGA,QAAAC,KACA,GAAAV,GAAA,GAAAnQ,KAEAmQ,GADA,IAAAA,EAAAQ,WACA,GAAA3Q,MAAAmQ,EAAAO,cAAA,EAAA,GAAAP,EAAAS,WAEA,GAAA5Q,MAAAmQ,EAAAO,cAAAP,EAAAQ,WAAA,EAAAR,EAAAS,WAGAhf,EAAAue,SAAAA,EAGA,QAAA/W,GAAAF,GACAtH,EAAAsH,KAAAA,EACAtH,EAAA0e,eAjDA,GAAA1e,GAAAtF,IAEAsF,GAAA4e,OAAA,KACA5e,EAAAue,SAAA,KACAve,EAAA+G,MAAA,KACA/G,EAAAwH,SAAAA,EACAxH,EAAA0e,aAAAA,EACA1e,EAAAsH,KAAA,EACAtH,EAAAif,cAAAA,EACAjf,EAAAwe,OAAA,KACAxe,EAAA6e,MAAAA,EACA7e,EAAAiH,WAAA,KAEAjH,EAAA6e,QACA7e,EAAAif,gBACAjf,EAAA0e,eAtBA3nB,QACAC,OAAA,uBACAkJ,WAAA,mBAAAue,GAEAA,EAAAxnB,SAAA,UAAA,gBAAA,iBCPA,WACA,YAQA,SAAAkJ,GAAAC,GACAA,EAAAC,MAAA,SACA4I,UAAA,EACA7K,OAAA,QATArH,QACAC,OAAA,uBACA2J,OAAAR,GAEAA,EAAAlJ,SAAA,qBCPA,WACA,YAQA,SAAAkJ,GAAAC,GACAA,EAAAC,MAAA,YACAjC,OAAA,UACAkC,IAAA,YACA5I,MACA2C,aAAA,aACAkG,UAAA,YAEAC,OACAC,YACAC,YAAA,qCACAR,WAAA,qBACAU,aAAA,SAlBA7J,QACAC,OAAA,uBACA2J,OAAAR,GAEAA,EAAAlJ,SAAA,qBCPA,WACA,YAQA,SAAAioB,GAAArlB,EAAAwD,GA0BA,QAAAzF,KACAyF,EAAAoC,cAAAO,EAAAmf,iBAAA9mB,KAAA,WACA2H,EAAAoH,MAAA,KACApH,EAAA7C,QAAA,KACAtD,EAAAI,UAAA,GAAA5B,KAAA,SAAA0C,GACAiF,EAAAmf,gBAAAC,EAAArkB,OAEAS,MAAA,WACAwE,EAAA7C,QAAA,KACA6C,EAAAoH,MAAA,UAlCA,GAAApH,GAAAtF,IAEAsF,GAAAoH,MAAA,KACApH,EAAApI,KAAAA,EACAoI,EAAAmf,gBAAA,KACAnf,EAAA7C,QAAA,IAKA,IAAAiiB,GAAA,SAAArkB,GACA,OACA0e,UAAA1e,EAAA0e,UACAjQ,MAAAzO,EAAAyO,MACAF,UAAAvO,EAAAuO,UACA8P,QAAAre,EAAAqe,QACA7P,SAAAxO,EAAAwO,SACA7M,MAAA3B,EAAA2B,OAIA7C,GAAAI,WAAA5B,KAAA,SAAA0C,GACAiF,EAAAmf,gBAAAC,EAAArkB,KA7BAhE,QACAC,OAAA,uBACAkJ,WAAA,qBAAAgf,GAEAA,EAAAjoB,SAAA,YAAA,WCPA,WACA,YAQA,SAAAkJ,GAAAC,GACAA,EAAAC,MAAA,YACAjC,OAAA,UACAkC,IAAA,YACA5I,MACA2C,aAAA,aACAkG,UAAA,YAEAC,OACAC,YACAC,YAAA,qCACAR,WAAA,qBACAU,aAAA,SAlBA7J,QACAC,OAAA,uBACA2J,OAAAR,GAEAA,EAAAlJ,SAAA,qBCPA,WACA,YAQA,SAAAooB,GAAA3lB,EAAAG,GAcA,QAAAylB,GAAAC,GACA7lB,EAAA5B,QAAAynB,OAAA3iB,mBAAA2iB,IACA,WACAvf,EAAAoH,MAAA,KACApH,EAAA7C,QAAA,KACA6C,EAAAwf,SAAA9lB,EAAAC,UAEA,WACAqG,EAAA7C,QAAA,KACA6C,EAAAoH,MAAA,UAtBA,GAAApH,GAAAtF,IAEAsF,GAAAjF,QAAA,KACAiF,EAAAoH,MAAA,KACApH,EAAAsf,WAAAA,EACAtf,EAAAwf,SAAA9lB,EAAAC,SACAqG,EAAA7C,QAAA,KAGAtD,EAAAI,WAAA5B,KAAA,SAAA0C,GACAiF,EAAAjF,QAAAA,IAjBAhE,QACAC,OAAA,uBACAkJ,WAAA,qBAAAmf,GAEAA,EAAApoB,SAAA,WAAA,gBCPA,WACA,YAQA,SAAAkJ,GAAAC,GACAA,EAAAC,MAAA,gBACAjC,OAAA,UACAkC,IAAA,iBACA5I,MACA2C,gBAEAmG,OACAC,YACAC,YAAA,+CACAR,WAAA,yBACAU,aAAA,SAjBA7J,QACAC,OAAA,uBACA2J,OAAAR,GAEAA,EAAAlJ,SAAA,qBCPA,WACA,YAQA,SAAAwoB,GAAAte,EAAA9D,GAWA,QAAAqiB,KAEA1f,EAAAoH,MAAA,KACApH,EAAA2f,oBAAA,KAEAtiB,EAAAkC,kBAAAS,EAAA4f,aAAApW,OAAAnR,KAAA,WACA2H,EAAA7C,QAAA,OACA3B,MAAA,SAAAhD,GACAwH,EAAA7C,QAAA,KACA,MAAA3E,EAAAmb,QAAA,kCAAAnb,EAAAd,KACAsI,EAAA2f,oBAAA,QAEA3f,EAAAoH,MAAA,UAtBA,GAAApH,GAAAtF,IAEAsF,GAAAoH,MAAA,KACApH,EAAA2f,oBAAA,KACA3f,EAAA0f,aAAAA,EACA1f,EAAA4f,gBACA5f,EAAA7C,QAAA,KAEAgE,EAAA,WAAApK,QAAAkC,QAAA,UAAAkJ,UAfApL,QACAC,OAAA,uBACAkJ,WAAA,yBAAAuf,GAEAA,EAAAxoB,SAAA,WAAA,WCPA,WACA,YAQA,SAAAkJ,GAAAC,GACAA,EAAAC,MAAA,eACAjC,OAAA,UACAkC,IAAA,oBACA5I,MACA2C,gBAEAmG,OACAC,YACAC,YAAA,6CACAR,WAAA,wBACAU,aAAA,SAjBA7J,QACAC,OAAA,uBACA2J,OAAAR,GAEAA,EAAAlJ,SAAA,qBCPA,WACA,YAQA,SAAA4oB,GAAAze,EAAAD,EAAA9D,EAAAG,GAcA,QAAAsiB,KACA9f,EAAA+f,WAAA,KACA/f,EAAAoH,MAAA,KACApH,EAAA4f,aAAA9iB,WAAAkD,EAAAggB,gBACAhgB,EAAA+f,WAAA,QAEA1iB,EAAAgC,qBAAA1B,IAAAyD,EAAAzD,IAAAsB,YAAAe,EAAA4f,aAAA9iB,WAAAzE,KAAA,WACA2H,EAAA7C,QAAA,OACA3B,MAAA,WACAwE,EAAA7C,QAAA,KACA6C,EAAAoH,MAAA,UAvBA,GAAApH,GAAAtF,IAEAsF,GAAAigB,WAAAlpB,QAAAoB,YAAAiJ,EAAAzD,KACAqC,EAAAggB,gBAAA,KACAhgB,EAAA+f,WAAA,KACA/f,EAAAoH,MAAA,KACApH,EAAA8f,YAAAA,EACA9f,EAAAtD,MAAAc,EAAAsB,KACAkB,EAAA4f,gBACA5f,EAAA7C,QAAA,KAEAgE,EAAA,WAAApK,QAAAkC,QAAA,aAAAkJ,UAlBApL,QACAC,OAAA,uBACAkJ,WAAA,wBAAA2f,GAEAA,EAAA5oB,SAAA,eAAA,WAAA,OAAA,mBCPA,WACA,YAQA,SAAAkJ,GAAAC,GACAA,EAAAC,MAAA,YACAjC,OAAA,UACAkC,IAAA,YACA5I,MACA2C,eACAkG,UAAA,gBAEAC,OACAC,YACAC,YAAA,qCACAR,WAAA,qBACAU,aAAA,SAlBA7J,QACAC,OAAA,uBACA2J,OAAAR,GAEAA,EAAAlJ,SAAA,qBCPA,WACA,YASA,SAAAipB,GAAA/e,EAAA9D,EAAAG,GAaA,QAAAwD,KACAhB,EAAAmgB,gBAAArjB,WAAAkD,EAAAggB,gBACAhgB,EAAA+f,WAAA,SAEA/f,EAAAmgB,gBAAA/G,QAAA,KACApZ,EAAA+f,WAAA,KACA/f,EAAAoH,MAAA,KACApH,EAAAogB,gBAAA,KACApgB,EAAAqgB,iBAAA,KAEAhjB,EAAA6B,cAAAc,EAAAmgB,iBAAA9nB,KAAA,WACA2H,EAAA7C,QAAA,OACA3B,MAAA,SAAAhD,GACAwH,EAAA7C,QAAA,KACA,MAAA3E,EAAAmb,QAAA,yBAAAnb,EAAAd,KACAsI,EAAAogB,gBAAA,QACA,MAAA5nB,EAAAmb,QAAA,kCAAAnb,EAAAd,KACAsI,EAAAqgB,iBAAA,QAEArgB,EAAAoH,MAAA,WA/BA,GAAApH,GAAAtF,IAEAsF,GAAA+f,WAAA,KACA/f,EAAAoH,MAAA,KACApH,EAAAogB,gBAAA,KACApgB,EAAAtD,MAAAc,EAAAsB,KACAkB,EAAAgB,SAAAA,EACAhB,EAAAmgB,mBACAngB,EAAA7C,QAAA,KAEAgE,EAAA,WAAApK,QAAAkC,QAAA,UAAAkJ,UAlBApL,QACAC,OAAA,uBACAkJ,WAAA,qBAAAggB,GAGAA,EAAAjpB,SAAA,WAAA,OAAA,mBCPA,WACA,YAMA,SAAAqpB,KAoBA,QAAAvnB,GAAAC,EAAAunB,GACA,GAAAC,IACAC,QAAA,OAAA,OAAA,OAAA,OAAA,QACAC,eAAA,SAAAvT,GAEA,GAAAwT,GAAA,EACAC,EAAA,yBAEAC,EAAA,SAAAC,KAAA3T,GACA4T,EAAA,SAAAD,KAAA3T,GACA6T,EAAA,SAAAF,KAAA3T,GACA8T,EAAAL,EAAAE,KAAA3T,GAEA+T,GAAAL,EAAAE,EAAAC,EAAAC,GACAE,EAAAC,EAAAC,KAAAH,EAAA,SAAAI,GACA,MAAAA,MAAA,IACA/mB,MAaA,OAXAomB,IAAA,EAAAxT,EAAA5S,QAAA4S,EAAA5S,QAAA,GAAA,EAAA,GACAomB,GAAA,GAAAQ,EAGAR,EAAAxT,EAAA5S,QAAA,EAAAgnB,KAAAC,IAAAb,EAAA,IAAAA,EAGAA,EAAA,IAAAQ,EAAAI,KAAAC,IAAAb,EAAA,IAAAA,EACAA,EAAA,IAAAQ,EAAAI,KAAAC,IAAAb,EAAA,IAAAA,EACAA,EAAA,IAAAQ,EAAAI,KAAAC,IAAAb,EAAA,IAAAA,GAKAc,SAAA,SAAAC,GAEA,GAAAC,EAiBA,OAfAA,GADAD,GAAA,GACA,EAEAA,GAAA,GACA,EAEAA,GAAA,GACA,EAEAA,GAAA,GACA,EAGA,GAGAC,IAAAA,EAAA,EAAAC,IAAAlnB,KAAA+lB,OAAAkB,KAGA3oB,GAAAkD,OAAA,kBAAA,SAAAY,GACA,GAAAA,EAAA,CACA,GAAA+kB,GAAArB,EAAAiB,SAAAjB,EAAAE,eAAA5jB,GACAyjB,GAAAnnB,YAAA,WACAmnB,EAAArU,KAAA,MAAA4V,SAAA,MACAC,KAAAC,mBAAA,SACAlX,MAAA,EAAA+W,EAAAF,KACAI,KAAAC,mBAAAH,EAAAD,SAhFA,GAAAvoB,IACAC,SAAA,EACAC,SAAA,IACAC,SAAA,0MAMAR,OACAipB,gBAAA,KAEAxoB,KAAAV,EAGA,OAAAM,GApBAtC,QACAC,OAAA,uBACAqC,UAAA,sBAAAinB,MCNA,WACA,YAQA,SAAAngB,GAAAC,GACAA,EAAAC,MAAA,YACAjC,OAAA,UACAkC,IAAA,YACA5I,MACA2C,aAAA,aACAkG,UAAA,YAEAC,OACAC,YACAC,YAAA,qCACAR,WAAA,qBACAU,aAAA,SAlBA7J,QACAC,OAAA,uBACA2J,OAAAR,GAEAA,EAAAlJ,SAAA,qBCPA,WACA,YAQA,SAAAirB,GAAA7kB,EAAAxD,GAYA,QAAAmF,KACAgB,EAAAlD,WAAAkD,EAAAggB,iBACAhgB,EAAAoH,MAAA,KACApH,EAAA7C,QAAA,KACA6C,EAAA+f,WAAA,UAEA/f,EAAA+f,WAAA,KACA1iB,EAAA2B,eAAAgB,EAAAlD,UAAAzE,KAAA,WACA2H,EAAAoH,MAAA,KACApH,EAAA7C,QAAA,OACA3B,MAAA,WACAwE,EAAA7C,QAAA,KACA6C,EAAAoH,MAAA,WAvBA,GAAApH,GAAAtF,IAEAsF,GAAAhB,eAAAA,EACAgB,EAAA+f,WAAA,KACA/f,EAAAoH,MAAA,KACApH,EAAA7C,QAAA,KAEAtD,EAAAI,WAAA5B,KAAA,SAAA0C,GACAiF,EAAAjF,QAAAA,IAfAhE,QACAC,OAAA,uBACAkJ,WAAA,qBAAAgiB,GAEAA,EAAAjrB,SAAA,OAAA,gBCPA,WACA,YAQA,SAAAkJ,GAAAC,GACAA,EAAAC,MAAA,YACAjC,OAAA,UACAkC,IAAA,gBACA5I,MACA2C,eACAkG,UAAA,cAEAC,OACAC,YACAC,YAAA,qCACAR,WAAA,uBACAU,aAAA,SAlBA7J,QACAC,OAAA,uBACA2J,OAAAR,GAEAA,EAAAlJ,SAAA,qBCPA,WACA,YAQA,SAAAkrB,GAAA/gB,EAAA/D,EAAAG,GACA,GAAAwC,GAAAtF,IAEA2C,GAAAK,iBAAAC,IAAAyD,EAAAzD,MAAAtF,KAAA,WACA2H,EAAAoH,MAAA,KACApH,EAAA7C,QAAA,OACA3B,MAAA,WACAwE,EAAA7C,QAAA,KACA6C,EAAAoH,MAAA,UAGApH,EAAAtD,MAAAc,EAAAsB,KAjBA/H,QACAC,OAAA,uBACAkJ,WAAA,uBAAAiiB,GAEAA,EAAAlrB,SAAA,eAAA,OAAA,mBCPA,WACA,YAQA,SAAAkJ,GAAAC,GACAA,EAAAC,MAAA,WACA4I,UAAA,EACA7K,OAAA,QATArH,QACAC,OAAA,uBACA2J,OAAAR,GAEAA,EAAAlJ,SAAA,qBASA,WAAAF,QAAAC,OAAA,uBAAAJ,KAAA,iBAAA,SAAAwrB,GAAAA,EAAAC,IAAA,qBAAA,oiDC06MAD,EAAeC,IAAI,+BAA+B,28CAClDD,EAAeC,IAAI,6CAA6C,s5CAChED,EAAeC,IAAI,2BAA2B,8KAC9CD,EAAeC,IAAI,+BAA+B,g2BAClDD,EAAeC,IAAI,qCAAqC;AACxDD,EAAeC,IAAI,2BAA2B,w8CAC9CD,EAAeC,IAAI,iCAAiC,kmWACpDD,EAAeC,IAAI,uCAAuC,6sEAC1DD,EAAeC,IAAI,+DAA+D,8tBAClFD,EAAeC,IAAI,wDAAwD,qgCAC3ED,EAAeC,IAAI,wDAAwD,s7FAC3ED,EAAeC,IAAI,iDAAiD,yxFACpED,EAAeC,IAAI,qCAAqC,+aACxDD,EAAeC,IAAI,qCAAqC,goEACxDD,EAAeC,IAAI,qCAAqC,0uIACxDD,EAAeC,IAAI,qCAAqC,8uBACxDD,EAAeC,IAAI,qCAAqC;AACxDD,EAAeC,IAAI,kCAAkC,08CACrDD,EAAeC,IAAI,8CAA8C,s9CACjED,EAAeC,IAAI,0DAA0D,mwBAC7ED,EAAeC,IAAI,mDAAmD,stBACtED,EAAeC,IAAI,mDAAmD,04CACtED,EAAeC,IAAI,gEAAgE,ywBACnFD,EAAeC,IAAI,yDAAyD,yvBAC5ED,EAAeC,IAAI,yDAAyD,+mDAC5ED,EAAeC,IAAI,mDAAmD,whDACtED,EAAeC,IAAI,4DAA4D,qwBAC/ED,EAAeC,IAAI,qDAAqD,i1CACxED,EAAeC,IAAI,qDAAqD,qqGACxED,EAAeC,IAAI,+CAA+C,i1FAClED,EAAeC,IAAI,kDAAkD,2vBACrED,EAAeC,IAAI,2CAA2C,4/BAC9DD,EAAeC,IAAI,2CAA2C,w/DAC9DD,EAAeC,IAAI,qCAAqC,2sEACxDD,EAAeC,IAAI,sDAAsD,4jFACzED,EAAeC,IAAI,kEAAkE,0wBACrFD,EAAeC,IAAI,2DAA2D,0rCAC9ED,EAAeC,IAAI,2DAA2D;AAC9ED,EAAeC,IAAI,4DAA4D,qwBAC/ED,EAAeC,IAAI,qDAAqD,i9BACxED,EAAeC,IAAI,qDAAqD,yhEACxED,EAAeC,IAAI,+CAA+C,0qDAClED,EAAeC,IAAI,wDAAwD,iwBAC3ED,EAAeC,IAAI,iDAAiD,klBACpED,EAAeC,IAAI,iDAAiD,6mCACpED,EAAeC,IAAI,2CAA2C,20CAC9DD,EAAeC,IAAI,oDAAoD,6vBACvED,EAAeC,IAAI,6CAA6C,2oBAChED,EAAeC,IAAI,6CAA6C,gyCAChED,EAAeC,IAAI,uCAAuC,81CAC1DD,EAAeC,IAAI,sCAAsC,mQACzDD,EAAeC,IAAI,+BAA+B,2QAClDD,EAAeC,IAAI,iCAAiC,0lMACpDD,EAAeC,IAAI,6CAA6C,ygFAChED,EAAeC,IAAI,+CAA+C","file":"app/app-af4577dd6a.js","sourcesContent":["(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App', [\n            'ngStorage',\n            'ngResource',\n            'ngCookies',\n            'ngAria',\n            'ngCacheBuster',\n            'ngFileUpload',\n            'ui.bootstrap',\n            'ui.bootstrap.datetimepicker',\n            'ui.router',\n            'infinite-scroll',\n            // jhipster-needle-angularjs-add-module JHipster will add new module here\n            'angular-loading-bar'\n        ])\n        .run(run);\n\n    run.$inject = ['stateHandler'];\n\n    function run(stateHandler) {\n        stateHandler.initialize();\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('User', User);\n\n    User.$inject = ['$resource'];\n\n    function User ($resource) {\n        var service = $resource('api/users/:login', {}, {\n            'query': {method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'save': { method:'POST' },\n            'update': { method:'PUT' },\n            'delete':{ method:'DELETE'}\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('ProfileService', ProfileService);\n\n    ProfileService.$inject = ['$http'];\n\n    function ProfileService($http) {\n\n        var dataPromise;\n\n        var service = {\n            getProfileInfo : getProfileInfo\n        };\n\n        return service;\n\n        function getProfileInfo() {\n            if (angular.isUndefined(dataPromise)) {\n                dataPromise = $http.get('api/profile-info').then(function(result) {\n                    if (result.data.activeProfiles) {\n                        var response = {};\n                        response.activeProfiles = result.data.activeProfiles;\n                        response.ribbonEnv = result.data.ribbonEnv;\n                        response.inProduction = result.data.activeProfiles.indexOf(\"prod\") !== -1;\n                        response.swaggerEnabled = result.data.activeProfiles.indexOf(\"swagger\") !== -1;\n                        return response;\n                    }\n                });\n            }\n            return dataPromise;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .directive('pageRibbon', pageRibbon);\n\n    pageRibbon.$inject = ['ProfileService', '$rootScope'];\n\n    function pageRibbon(ProfileService, $rootScope) {\n        var directive = {\n            replace : true,\n            restrict : 'AE',\n            template : '<div class=\"ribbon hidden\"><a href=\"\" >{{ribbonEnv}}</a></div>',\n            link : linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            ProfileService.getProfileInfo().then(function(response) {\n                if (response.ribbonEnv) {\n                    scope.ribbonEnv = response.ribbonEnv;\n                    element.addClass(response.ribbonEnv);\n                    element.removeClass('hidden');\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('Sessions', Sessions);\n\n    Sessions.$inject = ['$resource'];\n\n    function Sessions ($resource) {\n        return $resource('api/account/sessions/:series', {}, {\n            'getAll': { method: 'GET', isArray: true}\n        });\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('Register', Register);\n\n    Register.$inject = ['$resource'];\n\n    function Register ($resource) {\n        return $resource('api/register', {}, {});\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('Principal', Principal);\n\n    Principal.$inject = ['$q', 'Account'];\n\n    function Principal ($q, Account) {\n        var _identity,\n            _authenticated = false;\n\n        var service = {\n            authenticate: authenticate,\n            hasAnyAuthority: hasAnyAuthority,\n            hasAuthority: hasAuthority,\n            identity: identity,\n            isAuthenticated: isAuthenticated,\n            isIdentityResolved: isIdentityResolved\n        };\n\n        return service;\n\n        function authenticate (identity) {\n            _identity = identity;\n            _authenticated = identity !== null;\n        }\n\n        function hasAnyAuthority (authorities) {\n            if (!_authenticated || !_identity || !_identity.authorities) {\n                return false;\n            }\n\n            for (var i = 0; i < authorities.length; i++) {\n                if (_identity.authorities.indexOf(authorities[i]) !== -1) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        function hasAuthority (authority) {\n            if (!_authenticated) {\n                return $q.when(false);\n            }\n\n            return this.identity().then(function(_id) {\n                return _id.authorities && _id.authorities.indexOf(authority) !== -1;\n            }, function(){\n                return false;\n            });\n        }\n\n        function identity (force) {\n            var deferred = $q.defer();\n\n            if (force === true) {\n                _identity = undefined;\n            }\n\n            // check and see if we have retrieved the identity data from the server.\n            // if we have, reuse it by immediately resolving\n            if (angular.isDefined(_identity)) {\n                deferred.resolve(_identity);\n\n                return deferred.promise;\n            }\n\n            // retrieve the identity data from the server, update the identity object, and then resolve.\n            Account.get().$promise\n                .then(getAccountThen)\n                .catch(getAccountCatch);\n\n            return deferred.promise;\n\n            function getAccountThen (account) {\n                _identity = account.data;\n                _authenticated = true;\n                deferred.resolve(_identity);\n            }\n\n            function getAccountCatch () {\n                _identity = null;\n                _authenticated = false;\n                deferred.resolve(_identity);\n            }\n        }\n\n        function isAuthenticated () {\n            return _authenticated;\n        }\n\n        function isIdentityResolved () {\n            return angular.isDefined(_identity);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('PasswordResetInit', PasswordResetInit);\n\n    PasswordResetInit.$inject = ['$resource'];\n\n    function PasswordResetInit($resource) {\n        var service = $resource('api/account/reset_password/init', {}, {});\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('PasswordResetFinish', PasswordResetFinish);\n\n    PasswordResetFinish.$inject = ['$resource'];\n\n    function PasswordResetFinish($resource) {\n        var service = $resource('api/account/reset_password/finish', {}, {});\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('Password', Password);\n\n    Password.$inject = ['$resource'];\n\n    function Password($resource) {\n        var service = $resource('api/account/change_password', {}, {});\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .directive('hasAuthority', hasAuthority);\n\n    hasAuthority.$inject = ['Principal'];\n\n    function hasAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authority = attrs.hasAuthority.replace(/\\s+/g, '');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    Principal.hasAuthority(authority)\n                        .then(function (result) {\n                            if (result) {\n                                setVisible();\n                            } else {\n                                setHidden();\n                            }\n                        });\n                };\n\n            if (authority.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .directive('hasAnyAuthority', hasAnyAuthority);\n\n    hasAnyAuthority.$inject = ['Principal'];\n\n    function hasAnyAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authorities = attrs.hasAnyAuthority.replace(/\\s+/g, '').split(',');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n                    var result;\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    result = Principal.hasAnyAuthority(authorities);\n                    if (result) {\n                        setVisible();\n                    } else {\n                        setHidden();\n                    }\n                };\n\n            if (authorities.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('AuthServerProvider', AuthServerProvider);\n\n    AuthServerProvider.$inject = ['$http', '$localStorage' ];\n\n    function AuthServerProvider ($http, $localStorage ) {\n        var service = {\n            getToken: getToken,\n            hasValidToken: hasValidToken,\n            login: login,\n            logout: logout\n        };\n\n        return service;\n\n        function getToken () {\n            var token = $localStorage.authenticationToken;\n            return token;\n        }\n\n        function hasValidToken () {\n            var token = this.getToken();\n            return !!token;\n        }\n\n        function login (credentials) {\n            var data = 'j_username=' + encodeURIComponent(credentials.username) +\n                '&j_password=' + encodeURIComponent(credentials.password) +\n                '&remember-me=' + credentials.rememberMe + '&submit=Login';\n\n            return $http.post('api/authentication', data, {\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            }).success(function (response) {\n                return response;\n            });\n        }\n\n        function logout () {\n\n            \n            // logout from the server\n            $http.post('api/logout').success(function (response) {\n                delete $localStorage.authenticationToken;\n                // to get a new csrf token call the api\n                $http.get('api/account');\n                return response;\n            });\n            \n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('Auth', Auth);\n\n    Auth.$inject = ['$rootScope', '$state', '$sessionStorage', '$q', 'Principal', 'AuthServerProvider', 'Account', 'LoginService', 'Register', 'Activate', 'Password', 'PasswordResetInit', 'PasswordResetFinish'];\n\n    function Auth ($rootScope, $state, $sessionStorage, $q, Principal, AuthServerProvider, Account, LoginService, Register, Activate, Password, PasswordResetInit, PasswordResetFinish) {\n        var service = {\n            activateAccount: activateAccount,\n            authorize: authorize,\n            changePassword: changePassword,\n            createAccount: createAccount,\n            getPreviousState: getPreviousState,\n            login: login,\n            logout: logout,\n            resetPasswordFinish: resetPasswordFinish,\n            resetPasswordInit: resetPasswordInit,\n            resetPreviousState: resetPreviousState,\n            storePreviousState: storePreviousState,\n            updateAccount: updateAccount\n        };\n\n        return service;\n\n        function activateAccount (key, callback) {\n            var cb = callback || angular.noop;\n\n            return Activate.get(key,\n                function (response) {\n                    return cb(response);\n                },\n                function (err) {\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function authorize (force) {\n            var authReturn = Principal.identity(force).then(authThen);\n\n            return authReturn;\n\n            function authThen () {\n                var isAuthenticated = Principal.isAuthenticated();\n\n                // an authenticated user can't access to login and register pages\n                if (isAuthenticated && $rootScope.toState.parent === 'account' && ($rootScope.toState.name === 'login' || $rootScope.toState.name === 'register')) {\n                    $state.go('home');\n                }\n\n                // recover and clear previousState after external login redirect (e.g. oauth2)\n                if (isAuthenticated && !$rootScope.fromState.name && getPreviousState()) {\n                    var previousState = getPreviousState();\n                    resetPreviousState();\n                    $state.go(previousState.name, previousState.params);\n                }\n\n                if ($rootScope.toState.data.authorities && $rootScope.toState.data.authorities.length > 0 && !Principal.hasAnyAuthority($rootScope.toState.data.authorities)) {\n                    if (isAuthenticated) {\n                        // user is signed in but not authorized for desired state\n                        $state.go('accessdenied');\n                    }\n                    else {\n                        // user is not authenticated. stow the state they wanted before you\n                        // send them to the login service, so you can return them when you're done\n                        storePreviousState($rootScope.toState.name, $rootScope.toStateParams);\n\n                        // now, send them to the signin state so they can log in\n                        $state.go('accessdenied').then(function() {\n                            LoginService.open();\n                        });\n                    }\n                }\n            }\n        }\n\n        function changePassword (newPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return Password.save(newPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function createAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Register.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    this.logout();\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function login (credentials, callback) {\n            var cb = callback || angular.noop;\n            var deferred = $q.defer();\n\n            AuthServerProvider.login(credentials)\n                .then(loginThen)\n                .catch(function (err) {\n                    this.logout();\n                    deferred.reject(err);\n                    return cb(err);\n                }.bind(this));\n\n            function loginThen (data) {\n                Principal.identity(true).then(function(account) {\n                    deferred.resolve(data);\n                });\n                return cb();\n            }\n\n            return deferred.promise;\n        }\n\n\n        function logout () {\n            AuthServerProvider.logout();\n            Principal.authenticate(null);\n        }\n\n        function resetPasswordFinish (keyAndPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetFinish.save(keyAndPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function resetPasswordInit (mail, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetInit.save(mail, function() {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function updateAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Account.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function getPreviousState() {\n            var previousState = $sessionStorage.previousState;\n            return previousState;\n        }\n\n        function resetPreviousState() {\n            delete $sessionStorage.previousState;\n        }\n\n        function storePreviousState(previousStateName, previousStateParams) {\n            var previousState = { \"name\": previousStateName, \"params\": previousStateParams };\n            $sessionStorage.previousState = previousState;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('Activate', Activate);\n\n    Activate.$inject = ['$resource'];\n\n    function Activate ($resource) {\n        var service = $resource('api/activate', {}, {\n            'get': { method: 'GET', params: {}, isArray: false}\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('Account', Account);\n\n    Account.$inject = ['$resource'];\n\n    function Account ($resource) {\n        var service = $resource('api/account', {}, {\n            'get': { method: 'GET', params: {}, isArray: false,\n                interceptor: {\n                    response: function(response) {\n                        // expose response\n                        return response;\n                    }\n                }\n            }\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('NavbarController', NavbarController);\n\n    NavbarController.$inject = ['$state', 'Auth', 'Principal', 'ProfileService', 'LoginService'];\n\n    function NavbarController ($state, Auth, Principal, ProfileService, LoginService) {\n        var vm = this;\n\n        vm.isNavbarCollapsed = true;\n        vm.isAuthenticated = Principal.isAuthenticated;\n\n        ProfileService.getProfileInfo().then(function(response) {\n            vm.inProduction = response.inProduction;\n            vm.swaggerEnabled = response.swaggerEnabled;\n        });\n\n        vm.login = login;\n        vm.logout = logout;\n        vm.toggleNavbar = toggleNavbar;\n        vm.collapseNavbar = collapseNavbar;\n        vm.$state = $state;\n\n        function login() {\n            collapseNavbar();\n            LoginService.open();\n        }\n\n        function logout() {\n            collapseNavbar();\n            Auth.logout();\n            $state.go('home');\n        }\n\n        function toggleNavbar() {\n            vm.isNavbarCollapsed = !vm.isNavbarCollapsed;\n        }\n\n        function collapseNavbar() {\n            vm.isNavbarCollapsed = true;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n            .state('error', {\n                parent: 'app',\n                url: '/error',\n                data: {\n                    authorities: [],\n                    pageTitle: 'Error page!'\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/error.html'\n                    }\n                }\n            })\n            .state('accessdenied', {\n                parent: 'app',\n                url: '/accessdenied',\n                data: {\n                    authorities: []\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/accessdenied.html'\n                    }\n                }\n            });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('home', {\n            parent: 'app',\n            url: '/',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/home/home.html',\n                    controller: 'HomeController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('HomeController', HomeController);\n\n    HomeController.$inject = ['$scope', 'Principal', 'LoginService', '$state'];\n\n    function HomeController ($scope, Principal, LoginService, $state) {\n        var vm = this;\n\n        vm.account = null;\n        vm.isAuthenticated = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        $scope.$on('authenticationSuccess', function() {\n            getAccount();\n        });\n\n        getAccount();\n\n        function getAccount() {\n            Principal.identity().then(function(account) {\n                vm.account = account;\n                vm.isAuthenticated = Principal.isAuthenticated;\n            });\n        }\n        function register () {\n            $state.go('register');\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('TaskMySuffixDialogController', TaskMySuffixDialogController);\n\n    TaskMySuffixDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Task', 'Job'];\n\n    function TaskMySuffixDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Task, Job) {\n        var vm = this;\n\n        vm.task = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.jobs = Job.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.task.id !== null) {\n                Task.update(vm.task, onSaveSuccess, onSaveError);\n            } else {\n                Task.save(vm.task, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('cs499Assignment2App:taskUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('TaskMySuffixDetailController', TaskMySuffixDetailController);\n\n    TaskMySuffixDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Task', 'Job'];\n\n    function TaskMySuffixDetailController($scope, $rootScope, $stateParams, previousState, entity, Task, Job) {\n        var vm = this;\n\n        vm.task = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('cs499Assignment2App:taskUpdate', function(event, result) {\n            vm.task = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('TaskMySuffixDeleteController',TaskMySuffixDeleteController);\n\n    TaskMySuffixDeleteController.$inject = ['$uibModalInstance', 'entity', 'Task'];\n\n    function TaskMySuffixDeleteController($uibModalInstance, entity, Task) {\n        var vm = this;\n\n        vm.task = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Task.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('taskmySuffix', {\n            parent: 'entity',\n            url: '/taskmySuffix',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Tasks'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/task/tasksmySuffix.html',\n                    controller: 'TaskMySuffixController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('taskmySuffix-detail', {\n            parent: 'entity',\n            url: '/taskmySuffix/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Task'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/task/taskmySuffix-detail.html',\n                    controller: 'TaskMySuffixDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Task', function($stateParams, Task) {\n                    return Task.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'taskmySuffix',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('taskmySuffix-detail.edit', {\n            parent: 'taskmySuffix-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/task/taskmySuffix-dialog.html',\n                    controller: 'TaskMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Task', function(Task) {\n                            return Task.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('taskmySuffix.new', {\n            parent: 'taskmySuffix',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/task/taskmySuffix-dialog.html',\n                    controller: 'TaskMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                title: null,\n                                description: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('taskmySuffix', null, { reload: 'taskmySuffix' });\n                }, function() {\n                    $state.go('taskmySuffix');\n                });\n            }]\n        })\n        .state('taskmySuffix.edit', {\n            parent: 'taskmySuffix',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/task/taskmySuffix-dialog.html',\n                    controller: 'TaskMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Task', function(Task) {\n                            return Task.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('taskmySuffix', null, { reload: 'taskmySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('taskmySuffix.delete', {\n            parent: 'taskmySuffix',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/task/taskmySuffix-delete-dialog.html',\n                    controller: 'TaskMySuffixDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Task', function(Task) {\n                            return Task.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('taskmySuffix', null, { reload: 'taskmySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('TaskMySuffixController', TaskMySuffixController);\n\n    TaskMySuffixController.$inject = ['$scope', '$state', 'Task'];\n\n    function TaskMySuffixController ($scope, $state, Task) {\n        var vm = this;\n\n        vm.tasks = [];\n\n        loadAll();\n\n        function loadAll() {\n            Task.query(function(result) {\n                vm.tasks = result;\n                vm.searchQuery = null;\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('cs499Assignment2App')\n        .factory('Task', Task);\n\n    Task.$inject = ['$resource'];\n\n    function Task ($resource) {\n        var resourceUrl =  'api/tasks/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('RegionMySuffixDialogController', RegionMySuffixDialogController);\n\n    RegionMySuffixDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Region'];\n\n    function RegionMySuffixDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Region) {\n        var vm = this;\n\n        vm.region = entity;\n        vm.clear = clear;\n        vm.save = save;\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.region.id !== null) {\n                Region.update(vm.region, onSaveSuccess, onSaveError);\n            } else {\n                Region.save(vm.region, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('cs499Assignment2App:regionUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('RegionMySuffixDetailController', RegionMySuffixDetailController);\n\n    RegionMySuffixDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Region'];\n\n    function RegionMySuffixDetailController($scope, $rootScope, $stateParams, previousState, entity, Region) {\n        var vm = this;\n\n        vm.region = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('cs499Assignment2App:regionUpdate', function(event, result) {\n            vm.region = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('RegionMySuffixDeleteController',RegionMySuffixDeleteController);\n\n    RegionMySuffixDeleteController.$inject = ['$uibModalInstance', 'entity', 'Region'];\n\n    function RegionMySuffixDeleteController($uibModalInstance, entity, Region) {\n        var vm = this;\n\n        vm.region = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Region.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('regionmySuffix', {\n            parent: 'entity',\n            url: '/regionmySuffix',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Regions'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/region/regionsmySuffix.html',\n                    controller: 'RegionMySuffixController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('regionmySuffix-detail', {\n            parent: 'entity',\n            url: '/regionmySuffix/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Region'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/region/regionmySuffix-detail.html',\n                    controller: 'RegionMySuffixDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Region', function($stateParams, Region) {\n                    return Region.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'regionmySuffix',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('regionmySuffix-detail.edit', {\n            parent: 'regionmySuffix-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/region/regionmySuffix-dialog.html',\n                    controller: 'RegionMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Region', function(Region) {\n                            return Region.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('regionmySuffix.new', {\n            parent: 'regionmySuffix',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/region/regionmySuffix-dialog.html',\n                    controller: 'RegionMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                regionName: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('regionmySuffix', null, { reload: 'regionmySuffix' });\n                }, function() {\n                    $state.go('regionmySuffix');\n                });\n            }]\n        })\n        .state('regionmySuffix.edit', {\n            parent: 'regionmySuffix',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/region/regionmySuffix-dialog.html',\n                    controller: 'RegionMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Region', function(Region) {\n                            return Region.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('regionmySuffix', null, { reload: 'regionmySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('regionmySuffix.delete', {\n            parent: 'regionmySuffix',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/region/regionmySuffix-delete-dialog.html',\n                    controller: 'RegionMySuffixDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Region', function(Region) {\n                            return Region.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('regionmySuffix', null, { reload: 'regionmySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('RegionMySuffixController', RegionMySuffixController);\n\n    RegionMySuffixController.$inject = ['$scope', '$state', 'Region'];\n\n    function RegionMySuffixController ($scope, $state, Region) {\n        var vm = this;\n\n        vm.regions = [];\n\n        loadAll();\n\n        function loadAll() {\n            Region.query(function(result) {\n                vm.regions = result;\n                vm.searchQuery = null;\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('cs499Assignment2App')\n        .factory('Region', Region);\n\n    Region.$inject = ['$resource'];\n\n    function Region ($resource) {\n        var resourceUrl =  'api/regions/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('LocationMySuffixDialogController', LocationMySuffixDialogController);\n\n    LocationMySuffixDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', '$q', 'entity', 'Location', 'Country'];\n\n    function LocationMySuffixDialogController ($timeout, $scope, $stateParams, $uibModalInstance, $q, entity, Location, Country) {\n        var vm = this;\n\n        vm.location = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.countries = Country.query({filter: 'location-is-null'});\n        $q.all([vm.location.$promise, vm.countries.$promise]).then(function() {\n            if (!vm.location.countryId) {\n                return $q.reject();\n            }\n            return Country.get({id : vm.location.countryId}).$promise;\n        }).then(function(country) {\n            vm.countries.push(country);\n        });\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.location.id !== null) {\n                Location.update(vm.location, onSaveSuccess, onSaveError);\n            } else {\n                Location.save(vm.location, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('cs499Assignment2App:locationUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('LocationMySuffixDetailController', LocationMySuffixDetailController);\n\n    LocationMySuffixDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Location', 'Country'];\n\n    function LocationMySuffixDetailController($scope, $rootScope, $stateParams, previousState, entity, Location, Country) {\n        var vm = this;\n\n        vm.location = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('cs499Assignment2App:locationUpdate', function(event, result) {\n            vm.location = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('LocationMySuffixDeleteController',LocationMySuffixDeleteController);\n\n    LocationMySuffixDeleteController.$inject = ['$uibModalInstance', 'entity', 'Location'];\n\n    function LocationMySuffixDeleteController($uibModalInstance, entity, Location) {\n        var vm = this;\n\n        vm.location = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Location.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('locationmySuffix', {\n            parent: 'entity',\n            url: '/locationmySuffix',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Locations'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/location/locationsmySuffix.html',\n                    controller: 'LocationMySuffixController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('locationmySuffix-detail', {\n            parent: 'entity',\n            url: '/locationmySuffix/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Location'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/location/locationmySuffix-detail.html',\n                    controller: 'LocationMySuffixDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Location', function($stateParams, Location) {\n                    return Location.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'locationmySuffix',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('locationmySuffix-detail.edit', {\n            parent: 'locationmySuffix-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/location/locationmySuffix-dialog.html',\n                    controller: 'LocationMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Location', function(Location) {\n                            return Location.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('locationmySuffix.new', {\n            parent: 'locationmySuffix',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/location/locationmySuffix-dialog.html',\n                    controller: 'LocationMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                streetAddress: null,\n                                postalCode: null,\n                                city: null,\n                                stateProvince: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('locationmySuffix', null, { reload: 'locationmySuffix' });\n                }, function() {\n                    $state.go('locationmySuffix');\n                });\n            }]\n        })\n        .state('locationmySuffix.edit', {\n            parent: 'locationmySuffix',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/location/locationmySuffix-dialog.html',\n                    controller: 'LocationMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Location', function(Location) {\n                            return Location.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('locationmySuffix', null, { reload: 'locationmySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('locationmySuffix.delete', {\n            parent: 'locationmySuffix',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/location/locationmySuffix-delete-dialog.html',\n                    controller: 'LocationMySuffixDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Location', function(Location) {\n                            return Location.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('locationmySuffix', null, { reload: 'locationmySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('LocationMySuffixController', LocationMySuffixController);\n\n    LocationMySuffixController.$inject = ['$scope', '$state', 'Location'];\n\n    function LocationMySuffixController ($scope, $state, Location) {\n        var vm = this;\n\n        vm.locations = [];\n\n        loadAll();\n\n        function loadAll() {\n            Location.query(function(result) {\n                vm.locations = result;\n                vm.searchQuery = null;\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('cs499Assignment2App')\n        .factory('Location', Location);\n\n    Location.$inject = ['$resource'];\n\n    function Location ($resource) {\n        var resourceUrl =  'api/locations/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('JobHistoryMySuffixDialogController', JobHistoryMySuffixDialogController);\n\n    JobHistoryMySuffixDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', '$q', 'entity', 'JobHistory', 'Job', 'Department', 'Employee'];\n\n    function JobHistoryMySuffixDialogController ($timeout, $scope, $stateParams, $uibModalInstance, $q, entity, JobHistory, Job, Department, Employee) {\n        var vm = this;\n\n        vm.jobHistory = entity;\n        vm.clear = clear;\n        vm.datePickerOpenStatus = {};\n        vm.openCalendar = openCalendar;\n        vm.save = save;\n        vm.jobs = Job.query({filter: 'jobhistory-is-null'});\n        $q.all([vm.jobHistory.$promise, vm.jobs.$promise]).then(function() {\n            if (!vm.jobHistory.jobId) {\n                return $q.reject();\n            }\n            return Job.get({id : vm.jobHistory.jobId}).$promise;\n        }).then(function(job) {\n            vm.jobs.push(job);\n        });\n        vm.departments = Department.query({filter: 'jobhistory-is-null'});\n        $q.all([vm.jobHistory.$promise, vm.departments.$promise]).then(function() {\n            if (!vm.jobHistory.departmentId) {\n                return $q.reject();\n            }\n            return Department.get({id : vm.jobHistory.departmentId}).$promise;\n        }).then(function(department) {\n            vm.departments.push(department);\n        });\n        vm.employees = Employee.query({filter: 'jobhistory-is-null'});\n        $q.all([vm.jobHistory.$promise, vm.employees.$promise]).then(function() {\n            if (!vm.jobHistory.employeeId) {\n                return $q.reject();\n            }\n            return Employee.get({id : vm.jobHistory.employeeId}).$promise;\n        }).then(function(employee) {\n            vm.employees.push(employee);\n        });\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.jobHistory.id !== null) {\n                JobHistory.update(vm.jobHistory, onSaveSuccess, onSaveError);\n            } else {\n                JobHistory.save(vm.jobHistory, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('cs499Assignment2App:jobHistoryUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        vm.datePickerOpenStatus.startDate = false;\n        vm.datePickerOpenStatus.endDate = false;\n\n        function openCalendar (date) {\n            vm.datePickerOpenStatus[date] = true;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('JobHistoryMySuffixDetailController', JobHistoryMySuffixDetailController);\n\n    JobHistoryMySuffixDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'JobHistory', 'Job', 'Department', 'Employee'];\n\n    function JobHistoryMySuffixDetailController($scope, $rootScope, $stateParams, previousState, entity, JobHistory, Job, Department, Employee) {\n        var vm = this;\n\n        vm.jobHistory = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('cs499Assignment2App:jobHistoryUpdate', function(event, result) {\n            vm.jobHistory = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('JobHistoryMySuffixDeleteController',JobHistoryMySuffixDeleteController);\n\n    JobHistoryMySuffixDeleteController.$inject = ['$uibModalInstance', 'entity', 'JobHistory'];\n\n    function JobHistoryMySuffixDeleteController($uibModalInstance, entity, JobHistory) {\n        var vm = this;\n\n        vm.jobHistory = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            JobHistory.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('job-historymySuffix', {\n            parent: 'entity',\n            url: '/job-historymySuffix',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'JobHistories'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/job-history/job-historiesmySuffix.html',\n                    controller: 'JobHistoryMySuffixController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('job-historymySuffix-detail', {\n            parent: 'entity',\n            url: '/job-historymySuffix/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'JobHistory'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/job-history/job-historymySuffix-detail.html',\n                    controller: 'JobHistoryMySuffixDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'JobHistory', function($stateParams, JobHistory) {\n                    return JobHistory.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'job-historymySuffix',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('job-historymySuffix-detail.edit', {\n            parent: 'job-historymySuffix-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/job-history/job-historymySuffix-dialog.html',\n                    controller: 'JobHistoryMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['JobHistory', function(JobHistory) {\n                            return JobHistory.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('job-historymySuffix.new', {\n            parent: 'job-historymySuffix',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/job-history/job-historymySuffix-dialog.html',\n                    controller: 'JobHistoryMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                startDate: null,\n                                endDate: null,\n                                language: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('job-historymySuffix', null, { reload: 'job-historymySuffix' });\n                }, function() {\n                    $state.go('job-historymySuffix');\n                });\n            }]\n        })\n        .state('job-historymySuffix.edit', {\n            parent: 'job-historymySuffix',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/job-history/job-historymySuffix-dialog.html',\n                    controller: 'JobHistoryMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['JobHistory', function(JobHistory) {\n                            return JobHistory.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('job-historymySuffix', null, { reload: 'job-historymySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('job-historymySuffix.delete', {\n            parent: 'job-historymySuffix',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/job-history/job-historymySuffix-delete-dialog.html',\n                    controller: 'JobHistoryMySuffixDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['JobHistory', function(JobHistory) {\n                            return JobHistory.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('job-historymySuffix', null, { reload: 'job-historymySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('JobHistoryMySuffixController', JobHistoryMySuffixController);\n\n    JobHistoryMySuffixController.$inject = ['$scope', '$state', 'JobHistory', 'ParseLinks', 'AlertService', 'paginationConstants'];\n\n    function JobHistoryMySuffixController ($scope, $state, JobHistory, ParseLinks, AlertService, paginationConstants) {\n        var vm = this;\n\n        vm.jobHistories = [];\n        vm.loadPage = loadPage;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n        vm.page = 0;\n        vm.links = {\n            last: 0\n        };\n        vm.predicate = 'id';\n        vm.reset = reset;\n        vm.reverse = true;\n\n        loadAll();\n\n        function loadAll () {\n            JobHistory.query({\n                page: vm.page,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                for (var i = 0; i < data.length; i++) {\n                    vm.jobHistories.push(data[i]);\n                }\n            }\n\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function reset () {\n            vm.page = 0;\n            vm.jobHistories = [];\n            loadAll();\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            loadAll();\n        }\n    }\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('cs499Assignment2App')\n        .factory('JobHistory', JobHistory);\n\n    JobHistory.$inject = ['$resource', 'DateUtils'];\n\n    function JobHistory ($resource, DateUtils) {\n        var resourceUrl =  'api/job-histories/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                        data.startDate = DateUtils.convertDateTimeFromServer(data.startDate);\n                        data.endDate = DateUtils.convertDateTimeFromServer(data.endDate);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('JobMySuffixDialogController', JobMySuffixDialogController);\n\n    JobMySuffixDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Job', 'Employee', 'Task'];\n\n    function JobMySuffixDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Job, Employee, Task) {\n        var vm = this;\n\n        vm.job = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.employees = Employee.query();\n        vm.tasks = Task.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.job.id !== null) {\n                Job.update(vm.job, onSaveSuccess, onSaveError);\n            } else {\n                Job.save(vm.job, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('cs499Assignment2App:jobUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('JobMySuffixDetailController', JobMySuffixDetailController);\n\n    JobMySuffixDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Job', 'Employee', 'Task'];\n\n    function JobMySuffixDetailController($scope, $rootScope, $stateParams, previousState, entity, Job, Employee, Task) {\n        var vm = this;\n\n        vm.job = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('cs499Assignment2App:jobUpdate', function(event, result) {\n            vm.job = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('JobMySuffixDeleteController',JobMySuffixDeleteController);\n\n    JobMySuffixDeleteController.$inject = ['$uibModalInstance', 'entity', 'Job'];\n\n    function JobMySuffixDeleteController($uibModalInstance, entity, Job) {\n        var vm = this;\n\n        vm.job = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Job.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('jobmySuffix', {\n            parent: 'entity',\n            url: '/jobmySuffix?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Jobs'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/job/jobsmySuffix.html',\n                    controller: 'JobMySuffixController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n            }\n        })\n        .state('jobmySuffix-detail', {\n            parent: 'entity',\n            url: '/jobmySuffix/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Job'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/job/jobmySuffix-detail.html',\n                    controller: 'JobMySuffixDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Job', function($stateParams, Job) {\n                    return Job.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'jobmySuffix',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('jobmySuffix-detail.edit', {\n            parent: 'jobmySuffix-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/job/jobmySuffix-dialog.html',\n                    controller: 'JobMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Job', function(Job) {\n                            return Job.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('jobmySuffix.new', {\n            parent: 'jobmySuffix',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/job/jobmySuffix-dialog.html',\n                    controller: 'JobMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                jobTitle: null,\n                                minSalary: null,\n                                maxSalary: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('jobmySuffix', null, { reload: 'jobmySuffix' });\n                }, function() {\n                    $state.go('jobmySuffix');\n                });\n            }]\n        })\n        .state('jobmySuffix.edit', {\n            parent: 'jobmySuffix',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/job/jobmySuffix-dialog.html',\n                    controller: 'JobMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Job', function(Job) {\n                            return Job.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('jobmySuffix', null, { reload: 'jobmySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('jobmySuffix.delete', {\n            parent: 'jobmySuffix',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/job/jobmySuffix-delete-dialog.html',\n                    controller: 'JobMySuffixDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Job', function(Job) {\n                            return Job.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('jobmySuffix', null, { reload: 'jobmySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('JobMySuffixController', JobMySuffixController);\n\n    JobMySuffixController.$inject = ['$scope', '$state', 'Job', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function JobMySuffixController ($scope, $state, Job, ParseLinks, AlertService, paginationConstants, pagingParams) {\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n\n        loadAll();\n\n        function loadAll () {\n            Job.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.jobs = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('cs499Assignment2App')\n        .factory('Job', Job);\n\n    Job.$inject = ['$resource'];\n\n    function Job ($resource) {\n        var resourceUrl =  'api/jobs/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('entity', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('EmployeeMySuffixDialogController', EmployeeMySuffixDialogController);\n\n    EmployeeMySuffixDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Employee', 'Department', 'Job'];\n\n    function EmployeeMySuffixDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Employee, Department, Job) {\n        var vm = this;\n\n        vm.employee = entity;\n        vm.clear = clear;\n        vm.datePickerOpenStatus = {};\n        vm.openCalendar = openCalendar;\n        vm.save = save;\n        vm.departments = Department.query();\n        vm.jobs = Job.query();\n        vm.employees = Employee.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.employee.id !== null) {\n                Employee.update(vm.employee, onSaveSuccess, onSaveError);\n            } else {\n                Employee.save(vm.employee, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('cs499Assignment2App:employeeUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        vm.datePickerOpenStatus.hireDate = false;\n\n        function openCalendar (date) {\n            vm.datePickerOpenStatus[date] = true;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('EmployeeMySuffixDetailController', EmployeeMySuffixDetailController);\n\n    EmployeeMySuffixDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Employee', 'Department', 'Job'];\n\n    function EmployeeMySuffixDetailController($scope, $rootScope, $stateParams, previousState, entity, Employee, Department, Job) {\n        var vm = this;\n\n        vm.employee = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('cs499Assignment2App:employeeUpdate', function(event, result) {\n            vm.employee = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('EmployeeMySuffixDeleteController',EmployeeMySuffixDeleteController);\n\n    EmployeeMySuffixDeleteController.$inject = ['$uibModalInstance', 'entity', 'Employee'];\n\n    function EmployeeMySuffixDeleteController($uibModalInstance, entity, Employee) {\n        var vm = this;\n\n        vm.employee = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Employee.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('employeemySuffix', {\n            parent: 'entity',\n            url: '/employeemySuffix',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Employees'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/employee/employeesmySuffix.html',\n                    controller: 'EmployeeMySuffixController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('employeemySuffix-detail', {\n            parent: 'entity',\n            url: '/employeemySuffix/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Employee'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/employee/employeemySuffix-detail.html',\n                    controller: 'EmployeeMySuffixDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Employee', function($stateParams, Employee) {\n                    return Employee.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'employeemySuffix',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('employeemySuffix-detail.edit', {\n            parent: 'employeemySuffix-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/employee/employeemySuffix-dialog.html',\n                    controller: 'EmployeeMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Employee', function(Employee) {\n                            return Employee.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('employeemySuffix.new', {\n            parent: 'employeemySuffix',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/employee/employeemySuffix-dialog.html',\n                    controller: 'EmployeeMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                firstName: null,\n                                lastName: null,\n                                email: null,\n                                phoneNumber: null,\n                                hireDate: null,\n                                salary: null,\n                                commissionPct: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('employeemySuffix', null, { reload: 'employeemySuffix' });\n                }, function() {\n                    $state.go('employeemySuffix');\n                });\n            }]\n        })\n        .state('employeemySuffix.edit', {\n            parent: 'employeemySuffix',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/employee/employeemySuffix-dialog.html',\n                    controller: 'EmployeeMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Employee', function(Employee) {\n                            return Employee.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('employeemySuffix', null, { reload: 'employeemySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('employeemySuffix.delete', {\n            parent: 'employeemySuffix',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/employee/employeemySuffix-delete-dialog.html',\n                    controller: 'EmployeeMySuffixDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Employee', function(Employee) {\n                            return Employee.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('employeemySuffix', null, { reload: 'employeemySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('EmployeeMySuffixController', EmployeeMySuffixController);\n\n    EmployeeMySuffixController.$inject = ['$scope', '$state', 'Employee', 'ParseLinks', 'AlertService', 'paginationConstants'];\n\n    function EmployeeMySuffixController ($scope, $state, Employee, ParseLinks, AlertService, paginationConstants) {\n        var vm = this;\n\n        vm.employees = [];\n        vm.loadPage = loadPage;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n        vm.page = 0;\n        vm.links = {\n            last: 0\n        };\n        vm.predicate = 'id';\n        vm.reset = reset;\n        vm.reverse = true;\n\n        loadAll();\n\n        function loadAll () {\n            Employee.query({\n                page: vm.page,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                for (var i = 0; i < data.length; i++) {\n                    vm.employees.push(data[i]);\n                }\n            }\n\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function reset () {\n            vm.page = 0;\n            vm.employees = [];\n            loadAll();\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            loadAll();\n        }\n    }\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('cs499Assignment2App')\n        .factory('Employee', Employee);\n\n    Employee.$inject = ['$resource', 'DateUtils'];\n\n    function Employee ($resource, DateUtils) {\n        var resourceUrl =  'api/employees/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                        data.hireDate = DateUtils.convertDateTimeFromServer(data.hireDate);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('DepartmentMySuffixDialogController', DepartmentMySuffixDialogController);\n\n    DepartmentMySuffixDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', '$q', 'entity', 'Department', 'Location', 'Employee'];\n\n    function DepartmentMySuffixDialogController ($timeout, $scope, $stateParams, $uibModalInstance, $q, entity, Department, Location, Employee) {\n        var vm = this;\n\n        vm.department = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.locations = Location.query({filter: 'department-is-null'});\n        $q.all([vm.department.$promise, vm.locations.$promise]).then(function() {\n            if (!vm.department.locationId) {\n                return $q.reject();\n            }\n            return Location.get({id : vm.department.locationId}).$promise;\n        }).then(function(location) {\n            vm.locations.push(location);\n        });\n        vm.employees = Employee.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.department.id !== null) {\n                Department.update(vm.department, onSaveSuccess, onSaveError);\n            } else {\n                Department.save(vm.department, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('cs499Assignment2App:departmentUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('DepartmentMySuffixDetailController', DepartmentMySuffixDetailController);\n\n    DepartmentMySuffixDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Department', 'Location', 'Employee'];\n\n    function DepartmentMySuffixDetailController($scope, $rootScope, $stateParams, previousState, entity, Department, Location, Employee) {\n        var vm = this;\n\n        vm.department = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('cs499Assignment2App:departmentUpdate', function(event, result) {\n            vm.department = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('DepartmentMySuffixDeleteController',DepartmentMySuffixDeleteController);\n\n    DepartmentMySuffixDeleteController.$inject = ['$uibModalInstance', 'entity', 'Department'];\n\n    function DepartmentMySuffixDeleteController($uibModalInstance, entity, Department) {\n        var vm = this;\n\n        vm.department = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Department.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('departmentmySuffix', {\n            parent: 'entity',\n            url: '/departmentmySuffix',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Departments'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/department/departmentsmySuffix.html',\n                    controller: 'DepartmentMySuffixController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('departmentmySuffix-detail', {\n            parent: 'entity',\n            url: '/departmentmySuffix/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Department'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/department/departmentmySuffix-detail.html',\n                    controller: 'DepartmentMySuffixDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Department', function($stateParams, Department) {\n                    return Department.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'departmentmySuffix',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('departmentmySuffix-detail.edit', {\n            parent: 'departmentmySuffix-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/department/departmentmySuffix-dialog.html',\n                    controller: 'DepartmentMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Department', function(Department) {\n                            return Department.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('departmentmySuffix.new', {\n            parent: 'departmentmySuffix',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/department/departmentmySuffix-dialog.html',\n                    controller: 'DepartmentMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                departmentName: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('departmentmySuffix', null, { reload: 'departmentmySuffix' });\n                }, function() {\n                    $state.go('departmentmySuffix');\n                });\n            }]\n        })\n        .state('departmentmySuffix.edit', {\n            parent: 'departmentmySuffix',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/department/departmentmySuffix-dialog.html',\n                    controller: 'DepartmentMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Department', function(Department) {\n                            return Department.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('departmentmySuffix', null, { reload: 'departmentmySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('departmentmySuffix.delete', {\n            parent: 'departmentmySuffix',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/department/departmentmySuffix-delete-dialog.html',\n                    controller: 'DepartmentMySuffixDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Department', function(Department) {\n                            return Department.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('departmentmySuffix', null, { reload: 'departmentmySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('DepartmentMySuffixController', DepartmentMySuffixController);\n\n    DepartmentMySuffixController.$inject = ['$scope', '$state', 'Department'];\n\n    function DepartmentMySuffixController ($scope, $state, Department) {\n        var vm = this;\n\n        vm.departments = [];\n\n        loadAll();\n\n        function loadAll() {\n            Department.query(function(result) {\n                vm.departments = result;\n                vm.searchQuery = null;\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('cs499Assignment2App')\n        .factory('Department', Department);\n\n    Department.$inject = ['$resource'];\n\n    function Department ($resource) {\n        var resourceUrl =  'api/departments/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('CountryMySuffixDialogController', CountryMySuffixDialogController);\n\n    CountryMySuffixDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', '$q', 'entity', 'Country', 'Region'];\n\n    function CountryMySuffixDialogController ($timeout, $scope, $stateParams, $uibModalInstance, $q, entity, Country, Region) {\n        var vm = this;\n\n        vm.country = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.regions = Region.query({filter: 'country-is-null'});\n        $q.all([vm.country.$promise, vm.regions.$promise]).then(function() {\n            if (!vm.country.regionId) {\n                return $q.reject();\n            }\n            return Region.get({id : vm.country.regionId}).$promise;\n        }).then(function(region) {\n            vm.regions.push(region);\n        });\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.country.id !== null) {\n                Country.update(vm.country, onSaveSuccess, onSaveError);\n            } else {\n                Country.save(vm.country, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('cs499Assignment2App:countryUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('CountryMySuffixDetailController', CountryMySuffixDetailController);\n\n    CountryMySuffixDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Country', 'Region'];\n\n    function CountryMySuffixDetailController($scope, $rootScope, $stateParams, previousState, entity, Country, Region) {\n        var vm = this;\n\n        vm.country = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('cs499Assignment2App:countryUpdate', function(event, result) {\n            vm.country = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('CountryMySuffixDeleteController',CountryMySuffixDeleteController);\n\n    CountryMySuffixDeleteController.$inject = ['$uibModalInstance', 'entity', 'Country'];\n\n    function CountryMySuffixDeleteController($uibModalInstance, entity, Country) {\n        var vm = this;\n\n        vm.country = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Country.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('countrymySuffix', {\n            parent: 'entity',\n            url: '/countrymySuffix',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Countries'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/country/countriesmySuffix.html',\n                    controller: 'CountryMySuffixController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('countrymySuffix-detail', {\n            parent: 'entity',\n            url: '/countrymySuffix/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Country'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/country/countrymySuffix-detail.html',\n                    controller: 'CountryMySuffixDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Country', function($stateParams, Country) {\n                    return Country.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'countrymySuffix',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('countrymySuffix-detail.edit', {\n            parent: 'countrymySuffix-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/country/countrymySuffix-dialog.html',\n                    controller: 'CountryMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Country', function(Country) {\n                            return Country.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('countrymySuffix.new', {\n            parent: 'countrymySuffix',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/country/countrymySuffix-dialog.html',\n                    controller: 'CountryMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                countryName: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('countrymySuffix', null, { reload: 'countrymySuffix' });\n                }, function() {\n                    $state.go('countrymySuffix');\n                });\n            }]\n        })\n        .state('countrymySuffix.edit', {\n            parent: 'countrymySuffix',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/country/countrymySuffix-dialog.html',\n                    controller: 'CountryMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Country', function(Country) {\n                            return Country.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('countrymySuffix', null, { reload: 'countrymySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('countrymySuffix.delete', {\n            parent: 'countrymySuffix',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/country/countrymySuffix-delete-dialog.html',\n                    controller: 'CountryMySuffixDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Country', function(Country) {\n                            return Country.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('countrymySuffix', null, { reload: 'countrymySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('CountryMySuffixController', CountryMySuffixController);\n\n    CountryMySuffixController.$inject = ['$scope', '$state', 'Country'];\n\n    function CountryMySuffixController ($scope, $state, Country) {\n        var vm = this;\n\n        vm.countries = [];\n\n        loadAll();\n\n        function loadAll() {\n            Country.query(function(result) {\n                vm.countries = result;\n                vm.searchQuery = null;\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('cs499Assignment2App')\n        .factory('Country', Country);\n\n    Country.$inject = ['$resource'];\n\n    function Country ($resource) {\n        var resourceUrl =  'api/countries/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .filter('words', words);\n\n    function words() {\n        return wordsFilter;\n\n        function wordsFilter(input, words) {\n            if (isNaN(words)) {\n                return input;\n            }\n            if (words <= 0) {\n                return '';\n            }\n            if (input) {\n                var inputWords = input.split(/\\s+/);\n                if (inputWords.length > words) {\n                    input = inputWords.slice(0, words).join(' ') + '...';\n                }\n            }\n            return input;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .filter('characters', characters);\n\n    function characters () {\n        return charactersFilter;\n\n        function charactersFilter(input, chars, breakOnWord) {\n            if (isNaN(chars)) {\n                return input;\n            }\n            if (chars <= 0) {\n                return '';\n            }\n            if (input && input.length > chars) {\n                input = input.substring(0, chars);\n\n                if (!breakOnWord) {\n                    var lastspace = input.lastIndexOf(' ');\n                    // Get last space\n                    if (lastspace !== -1) {\n                        input = input.substr(0, lastspace);\n                    }\n                } else {\n                    while (input.charAt(input.length-1) === ' ') {\n                        input = input.substr(0, input.length - 1);\n                    }\n                }\n                return input + '...';\n            }\n            return input;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .directive('jhSortBy', jhSortBy);\n\n    function jhSortBy() {\n        var directive = {\n            restrict: 'A',\n            scope: false,\n            require: '^jhSort',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs, parentCtrl) {\n            element.bind('click', function () {\n                parentCtrl.sort(attrs.jhSortBy);\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .directive('jhSort', jhSort);\n\n    function jhSort () {\n        var directive = {\n            restrict: 'A',\n            scope: {\n                predicate: '=jhSort',\n                ascending: '=',\n                callback: '&'\n            },\n            controller: SortController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n    }\n\n    SortController.$inject = ['$scope', '$element'];\n\n    function SortController ($scope, $element) {\n        var vm = this;\n\n        vm.applyClass = applyClass;\n        vm.resetClasses = resetClasses;\n        vm.sort = sort;\n        vm.triggerApply = triggerApply;\n\n        $scope.$watchGroup(['vm.predicate', 'vm.ascending'], vm.triggerApply);\n        vm.triggerApply();\n\n        function applyClass (element) {\n            var thisIcon = element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt',\n                remove = sortIcon + ' ' + sortDesc,\n                add = sortAsc;\n            if (!vm.ascending) {\n                remove = sortIcon + ' ' + sortAsc;\n                add = sortDesc;\n            }\n            vm.resetClasses();\n            thisIcon.removeClass(remove);\n            thisIcon.addClass(add);\n        }\n\n        function resetClasses () {\n            var allThIcons = $element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt';\n            allThIcons.removeClass(sortAsc + ' ' + sortDesc);\n            allThIcons.addClass(sortIcon);\n        }\n\n        function sort (field) {\n            if (field !== vm.predicate) {\n                vm.ascending = true;\n            } else {\n                vm.ascending = !vm.ascending;\n            }\n            vm.predicate = field;\n            $scope.$apply();\n            vm.callback();\n        }\n\n        function triggerApply (values)  {\n            vm.resetClasses();\n            if (values && values[0] !== '_score') {\n                vm.applyClass($element.find('th[jh-sort-by=\\'' + values[0] + '\\']'));\n            }\n        }\n    }\n})();\n","(function(){\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('ParseLinks', ParseLinks);\n\n    function ParseLinks () {\n\n        var service = {\n            parse : parse\n        };\n\n        return service;\n\n        function parse(header) {\n            if (header.length === 0) {\n                throw new Error('input must not be of zero length');\n            }\n\n            // Split parts by comma\n            var parts = header.split(',');\n            var links = {};\n            // Parse each part into a named link\n            angular.forEach(parts, function(p) {\n                var section = p.split('>;');\n                if (section.length !== 2) {\n                    throw new Error('section could not be split on \">;\"');\n                }\n                var url = section[0].replace(/<(.*)/, '$1').trim();\n                var queryString = {};\n                url.replace(\n                    new RegExp('([^?=&]+)(=([^&]*))?', 'g'),\n                    function($0, $1, $2, $3) { queryString[$1] = $3; }\n                );\n                var page = queryString.page;\n                if (angular.isString(page)) {\n                    page = parseInt(page);\n                }\n                var name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n                links[name] = page;\n            });\n            return links;\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('PaginationUtil', PaginationUtil);\n\n    function PaginationUtil () {\n\n        var service = {\n            parseAscending : parseAscending,\n            parsePage : parsePage,\n            parsePredicate : parsePredicate\n        };\n\n        return service;\n\n        function parseAscending (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                return sort.split(',').slice(-1)[0] === 'asc';\n            } else {\n                // default to true if no sort defined\n                return true;\n            }\n        }\n\n        // query params are strings, and need to be parsed\n        function parsePage (page) {\n            return parseInt(page);\n        }\n\n        // sort can be in the format `id,asc` or `id`\n        function parsePredicate (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                sortArray.pop();\n            }\n            return sortArray.join(',');\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    var jhiItemCount = {\n        template: '<div class=\"info\">' +\n                    'Showing {{(($ctrl.page - 1) * $ctrl.itemsPerPage) == 0 ? 1 : (($ctrl.page - 1) * $ctrl.itemsPerPage + 1)}} - ' +\n                    '{{($ctrl.page * $ctrl.itemsPerPage) < $ctrl.queryCount ? ($ctrl.page * $ctrl.itemsPerPage) : $ctrl.queryCount}} ' +\n                    'of {{$ctrl.queryCount}} items.' +\n                '</div>',\n        bindings: {\n            page: '<',\n            queryCount: '<total',\n            itemsPerPage: '<'\n        }\n    };\n\n    angular\n        .module('cs499Assignment2App')\n        .component('jhiItemCount', jhiItemCount);\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('DateUtils', DateUtils);\n\n    DateUtils.$inject = ['$filter'];\n\n    function DateUtils ($filter) {\n\n        var service = {\n            convertDateTimeFromServer : convertDateTimeFromServer,\n            convertLocalDateFromServer : convertLocalDateFromServer,\n            convertLocalDateToServer : convertLocalDateToServer,\n            dateformat : dateformat\n        };\n\n        return service;\n\n        function convertDateTimeFromServer (date) {\n            if (date) {\n                return new Date(date);\n            } else {\n                return null;\n            }\n        }\n\n        function convertLocalDateFromServer (date) {\n            if (date) {\n                var dateString = date.split('-');\n                return new Date(dateString[0], dateString[1] - 1, dateString[2]);\n            }\n            return null;\n        }\n\n        function convertLocalDateToServer (date) {\n            if (date) {\n                return $filter('date')(date, 'yyyy-MM-dd');\n            } else {\n                return null;\n            }\n        }\n\n        function dateformat () {\n            return 'yyyy-MM-dd';\n        }\n    }\n\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('DataUtils', DataUtils);\n\n    DataUtils.$inject = ['$window'];\n\n    function DataUtils ($window) {\n\n        var service = {\n            abbreviate: abbreviate,\n            byteSize: byteSize,\n            openFile: openFile,\n            toBase64: toBase64\n        };\n\n        return service;\n\n        function abbreviate (text) {\n            if (!angular.isString(text)) {\n                return '';\n            }\n            if (text.length < 30) {\n                return text;\n            }\n            return text ? (text.substring(0, 15) + '...' + text.slice(-10)) : '';\n        }\n\n        function byteSize (base64String) {\n            if (!angular.isString(base64String)) {\n                return '';\n            }\n\n            function endsWith(suffix, str) {\n                return str.indexOf(suffix, str.length - suffix.length) !== -1;\n            }\n\n            function paddingSize(base64String) {\n                if (endsWith('==', base64String)) {\n                    return 2;\n                }\n                if (endsWith('=', base64String)) {\n                    return 1;\n                }\n                return 0;\n            }\n\n            function size(base64String) {\n                return base64String.length / 4 * 3 - paddingSize(base64String);\n            }\n\n            function formatAsBytes(size) {\n                return size.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ') + ' bytes';\n            }\n\n            return formatAsBytes(size(base64String));\n        }\n\n        function openFile (type, data) {\n            $window.open('data:' + type + ';base64,' + data, '_blank', 'height=300,width=400');\n        }\n\n        function toBase64 (file, cb) {\n            var fileReader = new FileReader();\n            fileReader.readAsDataURL(file);\n            fileReader.onload = function (e) {\n                var base64Data = e.target.result.substr(e.target.result.indexOf('base64,') + 'base64,'.length);\n                cb(base64Data);\n            };\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .filter('capitalize', capitalize);\n\n    function capitalize() {\n        return capitalizeFilter;\n\n        function capitalizeFilter (input) {\n            if (input !== null) {\n                input = input.toLowerCase();\n                input = input.substring(0, 1).toUpperCase() + input.substring(1);\n            }\n            return input;\n        }\n    }\n})();\n","(function() {\n    /*jshint bitwise: false*/\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('Base64', Base64);\n\n    function Base64 () {\n        var keyStr = 'ABCDEFGHIJKLMNOP' +\n            'QRSTUVWXYZabcdef' +\n            'ghijklmnopqrstuv' +\n            'wxyz0123456789+/' +\n            '=';\n\n        var service = {\n            decode : decode,\n            encode : encode\n        };\n\n        return service;\n\n        function encode (input) {\n            var output = '',\n                chr1, chr2, chr3,\n                enc1, enc2, enc3, enc4,\n                i = 0;\n\n            while (i < input.length) {\n                chr1 = input.charCodeAt(i++);\n                chr2 = input.charCodeAt(i++);\n                chr3 = input.charCodeAt(i++);\n\n                enc1 = chr1 >> 2;\n                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n                enc4 = chr3 & 63;\n\n                if (isNaN(chr2)) {\n                    enc3 = enc4 = 64;\n                } else if (isNaN(chr3)) {\n                    enc4 = 64;\n                }\n\n                output = output +\n                    keyStr.charAt(enc1) +\n                    keyStr.charAt(enc2) +\n                    keyStr.charAt(enc3) +\n                    keyStr.charAt(enc4);\n            }\n\n            return output;\n        }\n\n        function decode (input) {\n            var output = '',\n                chr1, chr2, chr3,\n                enc1, enc2, enc3, enc4,\n                i = 0;\n\n            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n            input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n            while (i < input.length) {\n                enc1 = keyStr.indexOf(input.charAt(i++));\n                enc2 = keyStr.indexOf(input.charAt(i++));\n                enc3 = keyStr.indexOf(input.charAt(i++));\n                enc4 = keyStr.indexOf(input.charAt(i++));\n\n                chr1 = (enc1 << 2) | (enc2 >> 4);\n                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n                chr3 = ((enc3 & 3) << 6) | enc4;\n\n                output = output + String.fromCharCode(chr1);\n\n                if (enc3 !== 64) {\n                    output = output + String.fromCharCode(chr2);\n                }\n                if (enc4 !== 64) {\n                    output = output + String.fromCharCode(chr3);\n                }\n            }\n\n            return output;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('LoginService', LoginService);\n\n    LoginService.$inject = ['$uibModal'];\n\n    function LoginService ($uibModal) {\n        var service = {\n            open: open\n        };\n\n        var modalInstance = null;\n        var resetModal = function () {\n            modalInstance = null;\n        };\n\n        return service;\n\n        function open () {\n            if (modalInstance !== null) return;\n            modalInstance = $uibModal.open({\n                animation: true,\n                templateUrl: 'app/components/login/login.html',\n                controller: 'LoginController',\n                controllerAs: 'vm'\n            });\n            modalInstance.result.then(\n                resetModal,\n                resetModal\n            );\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('LoginController', LoginController);\n\n    LoginController.$inject = ['$rootScope', '$state', '$timeout', 'Auth', '$uibModalInstance'];\n\n    function LoginController ($rootScope, $state, $timeout, Auth, $uibModalInstance) {\n        var vm = this;\n\n        vm.authenticationError = false;\n        vm.cancel = cancel;\n        vm.credentials = {};\n        vm.login = login;\n        vm.password = null;\n        vm.register = register;\n        vm.rememberMe = true;\n        vm.requestResetPassword = requestResetPassword;\n        vm.username = null;\n\n        $timeout(function (){angular.element('#username').focus();});\n\n        function cancel () {\n            vm.credentials = {\n                username: null,\n                password: null,\n                rememberMe: true\n            };\n            vm.authenticationError = false;\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function login (event) {\n            event.preventDefault();\n            Auth.login({\n                username: vm.username,\n                password: vm.password,\n                rememberMe: vm.rememberMe\n            }).then(function () {\n                vm.authenticationError = false;\n                $uibModalInstance.close();\n                if ($state.current.name === 'register' || $state.current.name === 'activate' ||\n                    $state.current.name === 'finishReset' || $state.current.name === 'requestReset') {\n                    $state.go('home');\n                }\n\n                $rootScope.$broadcast('authenticationSuccess');\n\n                // previousState was set in the authExpiredInterceptor before being redirected to login modal.\n                // since login is successful, go to stored previousState and clear previousState\n                if (Auth.getPreviousState()) {\n                    var previousState = Auth.getPreviousState();\n                    Auth.resetPreviousState();\n                    $state.go(previousState.name, previousState.params);\n                }\n            }).catch(function () {\n                vm.authenticationError = true;\n            });\n        }\n\n        function register () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('register');\n        }\n\n        function requestResetPassword () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('requestReset');\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .directive('showValidation', showValidation);\n\n    function showValidation () {\n        var directive = {\n            restrict: 'A',\n            require: 'form',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, formCtrl) {\n            element.find('.form-group').each(function() {\n                var $formGroup = angular.element(this);\n                var $inputs = $formGroup.find('input[ng-model],textarea[ng-model],select[ng-model]');\n\n                if ($inputs.length > 0) {\n                    $inputs.each(function() {\n                        var $input = angular.element(this);\n                        var inputName = $input.attr('name');\n                        scope.$watch(function() {\n                            return formCtrl[inputName].$invalid && formCtrl[inputName].$dirty;\n                        }, function(isInvalid) {\n                            $formGroup.toggleClass('has-error', isInvalid);\n                        });\n                    });\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .constant('paginationConstants', {\n            'itemsPerPage': 20\n        });\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .directive('minbytes', minbytes);\n\n    function minbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.minbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) >= attrs.minbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .directive('maxbytes', maxbytes);\n\n    function maxbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.maxbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) <= attrs.maxbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n\n})();\n","(function() {\n    'use strict';\n\n    var jhiAlertError = {\n        template: '<div class=\"alerts\" ng-cloak=\"\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre>{{ alert.msg }}</pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertErrorController\n    };\n\n    angular\n        .module('cs499Assignment2App')\n        .component('jhiAlertError', jhiAlertError);\n\n    jhiAlertErrorController.$inject = ['$scope', 'AlertService', '$rootScope'];\n\n    function jhiAlertErrorController ($scope, AlertService, $rootScope) {\n        var vm = this;\n\n        vm.alerts = [];\n\n        function addErrorAlert (message, key, data) {\n            vm.alerts.push(\n                AlertService.add(\n                    {\n                        type: 'danger',\n                        msg: message,\n                        timeout: 5000,\n                        toast: AlertService.isToast(),\n                        scoped: true\n                    },\n                    vm.alerts\n                )\n            );\n        }\n\n        var cleanHttpErrorListener = $rootScope.$on('cs499Assignment2App.httpError', function (event, httpResponse) {\n            var i;\n            event.stopPropagation();\n            switch (httpResponse.status) {\n            // connection refused, server not reachable\n            case 0:\n                addErrorAlert('Server not reachable','error.server.not.reachable');\n                break;\n\n            case 400:\n                var headers = Object.keys(httpResponse.headers()).filter(function (header) {\n                    return header.indexOf('app-error', header.length - 'app-error'.length) !== -1 || header.indexOf('app-params', header.length - 'app-params'.length) !== -1;\n                }).sort();\n                var errorHeader = httpResponse.headers(headers[0]);\n                var entityKey = httpResponse.headers(headers[1]);\n                if (errorHeader) {\n                    var entityName = entityKey;\n                    addErrorAlert(errorHeader, errorHeader, {entityName: entityName});\n                } else if (httpResponse.data && httpResponse.data.fieldErrors) {\n                    for (i = 0; i < httpResponse.data.fieldErrors.length; i++) {\n                        var fieldError = httpResponse.data.fieldErrors[i];\n                        // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n                        var convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n                        var fieldName = convertedField.charAt(0).toUpperCase() + convertedField.slice(1);\n                        addErrorAlert('Field ' + fieldName + ' cannot be empty', 'error.' + fieldError.message, {fieldName: fieldName});\n                    }\n                } else if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message, httpResponse.data.message, httpResponse.data);\n                } else {\n                    addErrorAlert(httpResponse.data);\n                }\n                break;\n\n            case 404:\n                addErrorAlert('Not found','error.url.not.found');\n                break;\n\n            default:\n                if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message);\n                } else {\n                    addErrorAlert(angular.toJson(httpResponse));\n                }\n            }\n        });\n\n        $scope.$on('$destroy', function () {\n            if(angular.isDefined(cleanHttpErrorListener) && cleanHttpErrorListener !== null){\n                cleanHttpErrorListener();\n                vm.alerts = [];\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .provider('AlertService', AlertService);\n\n    function AlertService () {\n        this.toast = false;\n        /*jshint validthis: true */\n        this.$get = getService;\n\n        this.showAsToast = function(isToast) {\n            this.toast = isToast;\n        };\n\n        getService.$inject = ['$timeout', '$sce'];\n\n        function getService ($timeout, $sce) {\n            var toast = this.toast,\n                alertId = 0, // unique id for each alert. Starts from 0.\n                alerts = [],\n                timeout = 5000; // default timeout\n\n            return {\n                factory: factory,\n                isToast: isToast,\n                add: addAlert,\n                closeAlert: closeAlert,\n                closeAlertByIndex: closeAlertByIndex,\n                clear: clear,\n                get: get,\n                success: success,\n                error: error,\n                info: info,\n                warning : warning\n            };\n\n            function isToast() {\n                return toast;\n            }\n\n            function clear() {\n                alerts = [];\n            }\n\n            function get() {\n                return alerts;\n            }\n\n            function success(msg, params, position) {\n                return this.add({\n                    type: 'success',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function error(msg, params, position) {\n                return this.add({\n                    type: 'danger',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function warning(msg, params, position) {\n                return this.add({\n                    type: 'warning',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function info(msg, params, position) {\n                return this.add({\n                    type: 'info',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function factory(alertOptions) {\n                var alert = {\n                    type: alertOptions.type,\n                    msg: $sce.trustAsHtml(alertOptions.msg),\n                    id: alertOptions.alertId,\n                    timeout: alertOptions.timeout,\n                    toast: alertOptions.toast,\n                    position: alertOptions.position ? alertOptions.position : 'top right',\n                    scoped: alertOptions.scoped,\n                    close: function (alerts) {\n                        return closeAlert(this.id, alerts);\n                    }\n                };\n                if(!alert.scoped) {\n                    alerts.push(alert);\n                }\n                return alert;\n            }\n\n            function addAlert(alertOptions, extAlerts) {\n                alertOptions.alertId = alertId++;\n                var that = this;\n                var alert = this.factory(alertOptions);\n                if (alertOptions.timeout && alertOptions.timeout > 0) {\n                    $timeout(function () {\n                        that.closeAlert(alertOptions.alertId, extAlerts);\n                    }, alertOptions.timeout);\n                }\n                return alert;\n            }\n\n            function closeAlert(id, extAlerts) {\n                var thisAlerts = extAlerts ? extAlerts : alerts;\n                return closeAlertByIndex(thisAlerts.map(function(e) { return e.id; }).indexOf(id), thisAlerts);\n            }\n\n            function closeAlertByIndex(index, thisAlerts) {\n                return thisAlerts.splice(index, 1);\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    var jhiAlert = {\n        template: '<div class=\"alerts\" ng-cloak=\"\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre ng-bind-html=\"alert.msg\"></pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertController\n    };\n\n    angular\n        .module('cs499Assignment2App')\n        .component('jhiAlert', jhiAlert);\n\n    jhiAlertController.$inject = ['$scope', 'AlertService'];\n\n    function jhiAlertController($scope, AlertService) {\n        var vm = this;\n\n        vm.alerts = AlertService.get();\n        $scope.$on('$destroy', function () {\n            vm.alerts = [];\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('notificationInterceptor', notificationInterceptor);\n\n    notificationInterceptor.$inject = ['$q', 'AlertService'];\n\n    function notificationInterceptor ($q, AlertService) {\n        var service = {\n            response: response\n        };\n\n        return service;\n\n        function response (response) {\n            var headers = Object.keys(response.headers()).filter(function (header) {\n                return header.indexOf('app-alert', header.length - 'app-alert'.length) !== -1 || header.indexOf('app-params', header.length - 'app-params'.length) !== -1;\n            }).sort();\n            var alertKey = response.headers(headers[0]);\n            if (angular.isString(alertKey)) {\n                AlertService.success(alertKey, { param : response.headers(headers[1])});\n            }\n            return response;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('errorHandlerInterceptor', errorHandlerInterceptor);\n\n    errorHandlerInterceptor.$inject = ['$q', '$rootScope'];\n\n    function errorHandlerInterceptor ($q, $rootScope) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError (response) {\n            if (!(response.status === 401 && (response.data === '' || (response.data.path && response.data.path.indexOf('/api/account') === 0 )))) {\n                $rootScope.$emit('cs499Assignment2App.httpError', response);\n            }\n            return $q.reject(response);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('authExpiredInterceptor', authExpiredInterceptor);\n\n    authExpiredInterceptor.$inject = ['$rootScope', '$q', '$injector'];\n\n    function authExpiredInterceptor($rootScope, $q, $injector) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError(response) {\n            // If we have an unauthorized request we redirect to the login page\n            // Don't do this check on the account API to avoid infinite loop\n            if (response.status === 401 && angular.isDefined(response.data.path) && response.data.path.indexOf('/api/account') === -1) {\n                var Auth = $injector.get('Auth');\n                var to = $rootScope.toState;\n                var params = $rootScope.toStateParams;\n                Auth.logout();\n                if (to.name !== 'accessdenied') {\n                    Auth.storePreviousState(to.name, params);\n                }\n                var LoginService = $injector.get('LoginService');\n                LoginService.open();\n            }\n            return $q.reject(response);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('stateHandler', stateHandler);\n\n    stateHandler.$inject = ['$rootScope', '$state', '$sessionStorage',  '$window',\n        'Auth', 'Principal', 'VERSION'];\n\n    function stateHandler($rootScope, $state, $sessionStorage,  $window,\n        Auth, Principal, VERSION) {\n        return {\n            initialize: initialize\n        };\n\n        function initialize() {\n            $rootScope.VERSION = VERSION;\n\n            var stateChangeStart = $rootScope.$on('$stateChangeStart', function (event, toState, toStateParams, fromState) {\n                $rootScope.toState = toState;\n                $rootScope.toStateParams = toStateParams;\n                $rootScope.fromState = fromState;\n\n                // Redirect to a state with an external URL (http://stackoverflow.com/a/30221248/1098564)\n                if (toState.external) {\n                    event.preventDefault();\n                    $window.open(toState.url, '_self');\n                }\n\n                if (Principal.isIdentityResolved()) {\n                    Auth.authorize();\n                }\n\n            });\n\n            var stateChangeSuccess = $rootScope.$on('$stateChangeSuccess',  function(event, toState, toParams, fromState, fromParams) {\n                var titleKey = 'cs499assignment2' ;\n\n                // Set the page title key to the one configured in state or use default one\n                if (toState.data.pageTitle) {\n                    titleKey = toState.data.pageTitle;\n                }\n                $window.document.title = titleKey;\n            });\n\n            $rootScope.$on('$destroy', function () {\n                if(angular.isDefined(stateChangeStart) && stateChangeStart !== null){\n                    stateChangeStart();\n                }\n                if(angular.isDefined(stateChangeSuccess) && stateChangeSuccess !== null){\n                    stateChangeSuccess();\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(paginationConfig);\n\n    paginationConfig.$inject = ['uibPaginationConfig', 'paginationConstants'];\n\n    function paginationConfig(uibPaginationConfig, paginationConstants) {\n        uibPaginationConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPaginationConfig.maxSize = 5;\n        uibPaginationConfig.boundaryLinks = true;\n        uibPaginationConfig.firstText = '«';\n        uibPaginationConfig.previousText = '‹';\n        uibPaginationConfig.nextText = '›';\n        uibPaginationConfig.lastText = '»';\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(pagerConfig);\n\n    pagerConfig.$inject = ['uibPagerConfig', 'paginationConstants'];\n\n    function pagerConfig(uibPagerConfig, paginationConstants) {\n        uibPagerConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPagerConfig.previousText = '«';\n        uibPagerConfig.nextText = '»';\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(localStorageConfig);\n\n    localStorageConfig.$inject = ['$localStorageProvider', '$sessionStorageProvider'];\n\n    function localStorageConfig($localStorageProvider, $sessionStorageProvider) {\n        $localStorageProvider.setKeyPrefix('jhi-');\n        $sessionStorageProvider.setKeyPrefix('jhi-');\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(httpConfig);\n\n    httpConfig.$inject = ['$urlRouterProvider', '$httpProvider', 'httpRequestInterceptorCacheBusterProvider', '$urlMatcherFactoryProvider'];\n\n    function httpConfig($urlRouterProvider, $httpProvider, httpRequestInterceptorCacheBusterProvider, $urlMatcherFactoryProvider) {\n        //Cache everything except rest api requests\n        httpRequestInterceptorCacheBusterProvider.setMatchlist([/.*api.*/, /.*protected.*/], true);\n\n        $urlRouterProvider.otherwise('/');\n\n        $httpProvider.interceptors.push('errorHandlerInterceptor');\n        $httpProvider.interceptors.push('authExpiredInterceptor');\n        $httpProvider.interceptors.push('notificationInterceptor');\n        // jhipster-needle-angularjs-add-interceptor JHipster will add new application http interceptor here\n\n        $urlMatcherFactoryProvider.type('boolean', {\n            name : 'boolean',\n            decode: function(val) { return val === true || val === 'true'; },\n            encode: function(val) { return val ? 1 : 0; },\n            equals: function(a, b) { return this.is(a) && a === b; },\n            is: function(val) { return [true,false,0,1].indexOf(val) >= 0; },\n            pattern: /bool|true|0|1/\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(compileServiceConfig);\n\n    compileServiceConfig.$inject = ['$compileProvider','DEBUG_INFO_ENABLED'];\n\n    function compileServiceConfig($compileProvider,DEBUG_INFO_ENABLED) {\n        // disable debug data on prod profile to improve performance\n        $compileProvider.debugInfoEnabled(DEBUG_INFO_ENABLED);\n\n        /*\n        If you wish to debug an application with this information\n        then you should open up a debug console in the browser\n        then call this method directly in this console:\n\n\t\tangular.reloadWithDebugInfo();\n\t\t*/\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(alertServiceConfig);\n\n    alertServiceConfig.$inject = ['AlertServiceProvider'];\n\n    function alertServiceConfig(AlertServiceProvider) {\n        // set below to true to make alerts look like toast\n        AlertServiceProvider.showAsToast(false);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('app', {\n            abstract: true,\n            views: {\n                'navbar@': {\n                    templateUrl: 'app/layouts/navbar/navbar.html',\n                    controller: 'NavbarController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                authorize: ['Auth',\n                    function (Auth) {\n                        return Auth.authorize();\n                    }\n                ]\n            }\n        });\n    }\n})();\n","(function () {\n    'use strict';\n    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n    angular\n        .module('cs499Assignment2App')\n        .constant('VERSION', \"0.0.1-SNAPSHOT\")\n        .constant('DEBUG_INFO_ENABLED', false)\n;\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('UserManagementDialogController',UserManagementDialogController);\n\n    UserManagementDialogController.$inject = ['$stateParams', '$uibModalInstance', 'entity', 'User'];\n\n    function UserManagementDialogController ($stateParams, $uibModalInstance, entity, User) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.clear = clear;\n        vm.languages = null;\n        vm.save = save;\n        vm.user = entity;\n\n\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function onSaveSuccess (result) {\n            vm.isSaving = false;\n            $uibModalInstance.close(result);\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.user.id !== null) {\n                User.update(vm.user, onSaveSuccess, onSaveError);\n            } else {\n                vm.user.langKey = 'en';\n                User.save(vm.user, onSaveSuccess, onSaveError);\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('UserManagementDetailController', UserManagementDetailController);\n\n    UserManagementDetailController.$inject = ['$stateParams', 'User'];\n\n    function UserManagementDetailController ($stateParams, User) {\n        var vm = this;\n\n        vm.load = load;\n        vm.user = {};\n\n        vm.load($stateParams.login);\n\n        function load (login) {\n            User.get({login: login}, function(result) {\n                vm.user = result;\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('UserManagementDeleteController', UserManagementDeleteController);\n\n    UserManagementDeleteController.$inject = ['$uibModalInstance', 'entity', 'User'];\n\n    function UserManagementDeleteController ($uibModalInstance, entity, User) {\n        var vm = this;\n\n        vm.user = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (login) {\n            User.delete({login: login},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('user-management', {\n            parent: 'admin',\n            url: '/user-management?page&sort',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Users'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management.html',\n                    controller: 'UserManagementController',\n                    controllerAs: 'vm'\n                }\n            },            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                }\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort)\n                    };\n                }]\n            }        })\n        .state('user-management-detail', {\n            parent: 'admin',\n            url: '/user/:login',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'cs499assignment2'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management-detail.html',\n                    controller: 'UserManagementDetailController',\n                    controllerAs: 'vm'\n                }\n            }\n        })\n        .state('user-management.new', {\n            parent: 'user-management',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                id: null, login: null, firstName: null, lastName: null, email: null,\n                                activated: true, langKey: null, createdBy: null, createdDate: null,\n                                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                                resetKey: null, authorities: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('user-management');\n                });\n            }]\n        })\n        .state('user-management.edit', {\n            parent: 'user-management',\n            url: '/{login}/edit',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('user-management.delete', {\n            parent: 'user-management',\n            url: '/{login}/delete',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-delete-dialog.html',\n                    controller: 'UserManagementDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('UserManagementController', UserManagementController);\n\n    UserManagementController.$inject = ['Principal', 'User', 'ParseLinks', 'AlertService', '$state', 'pagingParams', 'paginationConstants'];\n\n    function UserManagementController(Principal, User, ParseLinks, AlertService, $state, pagingParams, paginationConstants) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.currentAccount = null;\n        vm.languages = null;\n        vm.loadAll = loadAll;\n        vm.setActive = setActive;\n        vm.users = [];\n        vm.page = 1;\n        vm.totalItems = null;\n        vm.clear = clear;\n        vm.links = null;\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n        vm.transition = transition;\n\n        vm.loadAll();\n        Principal.identity().then(function(account) {\n            vm.currentAccount = account;\n        });\n\n        function setActive (user, isActivated) {\n            user.activated = isActivated;\n            User.update(user, function () {\n                vm.loadAll();\n                vm.clear();\n            });\n        }\n\n        function loadAll () {\n            User.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n        }\n\n        function onSuccess(data, headers) {\n            //hide anonymous user from user management: it's a required user for Spring Security\n            var hiddenUsersSize = 0;\n            for (var i in data) {\n                if (data[i]['login'] === 'anonymoususer') {\n                    data.splice(i, 1);\n                    hiddenUsersSize++;\n                }\n            }\n            vm.links = ParseLinks.parse(headers('link'));\n            vm.totalItems = headers('X-Total-Count') - hiddenUsersSize;\n            vm.queryCount = vm.totalItems;\n            vm.page = pagingParams.page;\n            vm.users = data;\n        }\n\n        function onError(error) {\n            AlertService.error(error.data.message);\n        }\n\n        function clear () {\n            vm.user = {\n                id: null, login: null, firstName: null, lastName: null, email: null,\n                activated: null, langKey: null, createdBy: null, createdDate: null,\n                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                resetKey: null, authorities: null\n            };\n        }\n\n        function sort () {\n            var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n            if (vm.predicate !== 'id') {\n                result.push('id');\n            }\n            return result;\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition () {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-metrics', {\n            parent: 'admin',\n            url: '/metrics',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Application Metrics'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/metrics/metrics.html',\n                    controller: 'JhiMetricsMonitoringController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('JhiMetricsService', JhiMetricsService);\n\n    JhiMetricsService.$inject = ['$rootScope', '$http'];\n\n    function JhiMetricsService ($rootScope, $http) {\n        var service = {\n            getMetrics: getMetrics,\n            threadDump: threadDump\n        };\n\n        return service;\n\n        function getMetrics () {\n            return $http.get('management/metrics').then(function (response) {\n                return response.data;\n            });\n        }\n\n        function threadDump () {\n            return $http.get('management/dump').then(function (response) {\n                return response.data;\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('JhiMetricsMonitoringModalController', JhiMetricsMonitoringModalController);\n\n    JhiMetricsMonitoringModalController.$inject = ['$uibModalInstance', 'threadDump'];\n\n    function JhiMetricsMonitoringModalController ($uibModalInstance, threadDump) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.getLabelClass = getLabelClass;\n        vm.threadDump = threadDump;\n        vm.threadDumpAll = 0;\n        vm.threadDumpBlocked = 0;\n        vm.threadDumpRunnable = 0;\n        vm.threadDumpTimedWaiting = 0;\n        vm.threadDumpWaiting = 0;\n\n        angular.forEach(threadDump, function(value) {\n            if (value.threadState === 'RUNNABLE') {\n                vm.threadDumpRunnable += 1;\n            } else if (value.threadState === 'WAITING') {\n                vm.threadDumpWaiting += 1;\n            } else if (value.threadState === 'TIMED_WAITING') {\n                vm.threadDumpTimedWaiting += 1;\n            } else if (value.threadState === 'BLOCKED') {\n                vm.threadDumpBlocked += 1;\n            }\n        });\n\n        vm.threadDumpAll = vm.threadDumpRunnable + vm.threadDumpWaiting +\n            vm.threadDumpTimedWaiting + vm.threadDumpBlocked;\n\n        function cancel () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function getLabelClass (threadState) {\n            if (threadState === 'RUNNABLE') {\n                return 'label-success';\n            } else if (threadState === 'WAITING') {\n                return 'label-info';\n            } else if (threadState === 'TIMED_WAITING') {\n                return 'label-warning';\n            } else if (threadState === 'BLOCKED') {\n                return 'label-danger';\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('JhiMetricsMonitoringController', JhiMetricsMonitoringController);\n\n    JhiMetricsMonitoringController.$inject = ['$scope','JhiMetricsService', '$uibModal'];\n\n    function JhiMetricsMonitoringController ($scope, JhiMetricsService, $uibModal) {\n        var vm = this;\n\n        vm.metrics = {};\n        vm.refresh = refresh;\n        vm.refreshThreadDumpData = refreshThreadDumpData;\n        vm.servicesStats = {};\n        vm.updatingMetrics = true;\n\n        vm.refresh();\n\n        $scope.$watch('vm.metrics', function (newValue) {\n            vm.servicesStats = {};\n            angular.forEach(newValue.timers, function (value, key) {\n                if (key.indexOf('web.rest') !== -1 || key.indexOf('service') !== -1) {\n                    vm.servicesStats[key] = value;\n                }\n            });\n\n        });\n\n        function refresh () {\n            vm.updatingMetrics = true;\n            JhiMetricsService.getMetrics().then(function (promise) {\n                vm.metrics = promise;\n                vm.updatingMetrics = false;\n            }, function (promise) {\n                vm.metrics = promise.data;\n                vm.updatingMetrics = false;\n            });\n        }\n\n        function refreshThreadDumpData () {\n            JhiMetricsService.threadDump().then(function(data) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/metrics/metrics.modal.html',\n                    controller: 'JhiMetricsMonitoringModalController',\n                    controllerAs: 'vm',\n                    size: 'lg',\n                    resolve: {\n                        threadDump: function() {\n                            return data;\n                        }\n\n                    }\n                });\n            });\n        }\n\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('logs', {\n            parent: 'admin',\n            url: '/logs',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Logs'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/logs/logs.html',\n                    controller: 'LogsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('LogsService', LogsService);\n\n    LogsService.$inject = ['$resource'];\n\n    function LogsService ($resource) {\n        var service = $resource('management/logs', {}, {\n            'findAll': { method: 'GET', isArray: true},\n            'changeLevel': { method: 'PUT'}\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('LogsController', LogsController);\n\n    LogsController.$inject = ['LogsService'];\n\n    function LogsController (LogsService) {\n        var vm = this;\n\n        vm.changeLevel = changeLevel;\n        vm.loggers = LogsService.findAll();\n\n        function changeLevel (name, level) {\n            LogsService.changeLevel({name: name, level: level}, function () {\n                vm.loggers = LogsService.findAll();\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-health', {\n            parent: 'admin',\n            url: '/health',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Health Checks'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/health/health.html',\n                    controller: 'JhiHealthCheckController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('JhiHealthService', JhiHealthService);\n\n    JhiHealthService.$inject = ['$rootScope', '$http'];\n\n    function JhiHealthService ($rootScope, $http) {\n        var separator = '.';\n        var service = {\n            checkHealth: checkHealth,\n            transformHealthData: transformHealthData,\n            getBaseName: getBaseName,\n            getSubSystemName: getSubSystemName\n        };\n\n        return service;\n\n        function checkHealth () {\n            return $http.get('management/health').then(function (response) {\n                return response.data;\n            });\n        }\n\n        function transformHealthData (data) {\n            var response = [];\n            flattenHealthData(response, null, data);\n            return response;\n        }\n\n        function getBaseName (name) {\n            if (name) {\n                var split = name.split('.');\n                return split[0];\n            }\n        }\n\n        function getSubSystemName (name) {\n            if (name) {\n                var split = name.split('.');\n                split.splice(0, 1);\n                var remainder = split.join('.');\n                return remainder ? ' - ' + remainder : '';\n            }\n        }\n\n        /* private methods */\n        function flattenHealthData (result, path, data) {\n            angular.forEach(data, function (value, key) {\n                if (isHealthObject(value)) {\n                    if (hasSubSystem(value)) {\n                        addHealthObject(result, false, value, getModuleName(path, key));\n                        flattenHealthData(result, getModuleName(path, key), value);\n                    } else {\n                        addHealthObject(result, true, value, getModuleName(path, key));\n                    }\n                }\n            });\n            return result;\n        }\n\n        function addHealthObject (result, isLeaf, healthObject, name) {\n\n            var healthData = {\n                'name': name\n            };\n            var details = {};\n            var hasDetails = false;\n\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status' || key === 'error') {\n                    healthData[key] = value;\n                } else {\n                    if (!isHealthObject(value)) {\n                        details[key] = value;\n                        hasDetails = true;\n                    }\n                }\n            });\n\n            // Add the of the details\n            if (hasDetails) {\n                angular.extend(healthData, { 'details': details});\n            }\n\n            // Only add nodes if they provide additional information\n            if (isLeaf || hasDetails || healthData.error) {\n                result.push(healthData);\n            }\n            return healthData;\n        }\n\n        function getModuleName (path, name) {\n            var result;\n            if (path && name) {\n                result = path + separator + name;\n            }  else if (path) {\n                result = path;\n            } else if (name) {\n                result = name;\n            } else {\n                result = '';\n            }\n            return result;\n        }\n\n        function hasSubSystem (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value) {\n                if (value && value.status) {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n        function isHealthObject (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status') {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular.module('cs499Assignment2App')\n        .controller('HealthModalController', HealthModalController);\n\n    HealthModalController.$inject = ['$uibModalInstance', 'currentHealth', 'baseName', 'subSystemName'];\n\n    function HealthModalController ($uibModalInstance, currentHealth, baseName, subSystemName) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.currentHealth = currentHealth;\n        vm.baseName = baseName;\n        vm.subSystemName = subSystemName;\n\n        function cancel() {\n            $uibModalInstance.dismiss('cancel');\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('JhiHealthCheckController', JhiHealthCheckController);\n\n    JhiHealthCheckController.$inject = ['JhiHealthService', '$uibModal'];\n\n    function JhiHealthCheckController (JhiHealthService, $uibModal) {\n        var vm = this;\n\n        vm.updatingHealth = true;\n        vm.getLabelClass = getLabelClass;\n        vm.refresh = refresh;\n        vm.showHealth = showHealth;\n        vm.baseName = JhiHealthService.getBaseName;\n        vm.subSystemName = JhiHealthService.getSubSystemName;\n\n        vm.refresh();\n\n        function getLabelClass (statusState) {\n            if (statusState === 'UP') {\n                return 'label-success';\n            } else {\n                return 'label-danger';\n            }\n        }\n\n        function refresh () {\n            vm.updatingHealth = true;\n            JhiHealthService.checkHealth().then(function (response) {\n                vm.healthData = JhiHealthService.transformHealthData(response);\n                vm.updatingHealth = false;\n            }, function (response) {\n                vm.healthData =  JhiHealthService.transformHealthData(response.data);\n                vm.updatingHealth = false;\n            });\n        }\n\n        function showHealth (health) {\n            $uibModal.open({\n                templateUrl: 'app/admin/health/health.modal.html',\n                controller: 'HealthModalController',\n                controllerAs: 'vm',\n                size: 'lg',\n                resolve: {\n                    currentHealth: function() {\n                        return health;\n                    },\n                    baseName: function() {\n                        return vm.baseName;\n                    },\n                    subSystemName: function() {\n                        return vm.subSystemName;\n                    }\n\n                }\n            });\n        }\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('docs', {\n            parent: 'admin',\n            url: '/docs',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'API'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/docs/docs.html'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-configuration', {\n            parent: 'admin',\n            url: '/configuration',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Configuration'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/configuration/configuration.html',\n                    controller: 'JhiConfigurationController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('JhiConfigurationService', JhiConfigurationService);\n\n    JhiConfigurationService.$inject = ['$filter', '$http'];\n\n    function JhiConfigurationService ($filter, $http) {\n        var service = {\n            get: get,\n            getEnv: getEnv\n        };\n\n        return service;\n\n        function get () {\n            return $http.get('management/configprops').then(getConfigPropsComplete);\n\n            function getConfigPropsComplete (response) {\n                var properties = [];\n                angular.forEach(response.data, function (data) {\n                    properties.push(data);\n                });\n                var orderBy = $filter('orderBy');\n                return orderBy(properties, 'prefix');\n            }\n        }\n\n        function getEnv () {\n            return $http.get('management/env').then(getEnvComplete);\n\n            function getEnvComplete (response) {\n                var properties = {};\n                angular.forEach(response.data, function (val,key) {\n                    var vals = [];\n                    angular.forEach(val, function (v,k) {\n                        vals.push({ key:k, val:v });\n                    });\n                    properties[key] = vals;\n                });\n                return properties;\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('JhiConfigurationController', JhiConfigurationController);\n\n    JhiConfigurationController.$inject = ['$filter','JhiConfigurationService'];\n\n    function JhiConfigurationController (filter,JhiConfigurationService) {\n        var vm = this;\n\n        vm.allConfiguration = null;\n        vm.configuration = null;\n\n        JhiConfigurationService.get().then(function(configuration) {\n            vm.configuration = configuration;\n        });\n        JhiConfigurationService.getEnv().then(function (configuration) {\n            vm.allConfiguration = configuration;\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('audits', {\n            parent: 'admin',\n            url: '/audits',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Audits'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/audits/audits.html',\n                    controller: 'AuditsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('AuditsService', AuditsService);\n\n    AuditsService.$inject = ['$resource'];\n\n    function AuditsService ($resource) {\n        var service = $resource('management/audits/:id', {}, {\n            'get': {\n                method: 'GET',\n                isArray: true\n            },\n            'query': {\n                method: 'GET',\n                isArray: true,\n                params: {fromDate: null, toDate: null}\n            }\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('AuditsController', AuditsController);\n\n    AuditsController.$inject = ['$filter', 'AuditsService', 'ParseLinks'];\n\n    function AuditsController ($filter, AuditsService, ParseLinks) {\n        var vm = this;\n\n        vm.audits = null;\n        vm.fromDate = null;\n        vm.links = null;\n        vm.loadPage = loadPage;\n        vm.onChangeDate = onChangeDate;\n        vm.page = 1;\n        vm.previousMonth = previousMonth;\n        vm.toDate = null;\n        vm.today = today;\n        vm.totalItems = null;\n\n        vm.today();\n        vm.previousMonth();\n        vm.onChangeDate();\n\n        function onChangeDate () {\n            var dateFormat = 'yyyy-MM-dd';\n            var fromDate = $filter('date')(vm.fromDate, dateFormat);\n            var toDate = $filter('date')(vm.toDate, dateFormat);\n\n            AuditsService.query({page: vm.page -1, size: 20, fromDate: fromDate, toDate: toDate}, function(result, headers){\n                vm.audits = result;\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n            });\n        }\n\n        // Date picker configuration\n        function today () {\n            // Today + 1 day - needed if the current day must be included\n            var today = new Date();\n            vm.toDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);\n        }\n\n        function previousMonth () {\n            var fromDate = new Date();\n            if (fromDate.getMonth() === 0) {\n                fromDate = new Date(fromDate.getFullYear() - 1, 11, fromDate.getDate());\n            } else {\n                fromDate = new Date(fromDate.getFullYear(), fromDate.getMonth() - 1, fromDate.getDate());\n            }\n\n            vm.fromDate = fromDate;\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.onChangeDate();\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('admin', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('settings', {\n            parent: 'account',\n            url: '/settings',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Settings'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/settings/settings.html',\n                    controller: 'SettingsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('SettingsController', SettingsController);\n\n    SettingsController.$inject = ['Principal', 'Auth'];\n\n    function SettingsController (Principal, Auth) {\n        var vm = this;\n\n        vm.error = null;\n        vm.save = save;\n        vm.settingsAccount = null;\n        vm.success = null;\n\n        /**\n         * Store the \"settings account\" in a separate variable, and not in the shared \"account\" variable.\n         */\n        var copyAccount = function (account) {\n            return {\n                activated: account.activated,\n                email: account.email,\n                firstName: account.firstName,\n                langKey: account.langKey,\n                lastName: account.lastName,\n                login: account.login\n            };\n        };\n\n        Principal.identity().then(function(account) {\n            vm.settingsAccount = copyAccount(account);\n        });\n\n        function save () {\n            Auth.updateAccount(vm.settingsAccount).then(function() {\n                vm.error = null;\n                vm.success = 'OK';\n                Principal.identity(true).then(function(account) {\n                    vm.settingsAccount = copyAccount(account);\n                });\n            }).catch(function() {\n                vm.success = null;\n                vm.error = 'ERROR';\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('sessions', {\n            parent: 'account',\n            url: '/sessions',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Sessions'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/sessions/sessions.html',\n                    controller: 'SessionsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('SessionsController', SessionsController);\n\n    SessionsController.$inject = ['Sessions', 'Principal'];\n\n    function SessionsController (Sessions, Principal) {\n        var vm = this;\n\n        vm.account = null;\n        vm.error = null;\n        vm.invalidate = invalidate;\n        vm.sessions = Sessions.getAll();\n        vm.success = null;\n\n\n        Principal.identity().then(function(account) {\n            vm.account = account;\n        });\n\n        function invalidate (series) {\n            Sessions.delete({series: encodeURIComponent(series)},\n                function () {\n                    vm.error = null;\n                    vm.success = 'OK';\n                    vm.sessions = Sessions.getAll();\n                },\n                function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('requestReset', {\n            parent: 'account',\n            url: '/reset/request',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/request/reset.request.html',\n                    controller: 'RequestResetController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('RequestResetController', RequestResetController);\n\n    RequestResetController.$inject = ['$timeout', 'Auth'];\n\n    function RequestResetController ($timeout, Auth) {\n        var vm = this;\n\n        vm.error = null;\n        vm.errorEmailNotExists = null;\n        vm.requestReset = requestReset;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#email').focus();});\n\n        function requestReset () {\n\n            vm.error = null;\n            vm.errorEmailNotExists = null;\n\n            Auth.resetPasswordInit(vm.resetAccount.email).then(function () {\n                vm.success = 'OK';\n            }).catch(function (response) {\n                vm.success = null;\n                if (response.status === 400 && response.data === 'e-mail address not registered') {\n                    vm.errorEmailNotExists = 'ERROR';\n                } else {\n                    vm.error = 'ERROR';\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('finishReset', {\n            parent: 'account',\n            url: '/reset/finish?key',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/finish/reset.finish.html',\n                    controller: 'ResetFinishController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('ResetFinishController', ResetFinishController);\n\n    ResetFinishController.$inject = ['$stateParams', '$timeout', 'Auth', 'LoginService'];\n\n    function ResetFinishController ($stateParams, $timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.keyMissing = angular.isUndefined($stateParams.key);\n        vm.confirmPassword = null;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.finishReset = finishReset;\n        vm.login = LoginService.open;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#password').focus();});\n\n        function finishReset() {\n            vm.doNotMatch = null;\n            vm.error = null;\n            if (vm.resetAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                Auth.resetPasswordFinish({key: $stateParams.key, newPassword: vm.resetAccount.password}).then(function () {\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('register', {\n            parent: 'account',\n            url: '/register',\n            data: {\n                authorities: [],\n                pageTitle: 'Registration'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/register/register.html',\n                    controller: 'RegisterController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('RegisterController', RegisterController);\n\n\n    RegisterController.$inject = [ '$timeout', 'Auth', 'LoginService'];\n\n    function RegisterController ($timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.errorUserExists = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        vm.registerAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#login').focus();});\n\n        function register () {\n            if (vm.registerAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.registerAccount.langKey =  'en' ;\n                vm.doNotMatch = null;\n                vm.error = null;\n                vm.errorUserExists = null;\n                vm.errorEmailExists = null;\n\n                Auth.createAccount(vm.registerAccount).then(function () {\n                    vm.success = 'OK';\n                }).catch(function (response) {\n                    vm.success = null;\n                    if (response.status === 400 && response.data === 'login already in use') {\n                        vm.errorUserExists = 'ERROR';\n                    } else if (response.status === 400 && response.data === 'e-mail address already in use') {\n                        vm.errorEmailExists = 'ERROR';\n                    } else {\n                        vm.error = 'ERROR';\n                    }\n                });\n            }\n        }\n    }\n})();\n","/* globals $ */\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .directive('passwordStrengthBar', passwordStrengthBar);\n\n    function passwordStrengthBar () {\n        var directive = {\n            replace: true,\n            restrict: 'E',\n            template: '<div id=\"strength\">' +\n                '<small>Password strength:</small>' +\n                '<ul id=\"strengthBar\">' +\n                '<li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li>' +\n                '</ul>' +\n                '</div>',\n            scope: {\n                passwordToCheck: '='\n            },\n            link: linkFunc\n        };\n\n        return directive;\n\n        /* private helper methods*/\n\n        function linkFunc(scope, iElement) {\n            var strength = {\n                colors: ['#F00', '#F90', '#FF0', '#9F0', '#0F0'],\n                mesureStrength: function (p) {\n\n                    var _force = 0;\n                    var _regex = /[$-/:-?{-~!\"^_`\\[\\]]/g; // \"\n\n                    var _lowerLetters = /[a-z]+/.test(p);\n                    var _upperLetters = /[A-Z]+/.test(p);\n                    var _numbers = /[0-9]+/.test(p);\n                    var _symbols = _regex.test(p);\n\n                    var _flags = [_lowerLetters, _upperLetters, _numbers, _symbols];\n                    var _passedMatches = $.grep(_flags, function (el) {\n                        return el === true;\n                    }).length;\n\n                    _force += 2 * p.length + ((p.length >= 10) ? 1 : 0);\n                    _force += _passedMatches * 10;\n\n                    // penalty (short password)\n                    _force = (p.length <= 6) ? Math.min(_force, 10) : _force;\n\n                    // penalty (poor variety of characters)\n                    _force = (_passedMatches === 1) ? Math.min(_force, 10) : _force;\n                    _force = (_passedMatches === 2) ? Math.min(_force, 20) : _force;\n                    _force = (_passedMatches === 3) ? Math.min(_force, 40) : _force;\n\n                    return _force;\n\n                },\n                getColor: function (s) {\n\n                    var idx;\n                    if (s <= 10) {\n                        idx = 0;\n                    }\n                    else if (s <= 20) {\n                        idx = 1;\n                    }\n                    else if (s <= 30) {\n                        idx = 2;\n                    }\n                    else if (s <= 40) {\n                        idx = 3;\n                    }\n                    else {\n                        idx = 4;\n                    }\n\n                    return { idx: idx + 1, col: this.colors[idx] };\n                }\n            };\n            scope.$watch('passwordToCheck', function (password) {\n                if (password) {\n                    var c = strength.getColor(strength.mesureStrength(password));\n                    iElement.removeClass('ng-hide');\n                    iElement.find('ul').children('li')\n                        .css({ 'background-color': '#DDD' })\n                        .slice(0, c.idx)\n                        .css({ 'background-color': c.col });\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('password', {\n            parent: 'account',\n            url: '/password',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Password'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/password/password.html',\n                    controller: 'PasswordController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('PasswordController', PasswordController);\n\n    PasswordController.$inject = ['Auth', 'Principal'];\n\n    function PasswordController (Auth, Principal) {\n        var vm = this;\n\n        vm.changePassword = changePassword;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.success = null;\n\n        Principal.identity().then(function(account) {\n            vm.account = account;\n        });\n\n        function changePassword () {\n            if (vm.password !== vm.confirmPassword) {\n                vm.error = null;\n                vm.success = null;\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.doNotMatch = null;\n                Auth.changePassword(vm.password).then(function () {\n                    vm.error = null;\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('activate', {\n            parent: 'account',\n            url: '/activate?key',\n            data: {\n                authorities: [],\n                pageTitle: 'Activation'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/activate/activate.html',\n                    controller: 'ActivationController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('ActivationController', ActivationController);\n\n    ActivationController.$inject = ['$stateParams', 'Auth', 'LoginService'];\n\n    function ActivationController ($stateParams, Auth, LoginService) {\n        var vm = this;\n\n        Auth.activateAccount({key: $stateParams.key}).then(function () {\n            vm.error = null;\n            vm.success = 'OK';\n        }).catch(function () {\n            vm.success = null;\n            vm.error = 'ERROR';\n        });\n\n        vm.login = LoginService.open;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('account', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App', [\n            'ngStorage',\n            'ngResource',\n            'ngCookies',\n            'ngAria',\n            'ngCacheBuster',\n            'ngFileUpload',\n            'ui.bootstrap',\n            'ui.bootstrap.datetimepicker',\n            'ui.router',\n            'infinite-scroll',\n            // jhipster-needle-angularjs-add-module JHipster will add new module here\n            'angular-loading-bar'\n        ])\n        .run(run);\n\n    run.$inject = ['stateHandler'];\n\n    function run(stateHandler) {\n        stateHandler.initialize();\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('User', User);\n\n    User.$inject = ['$resource'];\n\n    function User ($resource) {\n        var service = $resource('api/users/:login', {}, {\n            'query': {method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'save': { method:'POST' },\n            'update': { method:'PUT' },\n            'delete':{ method:'DELETE'}\n        });\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('ProfileService', ProfileService);\n\n    ProfileService.$inject = ['$http'];\n\n    function ProfileService($http) {\n\n        var dataPromise;\n\n        var service = {\n            getProfileInfo : getProfileInfo\n        };\n\n        return service;\n\n        function getProfileInfo() {\n            if (angular.isUndefined(dataPromise)) {\n                dataPromise = $http.get('api/profile-info').then(function(result) {\n                    if (result.data.activeProfiles) {\n                        var response = {};\n                        response.activeProfiles = result.data.activeProfiles;\n                        response.ribbonEnv = result.data.ribbonEnv;\n                        response.inProduction = result.data.activeProfiles.indexOf(\"prod\") !== -1;\n                        response.swaggerEnabled = result.data.activeProfiles.indexOf(\"swagger\") !== -1;\n                        return response;\n                    }\n                });\n            }\n            return dataPromise;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .directive('pageRibbon', pageRibbon);\n\n    pageRibbon.$inject = ['ProfileService', '$rootScope'];\n\n    function pageRibbon(ProfileService, $rootScope) {\n        var directive = {\n            replace : true,\n            restrict : 'AE',\n            template : '<div class=\"ribbon hidden\"><a href=\"\" >{{ribbonEnv}}</a></div>',\n            link : linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            ProfileService.getProfileInfo().then(function(response) {\n                if (response.ribbonEnv) {\n                    scope.ribbonEnv = response.ribbonEnv;\n                    element.addClass(response.ribbonEnv);\n                    element.removeClass('hidden');\n                }\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('Sessions', Sessions);\n\n    Sessions.$inject = ['$resource'];\n\n    function Sessions ($resource) {\n        return $resource('api/account/sessions/:series', {}, {\n            'getAll': { method: 'GET', isArray: true}\n        });\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('Register', Register);\n\n    Register.$inject = ['$resource'];\n\n    function Register ($resource) {\n        return $resource('api/register', {}, {});\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('Principal', Principal);\n\n    Principal.$inject = ['$q', 'Account'];\n\n    function Principal ($q, Account) {\n        var _identity,\n            _authenticated = false;\n\n        var service = {\n            authenticate: authenticate,\n            hasAnyAuthority: hasAnyAuthority,\n            hasAuthority: hasAuthority,\n            identity: identity,\n            isAuthenticated: isAuthenticated,\n            isIdentityResolved: isIdentityResolved\n        };\n\n        return service;\n\n        function authenticate (identity) {\n            _identity = identity;\n            _authenticated = identity !== null;\n        }\n\n        function hasAnyAuthority (authorities) {\n            if (!_authenticated || !_identity || !_identity.authorities) {\n                return false;\n            }\n\n            for (var i = 0; i < authorities.length; i++) {\n                if (_identity.authorities.indexOf(authorities[i]) !== -1) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        function hasAuthority (authority) {\n            if (!_authenticated) {\n                return $q.when(false);\n            }\n\n            return this.identity().then(function(_id) {\n                return _id.authorities && _id.authorities.indexOf(authority) !== -1;\n            }, function(){\n                return false;\n            });\n        }\n\n        function identity (force) {\n            var deferred = $q.defer();\n\n            if (force === true) {\n                _identity = undefined;\n            }\n\n            // check and see if we have retrieved the identity data from the server.\n            // if we have, reuse it by immediately resolving\n            if (angular.isDefined(_identity)) {\n                deferred.resolve(_identity);\n\n                return deferred.promise;\n            }\n\n            // retrieve the identity data from the server, update the identity object, and then resolve.\n            Account.get().$promise\n                .then(getAccountThen)\n                .catch(getAccountCatch);\n\n            return deferred.promise;\n\n            function getAccountThen (account) {\n                _identity = account.data;\n                _authenticated = true;\n                deferred.resolve(_identity);\n            }\n\n            function getAccountCatch () {\n                _identity = null;\n                _authenticated = false;\n                deferred.resolve(_identity);\n            }\n        }\n\n        function isAuthenticated () {\n            return _authenticated;\n        }\n\n        function isIdentityResolved () {\n            return angular.isDefined(_identity);\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('PasswordResetInit', PasswordResetInit);\n\n    PasswordResetInit.$inject = ['$resource'];\n\n    function PasswordResetInit($resource) {\n        var service = $resource('api/account/reset_password/init', {}, {});\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('PasswordResetFinish', PasswordResetFinish);\n\n    PasswordResetFinish.$inject = ['$resource'];\n\n    function PasswordResetFinish($resource) {\n        var service = $resource('api/account/reset_password/finish', {}, {});\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('Password', Password);\n\n    Password.$inject = ['$resource'];\n\n    function Password($resource) {\n        var service = $resource('api/account/change_password', {}, {});\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .directive('hasAuthority', hasAuthority);\n\n    hasAuthority.$inject = ['Principal'];\n\n    function hasAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authority = attrs.hasAuthority.replace(/\\s+/g, '');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    Principal.hasAuthority(authority)\n                        .then(function (result) {\n                            if (result) {\n                                setVisible();\n                            } else {\n                                setHidden();\n                            }\n                        });\n                };\n\n            if (authority.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .directive('hasAnyAuthority', hasAnyAuthority);\n\n    hasAnyAuthority.$inject = ['Principal'];\n\n    function hasAnyAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authorities = attrs.hasAnyAuthority.replace(/\\s+/g, '').split(',');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n                    var result;\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    result = Principal.hasAnyAuthority(authorities);\n                    if (result) {\n                        setVisible();\n                    } else {\n                        setHidden();\n                    }\n                };\n\n            if (authorities.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('AuthServerProvider', AuthServerProvider);\n\n    AuthServerProvider.$inject = ['$http', '$localStorage' ];\n\n    function AuthServerProvider ($http, $localStorage ) {\n        var service = {\n            getToken: getToken,\n            hasValidToken: hasValidToken,\n            login: login,\n            logout: logout\n        };\n\n        return service;\n\n        function getToken () {\n            var token = $localStorage.authenticationToken;\n            return token;\n        }\n\n        function hasValidToken () {\n            var token = this.getToken();\n            return !!token;\n        }\n\n        function login (credentials) {\n            var data = 'j_username=' + encodeURIComponent(credentials.username) +\n                '&j_password=' + encodeURIComponent(credentials.password) +\n                '&remember-me=' + credentials.rememberMe + '&submit=Login';\n\n            return $http.post('api/authentication', data, {\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            }).success(function (response) {\n                return response;\n            });\n        }\n\n        function logout () {\n\n            \n            // logout from the server\n            $http.post('api/logout').success(function (response) {\n                delete $localStorage.authenticationToken;\n                // to get a new csrf token call the api\n                $http.get('api/account');\n                return response;\n            });\n            \n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('Auth', Auth);\n\n    Auth.$inject = ['$rootScope', '$state', '$sessionStorage', '$q', 'Principal', 'AuthServerProvider', 'Account', 'LoginService', 'Register', 'Activate', 'Password', 'PasswordResetInit', 'PasswordResetFinish'];\n\n    function Auth ($rootScope, $state, $sessionStorage, $q, Principal, AuthServerProvider, Account, LoginService, Register, Activate, Password, PasswordResetInit, PasswordResetFinish) {\n        var service = {\n            activateAccount: activateAccount,\n            authorize: authorize,\n            changePassword: changePassword,\n            createAccount: createAccount,\n            getPreviousState: getPreviousState,\n            login: login,\n            logout: logout,\n            resetPasswordFinish: resetPasswordFinish,\n            resetPasswordInit: resetPasswordInit,\n            resetPreviousState: resetPreviousState,\n            storePreviousState: storePreviousState,\n            updateAccount: updateAccount\n        };\n\n        return service;\n\n        function activateAccount (key, callback) {\n            var cb = callback || angular.noop;\n\n            return Activate.get(key,\n                function (response) {\n                    return cb(response);\n                },\n                function (err) {\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function authorize (force) {\n            var authReturn = Principal.identity(force).then(authThen);\n\n            return authReturn;\n\n            function authThen () {\n                var isAuthenticated = Principal.isAuthenticated();\n\n                // an authenticated user can't access to login and register pages\n                if (isAuthenticated && $rootScope.toState.parent === 'account' && ($rootScope.toState.name === 'login' || $rootScope.toState.name === 'register')) {\n                    $state.go('home');\n                }\n\n                // recover and clear previousState after external login redirect (e.g. oauth2)\n                if (isAuthenticated && !$rootScope.fromState.name && getPreviousState()) {\n                    var previousState = getPreviousState();\n                    resetPreviousState();\n                    $state.go(previousState.name, previousState.params);\n                }\n\n                if ($rootScope.toState.data.authorities && $rootScope.toState.data.authorities.length > 0 && !Principal.hasAnyAuthority($rootScope.toState.data.authorities)) {\n                    if (isAuthenticated) {\n                        // user is signed in but not authorized for desired state\n                        $state.go('accessdenied');\n                    }\n                    else {\n                        // user is not authenticated. stow the state they wanted before you\n                        // send them to the login service, so you can return them when you're done\n                        storePreviousState($rootScope.toState.name, $rootScope.toStateParams);\n\n                        // now, send them to the signin state so they can log in\n                        $state.go('accessdenied').then(function() {\n                            LoginService.open();\n                        });\n                    }\n                }\n            }\n        }\n\n        function changePassword (newPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return Password.save(newPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function createAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Register.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    this.logout();\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function login (credentials, callback) {\n            var cb = callback || angular.noop;\n            var deferred = $q.defer();\n\n            AuthServerProvider.login(credentials)\n                .then(loginThen)\n                .catch(function (err) {\n                    this.logout();\n                    deferred.reject(err);\n                    return cb(err);\n                }.bind(this));\n\n            function loginThen (data) {\n                Principal.identity(true).then(function(account) {\n                    deferred.resolve(data);\n                });\n                return cb();\n            }\n\n            return deferred.promise;\n        }\n\n\n        function logout () {\n            AuthServerProvider.logout();\n            Principal.authenticate(null);\n        }\n\n        function resetPasswordFinish (keyAndPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetFinish.save(keyAndPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function resetPasswordInit (mail, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetInit.save(mail, function() {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function updateAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Account.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function getPreviousState() {\n            var previousState = $sessionStorage.previousState;\n            return previousState;\n        }\n\n        function resetPreviousState() {\n            delete $sessionStorage.previousState;\n        }\n\n        function storePreviousState(previousStateName, previousStateParams) {\n            var previousState = { \"name\": previousStateName, \"params\": previousStateParams };\n            $sessionStorage.previousState = previousState;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('Activate', Activate);\n\n    Activate.$inject = ['$resource'];\n\n    function Activate ($resource) {\n        var service = $resource('api/activate', {}, {\n            'get': { method: 'GET', params: {}, isArray: false}\n        });\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('Account', Account);\n\n    Account.$inject = ['$resource'];\n\n    function Account ($resource) {\n        var service = $resource('api/account', {}, {\n            'get': { method: 'GET', params: {}, isArray: false,\n                interceptor: {\n                    response: function(response) {\n                        // expose response\n                        return response;\n                    }\n                }\n            }\n        });\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('NavbarController', NavbarController);\n\n    NavbarController.$inject = ['$state', 'Auth', 'Principal', 'ProfileService', 'LoginService'];\n\n    function NavbarController ($state, Auth, Principal, ProfileService, LoginService) {\n        var vm = this;\n\n        vm.isNavbarCollapsed = true;\n        vm.isAuthenticated = Principal.isAuthenticated;\n\n        ProfileService.getProfileInfo().then(function(response) {\n            vm.inProduction = response.inProduction;\n            vm.swaggerEnabled = response.swaggerEnabled;\n        });\n\n        vm.login = login;\n        vm.logout = logout;\n        vm.toggleNavbar = toggleNavbar;\n        vm.collapseNavbar = collapseNavbar;\n        vm.$state = $state;\n\n        function login() {\n            collapseNavbar();\n            LoginService.open();\n        }\n\n        function logout() {\n            collapseNavbar();\n            Auth.logout();\n            $state.go('home');\n        }\n\n        function toggleNavbar() {\n            vm.isNavbarCollapsed = !vm.isNavbarCollapsed;\n        }\n\n        function collapseNavbar() {\n            vm.isNavbarCollapsed = true;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n            .state('error', {\n                parent: 'app',\n                url: '/error',\n                data: {\n                    authorities: [],\n                    pageTitle: 'Error page!'\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/error.html'\n                    }\n                }\n            })\n            .state('accessdenied', {\n                parent: 'app',\n                url: '/accessdenied',\n                data: {\n                    authorities: []\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/accessdenied.html'\n                    }\n                }\n            });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('home', {\n            parent: 'app',\n            url: '/',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/home/home.html',\n                    controller: 'HomeController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('HomeController', HomeController);\n\n    HomeController.$inject = ['$scope', 'Principal', 'LoginService', '$state'];\n\n    function HomeController ($scope, Principal, LoginService, $state) {\n        var vm = this;\n\n        vm.account = null;\n        vm.isAuthenticated = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        $scope.$on('authenticationSuccess', function() {\n            getAccount();\n        });\n\n        getAccount();\n\n        function getAccount() {\n            Principal.identity().then(function(account) {\n                vm.account = account;\n                vm.isAuthenticated = Principal.isAuthenticated;\n            });\n        }\n        function register () {\n            $state.go('register');\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('TaskMySuffixDialogController', TaskMySuffixDialogController);\n\n    TaskMySuffixDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Task', 'Job'];\n\n    function TaskMySuffixDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Task, Job) {\n        var vm = this;\n\n        vm.task = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.jobs = Job.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.task.id !== null) {\n                Task.update(vm.task, onSaveSuccess, onSaveError);\n            } else {\n                Task.save(vm.task, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('cs499Assignment2App:taskUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('TaskMySuffixDetailController', TaskMySuffixDetailController);\n\n    TaskMySuffixDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Task', 'Job'];\n\n    function TaskMySuffixDetailController($scope, $rootScope, $stateParams, previousState, entity, Task, Job) {\n        var vm = this;\n\n        vm.task = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('cs499Assignment2App:taskUpdate', function(event, result) {\n            vm.task = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('TaskMySuffixDeleteController',TaskMySuffixDeleteController);\n\n    TaskMySuffixDeleteController.$inject = ['$uibModalInstance', 'entity', 'Task'];\n\n    function TaskMySuffixDeleteController($uibModalInstance, entity, Task) {\n        var vm = this;\n\n        vm.task = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Task.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('taskmySuffix', {\n            parent: 'entity',\n            url: '/taskmySuffix',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Tasks'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/task/tasksmySuffix.html',\n                    controller: 'TaskMySuffixController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('taskmySuffix-detail', {\n            parent: 'entity',\n            url: '/taskmySuffix/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Task'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/task/taskmySuffix-detail.html',\n                    controller: 'TaskMySuffixDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Task', function($stateParams, Task) {\n                    return Task.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'taskmySuffix',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('taskmySuffix-detail.edit', {\n            parent: 'taskmySuffix-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/task/taskmySuffix-dialog.html',\n                    controller: 'TaskMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Task', function(Task) {\n                            return Task.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('taskmySuffix.new', {\n            parent: 'taskmySuffix',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/task/taskmySuffix-dialog.html',\n                    controller: 'TaskMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                title: null,\n                                description: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('taskmySuffix', null, { reload: 'taskmySuffix' });\n                }, function() {\n                    $state.go('taskmySuffix');\n                });\n            }]\n        })\n        .state('taskmySuffix.edit', {\n            parent: 'taskmySuffix',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/task/taskmySuffix-dialog.html',\n                    controller: 'TaskMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Task', function(Task) {\n                            return Task.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('taskmySuffix', null, { reload: 'taskmySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('taskmySuffix.delete', {\n            parent: 'taskmySuffix',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/task/taskmySuffix-delete-dialog.html',\n                    controller: 'TaskMySuffixDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Task', function(Task) {\n                            return Task.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('taskmySuffix', null, { reload: 'taskmySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('TaskMySuffixController', TaskMySuffixController);\n\n    TaskMySuffixController.$inject = ['$scope', '$state', 'Task'];\n\n    function TaskMySuffixController ($scope, $state, Task) {\n        var vm = this;\n\n        vm.tasks = [];\n\n        loadAll();\n\n        function loadAll() {\n            Task.query(function(result) {\n                vm.tasks = result;\n                vm.searchQuery = null;\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n    angular\n        .module('cs499Assignment2App')\n        .factory('Task', Task);\n\n    Task.$inject = ['$resource'];\n\n    function Task ($resource) {\n        var resourceUrl =  'api/tasks/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('RegionMySuffixDialogController', RegionMySuffixDialogController);\n\n    RegionMySuffixDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Region'];\n\n    function RegionMySuffixDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Region) {\n        var vm = this;\n\n        vm.region = entity;\n        vm.clear = clear;\n        vm.save = save;\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.region.id !== null) {\n                Region.update(vm.region, onSaveSuccess, onSaveError);\n            } else {\n                Region.save(vm.region, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('cs499Assignment2App:regionUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('RegionMySuffixDetailController', RegionMySuffixDetailController);\n\n    RegionMySuffixDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Region'];\n\n    function RegionMySuffixDetailController($scope, $rootScope, $stateParams, previousState, entity, Region) {\n        var vm = this;\n\n        vm.region = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('cs499Assignment2App:regionUpdate', function(event, result) {\n            vm.region = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('RegionMySuffixDeleteController',RegionMySuffixDeleteController);\n\n    RegionMySuffixDeleteController.$inject = ['$uibModalInstance', 'entity', 'Region'];\n\n    function RegionMySuffixDeleteController($uibModalInstance, entity, Region) {\n        var vm = this;\n\n        vm.region = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Region.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('regionmySuffix', {\n            parent: 'entity',\n            url: '/regionmySuffix',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Regions'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/region/regionsmySuffix.html',\n                    controller: 'RegionMySuffixController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('regionmySuffix-detail', {\n            parent: 'entity',\n            url: '/regionmySuffix/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Region'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/region/regionmySuffix-detail.html',\n                    controller: 'RegionMySuffixDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Region', function($stateParams, Region) {\n                    return Region.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'regionmySuffix',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('regionmySuffix-detail.edit', {\n            parent: 'regionmySuffix-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/region/regionmySuffix-dialog.html',\n                    controller: 'RegionMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Region', function(Region) {\n                            return Region.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('regionmySuffix.new', {\n            parent: 'regionmySuffix',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/region/regionmySuffix-dialog.html',\n                    controller: 'RegionMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                regionName: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('regionmySuffix', null, { reload: 'regionmySuffix' });\n                }, function() {\n                    $state.go('regionmySuffix');\n                });\n            }]\n        })\n        .state('regionmySuffix.edit', {\n            parent: 'regionmySuffix',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/region/regionmySuffix-dialog.html',\n                    controller: 'RegionMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Region', function(Region) {\n                            return Region.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('regionmySuffix', null, { reload: 'regionmySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('regionmySuffix.delete', {\n            parent: 'regionmySuffix',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/region/regionmySuffix-delete-dialog.html',\n                    controller: 'RegionMySuffixDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Region', function(Region) {\n                            return Region.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('regionmySuffix', null, { reload: 'regionmySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('RegionMySuffixController', RegionMySuffixController);\n\n    RegionMySuffixController.$inject = ['$scope', '$state', 'Region'];\n\n    function RegionMySuffixController ($scope, $state, Region) {\n        var vm = this;\n\n        vm.regions = [];\n\n        loadAll();\n\n        function loadAll() {\n            Region.query(function(result) {\n                vm.regions = result;\n                vm.searchQuery = null;\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n    angular\n        .module('cs499Assignment2App')\n        .factory('Region', Region);\n\n    Region.$inject = ['$resource'];\n\n    function Region ($resource) {\n        var resourceUrl =  'api/regions/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('LocationMySuffixDialogController', LocationMySuffixDialogController);\n\n    LocationMySuffixDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', '$q', 'entity', 'Location', 'Country'];\n\n    function LocationMySuffixDialogController ($timeout, $scope, $stateParams, $uibModalInstance, $q, entity, Location, Country) {\n        var vm = this;\n\n        vm.location = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.countries = Country.query({filter: 'location-is-null'});\n        $q.all([vm.location.$promise, vm.countries.$promise]).then(function() {\n            if (!vm.location.countryId) {\n                return $q.reject();\n            }\n            return Country.get({id : vm.location.countryId}).$promise;\n        }).then(function(country) {\n            vm.countries.push(country);\n        });\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.location.id !== null) {\n                Location.update(vm.location, onSaveSuccess, onSaveError);\n            } else {\n                Location.save(vm.location, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('cs499Assignment2App:locationUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('LocationMySuffixDetailController', LocationMySuffixDetailController);\n\n    LocationMySuffixDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Location', 'Country'];\n\n    function LocationMySuffixDetailController($scope, $rootScope, $stateParams, previousState, entity, Location, Country) {\n        var vm = this;\n\n        vm.location = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('cs499Assignment2App:locationUpdate', function(event, result) {\n            vm.location = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('LocationMySuffixDeleteController',LocationMySuffixDeleteController);\n\n    LocationMySuffixDeleteController.$inject = ['$uibModalInstance', 'entity', 'Location'];\n\n    function LocationMySuffixDeleteController($uibModalInstance, entity, Location) {\n        var vm = this;\n\n        vm.location = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Location.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('locationmySuffix', {\n            parent: 'entity',\n            url: '/locationmySuffix',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Locations'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/location/locationsmySuffix.html',\n                    controller: 'LocationMySuffixController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('locationmySuffix-detail', {\n            parent: 'entity',\n            url: '/locationmySuffix/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Location'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/location/locationmySuffix-detail.html',\n                    controller: 'LocationMySuffixDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Location', function($stateParams, Location) {\n                    return Location.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'locationmySuffix',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('locationmySuffix-detail.edit', {\n            parent: 'locationmySuffix-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/location/locationmySuffix-dialog.html',\n                    controller: 'LocationMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Location', function(Location) {\n                            return Location.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('locationmySuffix.new', {\n            parent: 'locationmySuffix',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/location/locationmySuffix-dialog.html',\n                    controller: 'LocationMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                streetAddress: null,\n                                postalCode: null,\n                                city: null,\n                                stateProvince: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('locationmySuffix', null, { reload: 'locationmySuffix' });\n                }, function() {\n                    $state.go('locationmySuffix');\n                });\n            }]\n        })\n        .state('locationmySuffix.edit', {\n            parent: 'locationmySuffix',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/location/locationmySuffix-dialog.html',\n                    controller: 'LocationMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Location', function(Location) {\n                            return Location.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('locationmySuffix', null, { reload: 'locationmySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('locationmySuffix.delete', {\n            parent: 'locationmySuffix',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/location/locationmySuffix-delete-dialog.html',\n                    controller: 'LocationMySuffixDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Location', function(Location) {\n                            return Location.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('locationmySuffix', null, { reload: 'locationmySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('LocationMySuffixController', LocationMySuffixController);\n\n    LocationMySuffixController.$inject = ['$scope', '$state', 'Location'];\n\n    function LocationMySuffixController ($scope, $state, Location) {\n        var vm = this;\n\n        vm.locations = [];\n\n        loadAll();\n\n        function loadAll() {\n            Location.query(function(result) {\n                vm.locations = result;\n                vm.searchQuery = null;\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n    angular\n        .module('cs499Assignment2App')\n        .factory('Location', Location);\n\n    Location.$inject = ['$resource'];\n\n    function Location ($resource) {\n        var resourceUrl =  'api/locations/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('JobHistoryMySuffixDialogController', JobHistoryMySuffixDialogController);\n\n    JobHistoryMySuffixDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', '$q', 'entity', 'JobHistory', 'Job', 'Department', 'Employee'];\n\n    function JobHistoryMySuffixDialogController ($timeout, $scope, $stateParams, $uibModalInstance, $q, entity, JobHistory, Job, Department, Employee) {\n        var vm = this;\n\n        vm.jobHistory = entity;\n        vm.clear = clear;\n        vm.datePickerOpenStatus = {};\n        vm.openCalendar = openCalendar;\n        vm.save = save;\n        vm.jobs = Job.query({filter: 'jobhistory-is-null'});\n        $q.all([vm.jobHistory.$promise, vm.jobs.$promise]).then(function() {\n            if (!vm.jobHistory.jobId) {\n                return $q.reject();\n            }\n            return Job.get({id : vm.jobHistory.jobId}).$promise;\n        }).then(function(job) {\n            vm.jobs.push(job);\n        });\n        vm.departments = Department.query({filter: 'jobhistory-is-null'});\n        $q.all([vm.jobHistory.$promise, vm.departments.$promise]).then(function() {\n            if (!vm.jobHistory.departmentId) {\n                return $q.reject();\n            }\n            return Department.get({id : vm.jobHistory.departmentId}).$promise;\n        }).then(function(department) {\n            vm.departments.push(department);\n        });\n        vm.employees = Employee.query({filter: 'jobhistory-is-null'});\n        $q.all([vm.jobHistory.$promise, vm.employees.$promise]).then(function() {\n            if (!vm.jobHistory.employeeId) {\n                return $q.reject();\n            }\n            return Employee.get({id : vm.jobHistory.employeeId}).$promise;\n        }).then(function(employee) {\n            vm.employees.push(employee);\n        });\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.jobHistory.id !== null) {\n                JobHistory.update(vm.jobHistory, onSaveSuccess, onSaveError);\n            } else {\n                JobHistory.save(vm.jobHistory, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('cs499Assignment2App:jobHistoryUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        vm.datePickerOpenStatus.startDate = false;\n        vm.datePickerOpenStatus.endDate = false;\n\n        function openCalendar (date) {\n            vm.datePickerOpenStatus[date] = true;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('JobHistoryMySuffixDetailController', JobHistoryMySuffixDetailController);\n\n    JobHistoryMySuffixDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'JobHistory', 'Job', 'Department', 'Employee'];\n\n    function JobHistoryMySuffixDetailController($scope, $rootScope, $stateParams, previousState, entity, JobHistory, Job, Department, Employee) {\n        var vm = this;\n\n        vm.jobHistory = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('cs499Assignment2App:jobHistoryUpdate', function(event, result) {\n            vm.jobHistory = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('JobHistoryMySuffixDeleteController',JobHistoryMySuffixDeleteController);\n\n    JobHistoryMySuffixDeleteController.$inject = ['$uibModalInstance', 'entity', 'JobHistory'];\n\n    function JobHistoryMySuffixDeleteController($uibModalInstance, entity, JobHistory) {\n        var vm = this;\n\n        vm.jobHistory = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            JobHistory.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('job-historymySuffix', {\n            parent: 'entity',\n            url: '/job-historymySuffix',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'JobHistories'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/job-history/job-historiesmySuffix.html',\n                    controller: 'JobHistoryMySuffixController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('job-historymySuffix-detail', {\n            parent: 'entity',\n            url: '/job-historymySuffix/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'JobHistory'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/job-history/job-historymySuffix-detail.html',\n                    controller: 'JobHistoryMySuffixDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'JobHistory', function($stateParams, JobHistory) {\n                    return JobHistory.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'job-historymySuffix',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('job-historymySuffix-detail.edit', {\n            parent: 'job-historymySuffix-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/job-history/job-historymySuffix-dialog.html',\n                    controller: 'JobHistoryMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['JobHistory', function(JobHistory) {\n                            return JobHistory.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('job-historymySuffix.new', {\n            parent: 'job-historymySuffix',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/job-history/job-historymySuffix-dialog.html',\n                    controller: 'JobHistoryMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                startDate: null,\n                                endDate: null,\n                                language: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('job-historymySuffix', null, { reload: 'job-historymySuffix' });\n                }, function() {\n                    $state.go('job-historymySuffix');\n                });\n            }]\n        })\n        .state('job-historymySuffix.edit', {\n            parent: 'job-historymySuffix',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/job-history/job-historymySuffix-dialog.html',\n                    controller: 'JobHistoryMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['JobHistory', function(JobHistory) {\n                            return JobHistory.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('job-historymySuffix', null, { reload: 'job-historymySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('job-historymySuffix.delete', {\n            parent: 'job-historymySuffix',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/job-history/job-historymySuffix-delete-dialog.html',\n                    controller: 'JobHistoryMySuffixDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['JobHistory', function(JobHistory) {\n                            return JobHistory.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('job-historymySuffix', null, { reload: 'job-historymySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('JobHistoryMySuffixController', JobHistoryMySuffixController);\n\n    JobHistoryMySuffixController.$inject = ['$scope', '$state', 'JobHistory', 'ParseLinks', 'AlertService', 'paginationConstants'];\n\n    function JobHistoryMySuffixController ($scope, $state, JobHistory, ParseLinks, AlertService, paginationConstants) {\n        var vm = this;\n\n        vm.jobHistories = [];\n        vm.loadPage = loadPage;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n        vm.page = 0;\n        vm.links = {\n            last: 0\n        };\n        vm.predicate = 'id';\n        vm.reset = reset;\n        vm.reverse = true;\n\n        loadAll();\n\n        function loadAll () {\n            JobHistory.query({\n                page: vm.page,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                for (var i = 0; i < data.length; i++) {\n                    vm.jobHistories.push(data[i]);\n                }\n            }\n\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function reset () {\n            vm.page = 0;\n            vm.jobHistories = [];\n            loadAll();\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            loadAll();\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n    angular\n        .module('cs499Assignment2App')\n        .factory('JobHistory', JobHistory);\n\n    JobHistory.$inject = ['$resource', 'DateUtils'];\n\n    function JobHistory ($resource, DateUtils) {\n        var resourceUrl =  'api/job-histories/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                        data.startDate = DateUtils.convertDateTimeFromServer(data.startDate);\n                        data.endDate = DateUtils.convertDateTimeFromServer(data.endDate);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('JobMySuffixDialogController', JobMySuffixDialogController);\n\n    JobMySuffixDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Job', 'Employee', 'Task'];\n\n    function JobMySuffixDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Job, Employee, Task) {\n        var vm = this;\n\n        vm.job = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.employees = Employee.query();\n        vm.tasks = Task.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.job.id !== null) {\n                Job.update(vm.job, onSaveSuccess, onSaveError);\n            } else {\n                Job.save(vm.job, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('cs499Assignment2App:jobUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('JobMySuffixDetailController', JobMySuffixDetailController);\n\n    JobMySuffixDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Job', 'Employee', 'Task'];\n\n    function JobMySuffixDetailController($scope, $rootScope, $stateParams, previousState, entity, Job, Employee, Task) {\n        var vm = this;\n\n        vm.job = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('cs499Assignment2App:jobUpdate', function(event, result) {\n            vm.job = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('JobMySuffixDeleteController',JobMySuffixDeleteController);\n\n    JobMySuffixDeleteController.$inject = ['$uibModalInstance', 'entity', 'Job'];\n\n    function JobMySuffixDeleteController($uibModalInstance, entity, Job) {\n        var vm = this;\n\n        vm.job = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Job.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('jobmySuffix', {\n            parent: 'entity',\n            url: '/jobmySuffix?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Jobs'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/job/jobsmySuffix.html',\n                    controller: 'JobMySuffixController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n            }\n        })\n        .state('jobmySuffix-detail', {\n            parent: 'entity',\n            url: '/jobmySuffix/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Job'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/job/jobmySuffix-detail.html',\n                    controller: 'JobMySuffixDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Job', function($stateParams, Job) {\n                    return Job.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'jobmySuffix',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('jobmySuffix-detail.edit', {\n            parent: 'jobmySuffix-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/job/jobmySuffix-dialog.html',\n                    controller: 'JobMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Job', function(Job) {\n                            return Job.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('jobmySuffix.new', {\n            parent: 'jobmySuffix',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/job/jobmySuffix-dialog.html',\n                    controller: 'JobMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                jobTitle: null,\n                                minSalary: null,\n                                maxSalary: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('jobmySuffix', null, { reload: 'jobmySuffix' });\n                }, function() {\n                    $state.go('jobmySuffix');\n                });\n            }]\n        })\n        .state('jobmySuffix.edit', {\n            parent: 'jobmySuffix',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/job/jobmySuffix-dialog.html',\n                    controller: 'JobMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Job', function(Job) {\n                            return Job.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('jobmySuffix', null, { reload: 'jobmySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('jobmySuffix.delete', {\n            parent: 'jobmySuffix',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/job/jobmySuffix-delete-dialog.html',\n                    controller: 'JobMySuffixDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Job', function(Job) {\n                            return Job.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('jobmySuffix', null, { reload: 'jobmySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('JobMySuffixController', JobMySuffixController);\n\n    JobMySuffixController.$inject = ['$scope', '$state', 'Job', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function JobMySuffixController ($scope, $state, Job, ParseLinks, AlertService, paginationConstants, pagingParams) {\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n\n        loadAll();\n\n        function loadAll () {\n            Job.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.jobs = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n    angular\n        .module('cs499Assignment2App')\n        .factory('Job', Job);\n\n    Job.$inject = ['$resource'];\n\n    function Job ($resource) {\n        var resourceUrl =  'api/jobs/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('entity', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('EmployeeMySuffixDialogController', EmployeeMySuffixDialogController);\n\n    EmployeeMySuffixDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Employee', 'Department', 'Job'];\n\n    function EmployeeMySuffixDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Employee, Department, Job) {\n        var vm = this;\n\n        vm.employee = entity;\n        vm.clear = clear;\n        vm.datePickerOpenStatus = {};\n        vm.openCalendar = openCalendar;\n        vm.save = save;\n        vm.departments = Department.query();\n        vm.jobs = Job.query();\n        vm.employees = Employee.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.employee.id !== null) {\n                Employee.update(vm.employee, onSaveSuccess, onSaveError);\n            } else {\n                Employee.save(vm.employee, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('cs499Assignment2App:employeeUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        vm.datePickerOpenStatus.hireDate = false;\n\n        function openCalendar (date) {\n            vm.datePickerOpenStatus[date] = true;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('EmployeeMySuffixDetailController', EmployeeMySuffixDetailController);\n\n    EmployeeMySuffixDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Employee', 'Department', 'Job'];\n\n    function EmployeeMySuffixDetailController($scope, $rootScope, $stateParams, previousState, entity, Employee, Department, Job) {\n        var vm = this;\n\n        vm.employee = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('cs499Assignment2App:employeeUpdate', function(event, result) {\n            vm.employee = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('EmployeeMySuffixDeleteController',EmployeeMySuffixDeleteController);\n\n    EmployeeMySuffixDeleteController.$inject = ['$uibModalInstance', 'entity', 'Employee'];\n\n    function EmployeeMySuffixDeleteController($uibModalInstance, entity, Employee) {\n        var vm = this;\n\n        vm.employee = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Employee.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('employeemySuffix', {\n            parent: 'entity',\n            url: '/employeemySuffix',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Employees'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/employee/employeesmySuffix.html',\n                    controller: 'EmployeeMySuffixController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('employeemySuffix-detail', {\n            parent: 'entity',\n            url: '/employeemySuffix/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Employee'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/employee/employeemySuffix-detail.html',\n                    controller: 'EmployeeMySuffixDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Employee', function($stateParams, Employee) {\n                    return Employee.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'employeemySuffix',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('employeemySuffix-detail.edit', {\n            parent: 'employeemySuffix-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/employee/employeemySuffix-dialog.html',\n                    controller: 'EmployeeMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Employee', function(Employee) {\n                            return Employee.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('employeemySuffix.new', {\n            parent: 'employeemySuffix',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/employee/employeemySuffix-dialog.html',\n                    controller: 'EmployeeMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                firstName: null,\n                                lastName: null,\n                                email: null,\n                                phoneNumber: null,\n                                hireDate: null,\n                                salary: null,\n                                commissionPct: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('employeemySuffix', null, { reload: 'employeemySuffix' });\n                }, function() {\n                    $state.go('employeemySuffix');\n                });\n            }]\n        })\n        .state('employeemySuffix.edit', {\n            parent: 'employeemySuffix',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/employee/employeemySuffix-dialog.html',\n                    controller: 'EmployeeMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Employee', function(Employee) {\n                            return Employee.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('employeemySuffix', null, { reload: 'employeemySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('employeemySuffix.delete', {\n            parent: 'employeemySuffix',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/employee/employeemySuffix-delete-dialog.html',\n                    controller: 'EmployeeMySuffixDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Employee', function(Employee) {\n                            return Employee.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('employeemySuffix', null, { reload: 'employeemySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('EmployeeMySuffixController', EmployeeMySuffixController);\n\n    EmployeeMySuffixController.$inject = ['$scope', '$state', 'Employee', 'ParseLinks', 'AlertService', 'paginationConstants'];\n\n    function EmployeeMySuffixController ($scope, $state, Employee, ParseLinks, AlertService, paginationConstants) {\n        var vm = this;\n\n        vm.employees = [];\n        vm.loadPage = loadPage;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n        vm.page = 0;\n        vm.links = {\n            last: 0\n        };\n        vm.predicate = 'id';\n        vm.reset = reset;\n        vm.reverse = true;\n\n        loadAll();\n\n        function loadAll () {\n            Employee.query({\n                page: vm.page,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                for (var i = 0; i < data.length; i++) {\n                    vm.employees.push(data[i]);\n                }\n            }\n\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function reset () {\n            vm.page = 0;\n            vm.employees = [];\n            loadAll();\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            loadAll();\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n    angular\n        .module('cs499Assignment2App')\n        .factory('Employee', Employee);\n\n    Employee.$inject = ['$resource', 'DateUtils'];\n\n    function Employee ($resource, DateUtils) {\n        var resourceUrl =  'api/employees/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                        data.hireDate = DateUtils.convertDateTimeFromServer(data.hireDate);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('DepartmentMySuffixDialogController', DepartmentMySuffixDialogController);\n\n    DepartmentMySuffixDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', '$q', 'entity', 'Department', 'Location', 'Employee'];\n\n    function DepartmentMySuffixDialogController ($timeout, $scope, $stateParams, $uibModalInstance, $q, entity, Department, Location, Employee) {\n        var vm = this;\n\n        vm.department = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.locations = Location.query({filter: 'department-is-null'});\n        $q.all([vm.department.$promise, vm.locations.$promise]).then(function() {\n            if (!vm.department.locationId) {\n                return $q.reject();\n            }\n            return Location.get({id : vm.department.locationId}).$promise;\n        }).then(function(location) {\n            vm.locations.push(location);\n        });\n        vm.employees = Employee.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.department.id !== null) {\n                Department.update(vm.department, onSaveSuccess, onSaveError);\n            } else {\n                Department.save(vm.department, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('cs499Assignment2App:departmentUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('DepartmentMySuffixDetailController', DepartmentMySuffixDetailController);\n\n    DepartmentMySuffixDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Department', 'Location', 'Employee'];\n\n    function DepartmentMySuffixDetailController($scope, $rootScope, $stateParams, previousState, entity, Department, Location, Employee) {\n        var vm = this;\n\n        vm.department = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('cs499Assignment2App:departmentUpdate', function(event, result) {\n            vm.department = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('DepartmentMySuffixDeleteController',DepartmentMySuffixDeleteController);\n\n    DepartmentMySuffixDeleteController.$inject = ['$uibModalInstance', 'entity', 'Department'];\n\n    function DepartmentMySuffixDeleteController($uibModalInstance, entity, Department) {\n        var vm = this;\n\n        vm.department = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Department.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('departmentmySuffix', {\n            parent: 'entity',\n            url: '/departmentmySuffix',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Departments'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/department/departmentsmySuffix.html',\n                    controller: 'DepartmentMySuffixController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('departmentmySuffix-detail', {\n            parent: 'entity',\n            url: '/departmentmySuffix/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Department'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/department/departmentmySuffix-detail.html',\n                    controller: 'DepartmentMySuffixDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Department', function($stateParams, Department) {\n                    return Department.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'departmentmySuffix',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('departmentmySuffix-detail.edit', {\n            parent: 'departmentmySuffix-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/department/departmentmySuffix-dialog.html',\n                    controller: 'DepartmentMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Department', function(Department) {\n                            return Department.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('departmentmySuffix.new', {\n            parent: 'departmentmySuffix',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/department/departmentmySuffix-dialog.html',\n                    controller: 'DepartmentMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                departmentName: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('departmentmySuffix', null, { reload: 'departmentmySuffix' });\n                }, function() {\n                    $state.go('departmentmySuffix');\n                });\n            }]\n        })\n        .state('departmentmySuffix.edit', {\n            parent: 'departmentmySuffix',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/department/departmentmySuffix-dialog.html',\n                    controller: 'DepartmentMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Department', function(Department) {\n                            return Department.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('departmentmySuffix', null, { reload: 'departmentmySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('departmentmySuffix.delete', {\n            parent: 'departmentmySuffix',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/department/departmentmySuffix-delete-dialog.html',\n                    controller: 'DepartmentMySuffixDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Department', function(Department) {\n                            return Department.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('departmentmySuffix', null, { reload: 'departmentmySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('DepartmentMySuffixController', DepartmentMySuffixController);\n\n    DepartmentMySuffixController.$inject = ['$scope', '$state', 'Department'];\n\n    function DepartmentMySuffixController ($scope, $state, Department) {\n        var vm = this;\n\n        vm.departments = [];\n\n        loadAll();\n\n        function loadAll() {\n            Department.query(function(result) {\n                vm.departments = result;\n                vm.searchQuery = null;\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n    angular\n        .module('cs499Assignment2App')\n        .factory('Department', Department);\n\n    Department.$inject = ['$resource'];\n\n    function Department ($resource) {\n        var resourceUrl =  'api/departments/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('CountryMySuffixDialogController', CountryMySuffixDialogController);\n\n    CountryMySuffixDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', '$q', 'entity', 'Country', 'Region'];\n\n    function CountryMySuffixDialogController ($timeout, $scope, $stateParams, $uibModalInstance, $q, entity, Country, Region) {\n        var vm = this;\n\n        vm.country = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.regions = Region.query({filter: 'country-is-null'});\n        $q.all([vm.country.$promise, vm.regions.$promise]).then(function() {\n            if (!vm.country.regionId) {\n                return $q.reject();\n            }\n            return Region.get({id : vm.country.regionId}).$promise;\n        }).then(function(region) {\n            vm.regions.push(region);\n        });\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.country.id !== null) {\n                Country.update(vm.country, onSaveSuccess, onSaveError);\n            } else {\n                Country.save(vm.country, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('cs499Assignment2App:countryUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('CountryMySuffixDetailController', CountryMySuffixDetailController);\n\n    CountryMySuffixDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Country', 'Region'];\n\n    function CountryMySuffixDetailController($scope, $rootScope, $stateParams, previousState, entity, Country, Region) {\n        var vm = this;\n\n        vm.country = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('cs499Assignment2App:countryUpdate', function(event, result) {\n            vm.country = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('CountryMySuffixDeleteController',CountryMySuffixDeleteController);\n\n    CountryMySuffixDeleteController.$inject = ['$uibModalInstance', 'entity', 'Country'];\n\n    function CountryMySuffixDeleteController($uibModalInstance, entity, Country) {\n        var vm = this;\n\n        vm.country = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Country.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('countrymySuffix', {\n            parent: 'entity',\n            url: '/countrymySuffix',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Countries'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/country/countriesmySuffix.html',\n                    controller: 'CountryMySuffixController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('countrymySuffix-detail', {\n            parent: 'entity',\n            url: '/countrymySuffix/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Country'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/country/countrymySuffix-detail.html',\n                    controller: 'CountryMySuffixDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Country', function($stateParams, Country) {\n                    return Country.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'countrymySuffix',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('countrymySuffix-detail.edit', {\n            parent: 'countrymySuffix-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/country/countrymySuffix-dialog.html',\n                    controller: 'CountryMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Country', function(Country) {\n                            return Country.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('countrymySuffix.new', {\n            parent: 'countrymySuffix',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/country/countrymySuffix-dialog.html',\n                    controller: 'CountryMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                countryName: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('countrymySuffix', null, { reload: 'countrymySuffix' });\n                }, function() {\n                    $state.go('countrymySuffix');\n                });\n            }]\n        })\n        .state('countrymySuffix.edit', {\n            parent: 'countrymySuffix',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/country/countrymySuffix-dialog.html',\n                    controller: 'CountryMySuffixDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Country', function(Country) {\n                            return Country.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('countrymySuffix', null, { reload: 'countrymySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('countrymySuffix.delete', {\n            parent: 'countrymySuffix',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/country/countrymySuffix-delete-dialog.html',\n                    controller: 'CountryMySuffixDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Country', function(Country) {\n                            return Country.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('countrymySuffix', null, { reload: 'countrymySuffix' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('CountryMySuffixController', CountryMySuffixController);\n\n    CountryMySuffixController.$inject = ['$scope', '$state', 'Country'];\n\n    function CountryMySuffixController ($scope, $state, Country) {\n        var vm = this;\n\n        vm.countries = [];\n\n        loadAll();\n\n        function loadAll() {\n            Country.query(function(result) {\n                vm.countries = result;\n                vm.searchQuery = null;\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n    angular\n        .module('cs499Assignment2App')\n        .factory('Country', Country);\n\n    Country.$inject = ['$resource'];\n\n    function Country ($resource) {\n        var resourceUrl =  'api/countries/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .filter('words', words);\n\n    function words() {\n        return wordsFilter;\n\n        function wordsFilter(input, words) {\n            if (isNaN(words)) {\n                return input;\n            }\n            if (words <= 0) {\n                return '';\n            }\n            if (input) {\n                var inputWords = input.split(/\\s+/);\n                if (inputWords.length > words) {\n                    input = inputWords.slice(0, words).join(' ') + '...';\n                }\n            }\n            return input;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .filter('characters', characters);\n\n    function characters () {\n        return charactersFilter;\n\n        function charactersFilter(input, chars, breakOnWord) {\n            if (isNaN(chars)) {\n                return input;\n            }\n            if (chars <= 0) {\n                return '';\n            }\n            if (input && input.length > chars) {\n                input = input.substring(0, chars);\n\n                if (!breakOnWord) {\n                    var lastspace = input.lastIndexOf(' ');\n                    // Get last space\n                    if (lastspace !== -1) {\n                        input = input.substr(0, lastspace);\n                    }\n                } else {\n                    while (input.charAt(input.length-1) === ' ') {\n                        input = input.substr(0, input.length - 1);\n                    }\n                }\n                return input + '...';\n            }\n            return input;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .directive('jhSortBy', jhSortBy);\n\n    function jhSortBy() {\n        var directive = {\n            restrict: 'A',\n            scope: false,\n            require: '^jhSort',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs, parentCtrl) {\n            element.bind('click', function () {\n                parentCtrl.sort(attrs.jhSortBy);\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .directive('jhSort', jhSort);\n\n    function jhSort () {\n        var directive = {\n            restrict: 'A',\n            scope: {\n                predicate: '=jhSort',\n                ascending: '=',\n                callback: '&'\n            },\n            controller: SortController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n    }\n\n    SortController.$inject = ['$scope', '$element'];\n\n    function SortController ($scope, $element) {\n        var vm = this;\n\n        vm.applyClass = applyClass;\n        vm.resetClasses = resetClasses;\n        vm.sort = sort;\n        vm.triggerApply = triggerApply;\n\n        $scope.$watchGroup(['vm.predicate', 'vm.ascending'], vm.triggerApply);\n        vm.triggerApply();\n\n        function applyClass (element) {\n            var thisIcon = element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt',\n                remove = sortIcon + ' ' + sortDesc,\n                add = sortAsc;\n            if (!vm.ascending) {\n                remove = sortIcon + ' ' + sortAsc;\n                add = sortDesc;\n            }\n            vm.resetClasses();\n            thisIcon.removeClass(remove);\n            thisIcon.addClass(add);\n        }\n\n        function resetClasses () {\n            var allThIcons = $element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt';\n            allThIcons.removeClass(sortAsc + ' ' + sortDesc);\n            allThIcons.addClass(sortIcon);\n        }\n\n        function sort (field) {\n            if (field !== vm.predicate) {\n                vm.ascending = true;\n            } else {\n                vm.ascending = !vm.ascending;\n            }\n            vm.predicate = field;\n            $scope.$apply();\n            vm.callback();\n        }\n\n        function triggerApply (values)  {\n            vm.resetClasses();\n            if (values && values[0] !== '_score') {\n                vm.applyClass($element.find('th[jh-sort-by=\\'' + values[0] + '\\']'));\n            }\n        }\n    }\n})();\n\n(function(){\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('ParseLinks', ParseLinks);\n\n    function ParseLinks () {\n\n        var service = {\n            parse : parse\n        };\n\n        return service;\n\n        function parse(header) {\n            if (header.length === 0) {\n                throw new Error('input must not be of zero length');\n            }\n\n            // Split parts by comma\n            var parts = header.split(',');\n            var links = {};\n            // Parse each part into a named link\n            angular.forEach(parts, function(p) {\n                var section = p.split('>;');\n                if (section.length !== 2) {\n                    throw new Error('section could not be split on \">;\"');\n                }\n                var url = section[0].replace(/<(.*)/, '$1').trim();\n                var queryString = {};\n                url.replace(\n                    new RegExp('([^?=&]+)(=([^&]*))?', 'g'),\n                    function($0, $1, $2, $3) { queryString[$1] = $3; }\n                );\n                var page = queryString.page;\n                if (angular.isString(page)) {\n                    page = parseInt(page);\n                }\n                var name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n                links[name] = page;\n            });\n            return links;\n        }\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('PaginationUtil', PaginationUtil);\n\n    function PaginationUtil () {\n\n        var service = {\n            parseAscending : parseAscending,\n            parsePage : parsePage,\n            parsePredicate : parsePredicate\n        };\n\n        return service;\n\n        function parseAscending (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                return sort.split(',').slice(-1)[0] === 'asc';\n            } else {\n                // default to true if no sort defined\n                return true;\n            }\n        }\n\n        // query params are strings, and need to be parsed\n        function parsePage (page) {\n            return parseInt(page);\n        }\n\n        // sort can be in the format `id,asc` or `id`\n        function parsePredicate (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                sortArray.pop();\n            }\n            return sortArray.join(',');\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    var jhiItemCount = {\n        template: '<div class=\"info\">' +\n                    'Showing {{(($ctrl.page - 1) * $ctrl.itemsPerPage) == 0 ? 1 : (($ctrl.page - 1) * $ctrl.itemsPerPage + 1)}} - ' +\n                    '{{($ctrl.page * $ctrl.itemsPerPage) < $ctrl.queryCount ? ($ctrl.page * $ctrl.itemsPerPage) : $ctrl.queryCount}} ' +\n                    'of {{$ctrl.queryCount}} items.' +\n                '</div>',\n        bindings: {\n            page: '<',\n            queryCount: '<total',\n            itemsPerPage: '<'\n        }\n    };\n\n    angular\n        .module('cs499Assignment2App')\n        .component('jhiItemCount', jhiItemCount);\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('DateUtils', DateUtils);\n\n    DateUtils.$inject = ['$filter'];\n\n    function DateUtils ($filter) {\n\n        var service = {\n            convertDateTimeFromServer : convertDateTimeFromServer,\n            convertLocalDateFromServer : convertLocalDateFromServer,\n            convertLocalDateToServer : convertLocalDateToServer,\n            dateformat : dateformat\n        };\n\n        return service;\n\n        function convertDateTimeFromServer (date) {\n            if (date) {\n                return new Date(date);\n            } else {\n                return null;\n            }\n        }\n\n        function convertLocalDateFromServer (date) {\n            if (date) {\n                var dateString = date.split('-');\n                return new Date(dateString[0], dateString[1] - 1, dateString[2]);\n            }\n            return null;\n        }\n\n        function convertLocalDateToServer (date) {\n            if (date) {\n                return $filter('date')(date, 'yyyy-MM-dd');\n            } else {\n                return null;\n            }\n        }\n\n        function dateformat () {\n            return 'yyyy-MM-dd';\n        }\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('DataUtils', DataUtils);\n\n    DataUtils.$inject = ['$window'];\n\n    function DataUtils ($window) {\n\n        var service = {\n            abbreviate: abbreviate,\n            byteSize: byteSize,\n            openFile: openFile,\n            toBase64: toBase64\n        };\n\n        return service;\n\n        function abbreviate (text) {\n            if (!angular.isString(text)) {\n                return '';\n            }\n            if (text.length < 30) {\n                return text;\n            }\n            return text ? (text.substring(0, 15) + '...' + text.slice(-10)) : '';\n        }\n\n        function byteSize (base64String) {\n            if (!angular.isString(base64String)) {\n                return '';\n            }\n\n            function endsWith(suffix, str) {\n                return str.indexOf(suffix, str.length - suffix.length) !== -1;\n            }\n\n            function paddingSize(base64String) {\n                if (endsWith('==', base64String)) {\n                    return 2;\n                }\n                if (endsWith('=', base64String)) {\n                    return 1;\n                }\n                return 0;\n            }\n\n            function size(base64String) {\n                return base64String.length / 4 * 3 - paddingSize(base64String);\n            }\n\n            function formatAsBytes(size) {\n                return size.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ') + ' bytes';\n            }\n\n            return formatAsBytes(size(base64String));\n        }\n\n        function openFile (type, data) {\n            $window.open('data:' + type + ';base64,' + data, '_blank', 'height=300,width=400');\n        }\n\n        function toBase64 (file, cb) {\n            var fileReader = new FileReader();\n            fileReader.readAsDataURL(file);\n            fileReader.onload = function (e) {\n                var base64Data = e.target.result.substr(e.target.result.indexOf('base64,') + 'base64,'.length);\n                cb(base64Data);\n            };\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .filter('capitalize', capitalize);\n\n    function capitalize() {\n        return capitalizeFilter;\n\n        function capitalizeFilter (input) {\n            if (input !== null) {\n                input = input.toLowerCase();\n                input = input.substring(0, 1).toUpperCase() + input.substring(1);\n            }\n            return input;\n        }\n    }\n})();\n\n(function() {\n    /*jshint bitwise: false*/\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('Base64', Base64);\n\n    function Base64 () {\n        var keyStr = 'ABCDEFGHIJKLMNOP' +\n            'QRSTUVWXYZabcdef' +\n            'ghijklmnopqrstuv' +\n            'wxyz0123456789+/' +\n            '=';\n\n        var service = {\n            decode : decode,\n            encode : encode\n        };\n\n        return service;\n\n        function encode (input) {\n            var output = '',\n                chr1, chr2, chr3,\n                enc1, enc2, enc3, enc4,\n                i = 0;\n\n            while (i < input.length) {\n                chr1 = input.charCodeAt(i++);\n                chr2 = input.charCodeAt(i++);\n                chr3 = input.charCodeAt(i++);\n\n                enc1 = chr1 >> 2;\n                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n                enc4 = chr3 & 63;\n\n                if (isNaN(chr2)) {\n                    enc3 = enc4 = 64;\n                } else if (isNaN(chr3)) {\n                    enc4 = 64;\n                }\n\n                output = output +\n                    keyStr.charAt(enc1) +\n                    keyStr.charAt(enc2) +\n                    keyStr.charAt(enc3) +\n                    keyStr.charAt(enc4);\n            }\n\n            return output;\n        }\n\n        function decode (input) {\n            var output = '',\n                chr1, chr2, chr3,\n                enc1, enc2, enc3, enc4,\n                i = 0;\n\n            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n            input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n            while (i < input.length) {\n                enc1 = keyStr.indexOf(input.charAt(i++));\n                enc2 = keyStr.indexOf(input.charAt(i++));\n                enc3 = keyStr.indexOf(input.charAt(i++));\n                enc4 = keyStr.indexOf(input.charAt(i++));\n\n                chr1 = (enc1 << 2) | (enc2 >> 4);\n                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n                chr3 = ((enc3 & 3) << 6) | enc4;\n\n                output = output + String.fromCharCode(chr1);\n\n                if (enc3 !== 64) {\n                    output = output + String.fromCharCode(chr2);\n                }\n                if (enc4 !== 64) {\n                    output = output + String.fromCharCode(chr3);\n                }\n            }\n\n            return output;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('LoginService', LoginService);\n\n    LoginService.$inject = ['$uibModal'];\n\n    function LoginService ($uibModal) {\n        var service = {\n            open: open\n        };\n\n        var modalInstance = null;\n        var resetModal = function () {\n            modalInstance = null;\n        };\n\n        return service;\n\n        function open () {\n            if (modalInstance !== null) return;\n            modalInstance = $uibModal.open({\n                animation: true,\n                templateUrl: 'app/components/login/login.html',\n                controller: 'LoginController',\n                controllerAs: 'vm'\n            });\n            modalInstance.result.then(\n                resetModal,\n                resetModal\n            );\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('LoginController', LoginController);\n\n    LoginController.$inject = ['$rootScope', '$state', '$timeout', 'Auth', '$uibModalInstance'];\n\n    function LoginController ($rootScope, $state, $timeout, Auth, $uibModalInstance) {\n        var vm = this;\n\n        vm.authenticationError = false;\n        vm.cancel = cancel;\n        vm.credentials = {};\n        vm.login = login;\n        vm.password = null;\n        vm.register = register;\n        vm.rememberMe = true;\n        vm.requestResetPassword = requestResetPassword;\n        vm.username = null;\n\n        $timeout(function (){angular.element('#username').focus();});\n\n        function cancel () {\n            vm.credentials = {\n                username: null,\n                password: null,\n                rememberMe: true\n            };\n            vm.authenticationError = false;\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function login (event) {\n            event.preventDefault();\n            Auth.login({\n                username: vm.username,\n                password: vm.password,\n                rememberMe: vm.rememberMe\n            }).then(function () {\n                vm.authenticationError = false;\n                $uibModalInstance.close();\n                if ($state.current.name === 'register' || $state.current.name === 'activate' ||\n                    $state.current.name === 'finishReset' || $state.current.name === 'requestReset') {\n                    $state.go('home');\n                }\n\n                $rootScope.$broadcast('authenticationSuccess');\n\n                // previousState was set in the authExpiredInterceptor before being redirected to login modal.\n                // since login is successful, go to stored previousState and clear previousState\n                if (Auth.getPreviousState()) {\n                    var previousState = Auth.getPreviousState();\n                    Auth.resetPreviousState();\n                    $state.go(previousState.name, previousState.params);\n                }\n            }).catch(function () {\n                vm.authenticationError = true;\n            });\n        }\n\n        function register () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('register');\n        }\n\n        function requestResetPassword () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('requestReset');\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .directive('showValidation', showValidation);\n\n    function showValidation () {\n        var directive = {\n            restrict: 'A',\n            require: 'form',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, formCtrl) {\n            element.find('.form-group').each(function() {\n                var $formGroup = angular.element(this);\n                var $inputs = $formGroup.find('input[ng-model],textarea[ng-model],select[ng-model]');\n\n                if ($inputs.length > 0) {\n                    $inputs.each(function() {\n                        var $input = angular.element(this);\n                        var inputName = $input.attr('name');\n                        scope.$watch(function() {\n                            return formCtrl[inputName].$invalid && formCtrl[inputName].$dirty;\n                        }, function(isInvalid) {\n                            $formGroup.toggleClass('has-error', isInvalid);\n                        });\n                    });\n                }\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .constant('paginationConstants', {\n            'itemsPerPage': 20\n        });\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .directive('minbytes', minbytes);\n\n    function minbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.minbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) >= attrs.minbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .directive('maxbytes', maxbytes);\n\n    function maxbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.maxbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) <= attrs.maxbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    var jhiAlertError = {\n        template: '<div class=\"alerts\" ng-cloak=\"\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre>{{ alert.msg }}</pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertErrorController\n    };\n\n    angular\n        .module('cs499Assignment2App')\n        .component('jhiAlertError', jhiAlertError);\n\n    jhiAlertErrorController.$inject = ['$scope', 'AlertService', '$rootScope'];\n\n    function jhiAlertErrorController ($scope, AlertService, $rootScope) {\n        var vm = this;\n\n        vm.alerts = [];\n\n        function addErrorAlert (message, key, data) {\n            vm.alerts.push(\n                AlertService.add(\n                    {\n                        type: 'danger',\n                        msg: message,\n                        timeout: 5000,\n                        toast: AlertService.isToast(),\n                        scoped: true\n                    },\n                    vm.alerts\n                )\n            );\n        }\n\n        var cleanHttpErrorListener = $rootScope.$on('cs499Assignment2App.httpError', function (event, httpResponse) {\n            var i;\n            event.stopPropagation();\n            switch (httpResponse.status) {\n            // connection refused, server not reachable\n            case 0:\n                addErrorAlert('Server not reachable','error.server.not.reachable');\n                break;\n\n            case 400:\n                var headers = Object.keys(httpResponse.headers()).filter(function (header) {\n                    return header.indexOf('app-error', header.length - 'app-error'.length) !== -1 || header.indexOf('app-params', header.length - 'app-params'.length) !== -1;\n                }).sort();\n                var errorHeader = httpResponse.headers(headers[0]);\n                var entityKey = httpResponse.headers(headers[1]);\n                if (errorHeader) {\n                    var entityName = entityKey;\n                    addErrorAlert(errorHeader, errorHeader, {entityName: entityName});\n                } else if (httpResponse.data && httpResponse.data.fieldErrors) {\n                    for (i = 0; i < httpResponse.data.fieldErrors.length; i++) {\n                        var fieldError = httpResponse.data.fieldErrors[i];\n                        // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n                        var convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n                        var fieldName = convertedField.charAt(0).toUpperCase() + convertedField.slice(1);\n                        addErrorAlert('Field ' + fieldName + ' cannot be empty', 'error.' + fieldError.message, {fieldName: fieldName});\n                    }\n                } else if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message, httpResponse.data.message, httpResponse.data);\n                } else {\n                    addErrorAlert(httpResponse.data);\n                }\n                break;\n\n            case 404:\n                addErrorAlert('Not found','error.url.not.found');\n                break;\n\n            default:\n                if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message);\n                } else {\n                    addErrorAlert(angular.toJson(httpResponse));\n                }\n            }\n        });\n\n        $scope.$on('$destroy', function () {\n            if(angular.isDefined(cleanHttpErrorListener) && cleanHttpErrorListener !== null){\n                cleanHttpErrorListener();\n                vm.alerts = [];\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .provider('AlertService', AlertService);\n\n    function AlertService () {\n        this.toast = false;\n        /*jshint validthis: true */\n        this.$get = getService;\n\n        this.showAsToast = function(isToast) {\n            this.toast = isToast;\n        };\n\n        getService.$inject = ['$timeout', '$sce'];\n\n        function getService ($timeout, $sce) {\n            var toast = this.toast,\n                alertId = 0, // unique id for each alert. Starts from 0.\n                alerts = [],\n                timeout = 5000; // default timeout\n\n            return {\n                factory: factory,\n                isToast: isToast,\n                add: addAlert,\n                closeAlert: closeAlert,\n                closeAlertByIndex: closeAlertByIndex,\n                clear: clear,\n                get: get,\n                success: success,\n                error: error,\n                info: info,\n                warning : warning\n            };\n\n            function isToast() {\n                return toast;\n            }\n\n            function clear() {\n                alerts = [];\n            }\n\n            function get() {\n                return alerts;\n            }\n\n            function success(msg, params, position) {\n                return this.add({\n                    type: 'success',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function error(msg, params, position) {\n                return this.add({\n                    type: 'danger',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function warning(msg, params, position) {\n                return this.add({\n                    type: 'warning',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function info(msg, params, position) {\n                return this.add({\n                    type: 'info',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function factory(alertOptions) {\n                var alert = {\n                    type: alertOptions.type,\n                    msg: $sce.trustAsHtml(alertOptions.msg),\n                    id: alertOptions.alertId,\n                    timeout: alertOptions.timeout,\n                    toast: alertOptions.toast,\n                    position: alertOptions.position ? alertOptions.position : 'top right',\n                    scoped: alertOptions.scoped,\n                    close: function (alerts) {\n                        return closeAlert(this.id, alerts);\n                    }\n                };\n                if(!alert.scoped) {\n                    alerts.push(alert);\n                }\n                return alert;\n            }\n\n            function addAlert(alertOptions, extAlerts) {\n                alertOptions.alertId = alertId++;\n                var that = this;\n                var alert = this.factory(alertOptions);\n                if (alertOptions.timeout && alertOptions.timeout > 0) {\n                    $timeout(function () {\n                        that.closeAlert(alertOptions.alertId, extAlerts);\n                    }, alertOptions.timeout);\n                }\n                return alert;\n            }\n\n            function closeAlert(id, extAlerts) {\n                var thisAlerts = extAlerts ? extAlerts : alerts;\n                return closeAlertByIndex(thisAlerts.map(function(e) { return e.id; }).indexOf(id), thisAlerts);\n            }\n\n            function closeAlertByIndex(index, thisAlerts) {\n                return thisAlerts.splice(index, 1);\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    var jhiAlert = {\n        template: '<div class=\"alerts\" ng-cloak=\"\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre ng-bind-html=\"alert.msg\"></pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertController\n    };\n\n    angular\n        .module('cs499Assignment2App')\n        .component('jhiAlert', jhiAlert);\n\n    jhiAlertController.$inject = ['$scope', 'AlertService'];\n\n    function jhiAlertController($scope, AlertService) {\n        var vm = this;\n\n        vm.alerts = AlertService.get();\n        $scope.$on('$destroy', function () {\n            vm.alerts = [];\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('notificationInterceptor', notificationInterceptor);\n\n    notificationInterceptor.$inject = ['$q', 'AlertService'];\n\n    function notificationInterceptor ($q, AlertService) {\n        var service = {\n            response: response\n        };\n\n        return service;\n\n        function response (response) {\n            var headers = Object.keys(response.headers()).filter(function (header) {\n                return header.indexOf('app-alert', header.length - 'app-alert'.length) !== -1 || header.indexOf('app-params', header.length - 'app-params'.length) !== -1;\n            }).sort();\n            var alertKey = response.headers(headers[0]);\n            if (angular.isString(alertKey)) {\n                AlertService.success(alertKey, { param : response.headers(headers[1])});\n            }\n            return response;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('errorHandlerInterceptor', errorHandlerInterceptor);\n\n    errorHandlerInterceptor.$inject = ['$q', '$rootScope'];\n\n    function errorHandlerInterceptor ($q, $rootScope) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError (response) {\n            if (!(response.status === 401 && (response.data === '' || (response.data.path && response.data.path.indexOf('/api/account') === 0 )))) {\n                $rootScope.$emit('cs499Assignment2App.httpError', response);\n            }\n            return $q.reject(response);\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('authExpiredInterceptor', authExpiredInterceptor);\n\n    authExpiredInterceptor.$inject = ['$rootScope', '$q', '$injector'];\n\n    function authExpiredInterceptor($rootScope, $q, $injector) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError(response) {\n            // If we have an unauthorized request we redirect to the login page\n            // Don't do this check on the account API to avoid infinite loop\n            if (response.status === 401 && angular.isDefined(response.data.path) && response.data.path.indexOf('/api/account') === -1) {\n                var Auth = $injector.get('Auth');\n                var to = $rootScope.toState;\n                var params = $rootScope.toStateParams;\n                Auth.logout();\n                if (to.name !== 'accessdenied') {\n                    Auth.storePreviousState(to.name, params);\n                }\n                var LoginService = $injector.get('LoginService');\n                LoginService.open();\n            }\n            return $q.reject(response);\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('stateHandler', stateHandler);\n\n    stateHandler.$inject = ['$rootScope', '$state', '$sessionStorage',  '$window',\n        'Auth', 'Principal', 'VERSION'];\n\n    function stateHandler($rootScope, $state, $sessionStorage,  $window,\n        Auth, Principal, VERSION) {\n        return {\n            initialize: initialize\n        };\n\n        function initialize() {\n            $rootScope.VERSION = VERSION;\n\n            var stateChangeStart = $rootScope.$on('$stateChangeStart', function (event, toState, toStateParams, fromState) {\n                $rootScope.toState = toState;\n                $rootScope.toStateParams = toStateParams;\n                $rootScope.fromState = fromState;\n\n                // Redirect to a state with an external URL (http://stackoverflow.com/a/30221248/1098564)\n                if (toState.external) {\n                    event.preventDefault();\n                    $window.open(toState.url, '_self');\n                }\n\n                if (Principal.isIdentityResolved()) {\n                    Auth.authorize();\n                }\n\n            });\n\n            var stateChangeSuccess = $rootScope.$on('$stateChangeSuccess',  function(event, toState, toParams, fromState, fromParams) {\n                var titleKey = 'cs499assignment2' ;\n\n                // Set the page title key to the one configured in state or use default one\n                if (toState.data.pageTitle) {\n                    titleKey = toState.data.pageTitle;\n                }\n                $window.document.title = titleKey;\n            });\n\n            $rootScope.$on('$destroy', function () {\n                if(angular.isDefined(stateChangeStart) && stateChangeStart !== null){\n                    stateChangeStart();\n                }\n                if(angular.isDefined(stateChangeSuccess) && stateChangeSuccess !== null){\n                    stateChangeSuccess();\n                }\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(paginationConfig);\n\n    paginationConfig.$inject = ['uibPaginationConfig', 'paginationConstants'];\n\n    function paginationConfig(uibPaginationConfig, paginationConstants) {\n        uibPaginationConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPaginationConfig.maxSize = 5;\n        uibPaginationConfig.boundaryLinks = true;\n        uibPaginationConfig.firstText = '«';\n        uibPaginationConfig.previousText = '‹';\n        uibPaginationConfig.nextText = '›';\n        uibPaginationConfig.lastText = '»';\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(pagerConfig);\n\n    pagerConfig.$inject = ['uibPagerConfig', 'paginationConstants'];\n\n    function pagerConfig(uibPagerConfig, paginationConstants) {\n        uibPagerConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPagerConfig.previousText = '«';\n        uibPagerConfig.nextText = '»';\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(localStorageConfig);\n\n    localStorageConfig.$inject = ['$localStorageProvider', '$sessionStorageProvider'];\n\n    function localStorageConfig($localStorageProvider, $sessionStorageProvider) {\n        $localStorageProvider.setKeyPrefix('jhi-');\n        $sessionStorageProvider.setKeyPrefix('jhi-');\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(httpConfig);\n\n    httpConfig.$inject = ['$urlRouterProvider', '$httpProvider', 'httpRequestInterceptorCacheBusterProvider', '$urlMatcherFactoryProvider'];\n\n    function httpConfig($urlRouterProvider, $httpProvider, httpRequestInterceptorCacheBusterProvider, $urlMatcherFactoryProvider) {\n        //Cache everything except rest api requests\n        httpRequestInterceptorCacheBusterProvider.setMatchlist([/.*api.*/, /.*protected.*/], true);\n\n        $urlRouterProvider.otherwise('/');\n\n        $httpProvider.interceptors.push('errorHandlerInterceptor');\n        $httpProvider.interceptors.push('authExpiredInterceptor');\n        $httpProvider.interceptors.push('notificationInterceptor');\n        // jhipster-needle-angularjs-add-interceptor JHipster will add new application http interceptor here\n\n        $urlMatcherFactoryProvider.type('boolean', {\n            name : 'boolean',\n            decode: function(val) { return val === true || val === 'true'; },\n            encode: function(val) { return val ? 1 : 0; },\n            equals: function(a, b) { return this.is(a) && a === b; },\n            is: function(val) { return [true,false,0,1].indexOf(val) >= 0; },\n            pattern: /bool|true|0|1/\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(compileServiceConfig);\n\n    compileServiceConfig.$inject = ['$compileProvider','DEBUG_INFO_ENABLED'];\n\n    function compileServiceConfig($compileProvider,DEBUG_INFO_ENABLED) {\n        // disable debug data on prod profile to improve performance\n        $compileProvider.debugInfoEnabled(DEBUG_INFO_ENABLED);\n\n        /*\n        If you wish to debug an application with this information\n        then you should open up a debug console in the browser\n        then call this method directly in this console:\n\n\t\tangular.reloadWithDebugInfo();\n\t\t*/\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(alertServiceConfig);\n\n    alertServiceConfig.$inject = ['AlertServiceProvider'];\n\n    function alertServiceConfig(AlertServiceProvider) {\n        // set below to true to make alerts look like toast\n        AlertServiceProvider.showAsToast(false);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('app', {\n            abstract: true,\n            views: {\n                'navbar@': {\n                    templateUrl: 'app/layouts/navbar/navbar.html',\n                    controller: 'NavbarController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                authorize: ['Auth',\n                    function (Auth) {\n                        return Auth.authorize();\n                    }\n                ]\n            }\n        });\n    }\n})();\n\n(function () {\n    'use strict';\n    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n    angular\n        .module('cs499Assignment2App')\n        .constant('VERSION', \"0.0.1-SNAPSHOT\")\n        .constant('DEBUG_INFO_ENABLED', false)\n;\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('UserManagementDialogController',UserManagementDialogController);\n\n    UserManagementDialogController.$inject = ['$stateParams', '$uibModalInstance', 'entity', 'User'];\n\n    function UserManagementDialogController ($stateParams, $uibModalInstance, entity, User) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.clear = clear;\n        vm.languages = null;\n        vm.save = save;\n        vm.user = entity;\n\n\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function onSaveSuccess (result) {\n            vm.isSaving = false;\n            $uibModalInstance.close(result);\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.user.id !== null) {\n                User.update(vm.user, onSaveSuccess, onSaveError);\n            } else {\n                vm.user.langKey = 'en';\n                User.save(vm.user, onSaveSuccess, onSaveError);\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('UserManagementDetailController', UserManagementDetailController);\n\n    UserManagementDetailController.$inject = ['$stateParams', 'User'];\n\n    function UserManagementDetailController ($stateParams, User) {\n        var vm = this;\n\n        vm.load = load;\n        vm.user = {};\n\n        vm.load($stateParams.login);\n\n        function load (login) {\n            User.get({login: login}, function(result) {\n                vm.user = result;\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('UserManagementDeleteController', UserManagementDeleteController);\n\n    UserManagementDeleteController.$inject = ['$uibModalInstance', 'entity', 'User'];\n\n    function UserManagementDeleteController ($uibModalInstance, entity, User) {\n        var vm = this;\n\n        vm.user = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (login) {\n            User.delete({login: login},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('user-management', {\n            parent: 'admin',\n            url: '/user-management?page&sort',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Users'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management.html',\n                    controller: 'UserManagementController',\n                    controllerAs: 'vm'\n                }\n            },            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                }\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort)\n                    };\n                }]\n            }        })\n        .state('user-management-detail', {\n            parent: 'admin',\n            url: '/user/:login',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'cs499assignment2'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management-detail.html',\n                    controller: 'UserManagementDetailController',\n                    controllerAs: 'vm'\n                }\n            }\n        })\n        .state('user-management.new', {\n            parent: 'user-management',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                id: null, login: null, firstName: null, lastName: null, email: null,\n                                activated: true, langKey: null, createdBy: null, createdDate: null,\n                                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                                resetKey: null, authorities: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('user-management');\n                });\n            }]\n        })\n        .state('user-management.edit', {\n            parent: 'user-management',\n            url: '/{login}/edit',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('user-management.delete', {\n            parent: 'user-management',\n            url: '/{login}/delete',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-delete-dialog.html',\n                    controller: 'UserManagementDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('UserManagementController', UserManagementController);\n\n    UserManagementController.$inject = ['Principal', 'User', 'ParseLinks', 'AlertService', '$state', 'pagingParams', 'paginationConstants'];\n\n    function UserManagementController(Principal, User, ParseLinks, AlertService, $state, pagingParams, paginationConstants) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.currentAccount = null;\n        vm.languages = null;\n        vm.loadAll = loadAll;\n        vm.setActive = setActive;\n        vm.users = [];\n        vm.page = 1;\n        vm.totalItems = null;\n        vm.clear = clear;\n        vm.links = null;\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n        vm.transition = transition;\n\n        vm.loadAll();\n        Principal.identity().then(function(account) {\n            vm.currentAccount = account;\n        });\n\n        function setActive (user, isActivated) {\n            user.activated = isActivated;\n            User.update(user, function () {\n                vm.loadAll();\n                vm.clear();\n            });\n        }\n\n        function loadAll () {\n            User.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n        }\n\n        function onSuccess(data, headers) {\n            //hide anonymous user from user management: it's a required user for Spring Security\n            var hiddenUsersSize = 0;\n            for (var i in data) {\n                if (data[i]['login'] === 'anonymoususer') {\n                    data.splice(i, 1);\n                    hiddenUsersSize++;\n                }\n            }\n            vm.links = ParseLinks.parse(headers('link'));\n            vm.totalItems = headers('X-Total-Count') - hiddenUsersSize;\n            vm.queryCount = vm.totalItems;\n            vm.page = pagingParams.page;\n            vm.users = data;\n        }\n\n        function onError(error) {\n            AlertService.error(error.data.message);\n        }\n\n        function clear () {\n            vm.user = {\n                id: null, login: null, firstName: null, lastName: null, email: null,\n                activated: null, langKey: null, createdBy: null, createdDate: null,\n                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                resetKey: null, authorities: null\n            };\n        }\n\n        function sort () {\n            var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n            if (vm.predicate !== 'id') {\n                result.push('id');\n            }\n            return result;\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition () {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-metrics', {\n            parent: 'admin',\n            url: '/metrics',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Application Metrics'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/metrics/metrics.html',\n                    controller: 'JhiMetricsMonitoringController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('JhiMetricsService', JhiMetricsService);\n\n    JhiMetricsService.$inject = ['$rootScope', '$http'];\n\n    function JhiMetricsService ($rootScope, $http) {\n        var service = {\n            getMetrics: getMetrics,\n            threadDump: threadDump\n        };\n\n        return service;\n\n        function getMetrics () {\n            return $http.get('management/metrics').then(function (response) {\n                return response.data;\n            });\n        }\n\n        function threadDump () {\n            return $http.get('management/dump').then(function (response) {\n                return response.data;\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('JhiMetricsMonitoringModalController', JhiMetricsMonitoringModalController);\n\n    JhiMetricsMonitoringModalController.$inject = ['$uibModalInstance', 'threadDump'];\n\n    function JhiMetricsMonitoringModalController ($uibModalInstance, threadDump) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.getLabelClass = getLabelClass;\n        vm.threadDump = threadDump;\n        vm.threadDumpAll = 0;\n        vm.threadDumpBlocked = 0;\n        vm.threadDumpRunnable = 0;\n        vm.threadDumpTimedWaiting = 0;\n        vm.threadDumpWaiting = 0;\n\n        angular.forEach(threadDump, function(value) {\n            if (value.threadState === 'RUNNABLE') {\n                vm.threadDumpRunnable += 1;\n            } else if (value.threadState === 'WAITING') {\n                vm.threadDumpWaiting += 1;\n            } else if (value.threadState === 'TIMED_WAITING') {\n                vm.threadDumpTimedWaiting += 1;\n            } else if (value.threadState === 'BLOCKED') {\n                vm.threadDumpBlocked += 1;\n            }\n        });\n\n        vm.threadDumpAll = vm.threadDumpRunnable + vm.threadDumpWaiting +\n            vm.threadDumpTimedWaiting + vm.threadDumpBlocked;\n\n        function cancel () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function getLabelClass (threadState) {\n            if (threadState === 'RUNNABLE') {\n                return 'label-success';\n            } else if (threadState === 'WAITING') {\n                return 'label-info';\n            } else if (threadState === 'TIMED_WAITING') {\n                return 'label-warning';\n            } else if (threadState === 'BLOCKED') {\n                return 'label-danger';\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('JhiMetricsMonitoringController', JhiMetricsMonitoringController);\n\n    JhiMetricsMonitoringController.$inject = ['$scope','JhiMetricsService', '$uibModal'];\n\n    function JhiMetricsMonitoringController ($scope, JhiMetricsService, $uibModal) {\n        var vm = this;\n\n        vm.metrics = {};\n        vm.refresh = refresh;\n        vm.refreshThreadDumpData = refreshThreadDumpData;\n        vm.servicesStats = {};\n        vm.updatingMetrics = true;\n\n        vm.refresh();\n\n        $scope.$watch('vm.metrics', function (newValue) {\n            vm.servicesStats = {};\n            angular.forEach(newValue.timers, function (value, key) {\n                if (key.indexOf('web.rest') !== -1 || key.indexOf('service') !== -1) {\n                    vm.servicesStats[key] = value;\n                }\n            });\n\n        });\n\n        function refresh () {\n            vm.updatingMetrics = true;\n            JhiMetricsService.getMetrics().then(function (promise) {\n                vm.metrics = promise;\n                vm.updatingMetrics = false;\n            }, function (promise) {\n                vm.metrics = promise.data;\n                vm.updatingMetrics = false;\n            });\n        }\n\n        function refreshThreadDumpData () {\n            JhiMetricsService.threadDump().then(function(data) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/metrics/metrics.modal.html',\n                    controller: 'JhiMetricsMonitoringModalController',\n                    controllerAs: 'vm',\n                    size: 'lg',\n                    resolve: {\n                        threadDump: function() {\n                            return data;\n                        }\n\n                    }\n                });\n            });\n        }\n\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('logs', {\n            parent: 'admin',\n            url: '/logs',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Logs'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/logs/logs.html',\n                    controller: 'LogsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('LogsService', LogsService);\n\n    LogsService.$inject = ['$resource'];\n\n    function LogsService ($resource) {\n        var service = $resource('management/logs', {}, {\n            'findAll': { method: 'GET', isArray: true},\n            'changeLevel': { method: 'PUT'}\n        });\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('LogsController', LogsController);\n\n    LogsController.$inject = ['LogsService'];\n\n    function LogsController (LogsService) {\n        var vm = this;\n\n        vm.changeLevel = changeLevel;\n        vm.loggers = LogsService.findAll();\n\n        function changeLevel (name, level) {\n            LogsService.changeLevel({name: name, level: level}, function () {\n                vm.loggers = LogsService.findAll();\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-health', {\n            parent: 'admin',\n            url: '/health',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Health Checks'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/health/health.html',\n                    controller: 'JhiHealthCheckController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('JhiHealthService', JhiHealthService);\n\n    JhiHealthService.$inject = ['$rootScope', '$http'];\n\n    function JhiHealthService ($rootScope, $http) {\n        var separator = '.';\n        var service = {\n            checkHealth: checkHealth,\n            transformHealthData: transformHealthData,\n            getBaseName: getBaseName,\n            getSubSystemName: getSubSystemName\n        };\n\n        return service;\n\n        function checkHealth () {\n            return $http.get('management/health').then(function (response) {\n                return response.data;\n            });\n        }\n\n        function transformHealthData (data) {\n            var response = [];\n            flattenHealthData(response, null, data);\n            return response;\n        }\n\n        function getBaseName (name) {\n            if (name) {\n                var split = name.split('.');\n                return split[0];\n            }\n        }\n\n        function getSubSystemName (name) {\n            if (name) {\n                var split = name.split('.');\n                split.splice(0, 1);\n                var remainder = split.join('.');\n                return remainder ? ' - ' + remainder : '';\n            }\n        }\n\n        /* private methods */\n        function flattenHealthData (result, path, data) {\n            angular.forEach(data, function (value, key) {\n                if (isHealthObject(value)) {\n                    if (hasSubSystem(value)) {\n                        addHealthObject(result, false, value, getModuleName(path, key));\n                        flattenHealthData(result, getModuleName(path, key), value);\n                    } else {\n                        addHealthObject(result, true, value, getModuleName(path, key));\n                    }\n                }\n            });\n            return result;\n        }\n\n        function addHealthObject (result, isLeaf, healthObject, name) {\n\n            var healthData = {\n                'name': name\n            };\n            var details = {};\n            var hasDetails = false;\n\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status' || key === 'error') {\n                    healthData[key] = value;\n                } else {\n                    if (!isHealthObject(value)) {\n                        details[key] = value;\n                        hasDetails = true;\n                    }\n                }\n            });\n\n            // Add the of the details\n            if (hasDetails) {\n                angular.extend(healthData, { 'details': details});\n            }\n\n            // Only add nodes if they provide additional information\n            if (isLeaf || hasDetails || healthData.error) {\n                result.push(healthData);\n            }\n            return healthData;\n        }\n\n        function getModuleName (path, name) {\n            var result;\n            if (path && name) {\n                result = path + separator + name;\n            }  else if (path) {\n                result = path;\n            } else if (name) {\n                result = name;\n            } else {\n                result = '';\n            }\n            return result;\n        }\n\n        function hasSubSystem (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value) {\n                if (value && value.status) {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n        function isHealthObject (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status') {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular.module('cs499Assignment2App')\n        .controller('HealthModalController', HealthModalController);\n\n    HealthModalController.$inject = ['$uibModalInstance', 'currentHealth', 'baseName', 'subSystemName'];\n\n    function HealthModalController ($uibModalInstance, currentHealth, baseName, subSystemName) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.currentHealth = currentHealth;\n        vm.baseName = baseName;\n        vm.subSystemName = subSystemName;\n\n        function cancel() {\n            $uibModalInstance.dismiss('cancel');\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('JhiHealthCheckController', JhiHealthCheckController);\n\n    JhiHealthCheckController.$inject = ['JhiHealthService', '$uibModal'];\n\n    function JhiHealthCheckController (JhiHealthService, $uibModal) {\n        var vm = this;\n\n        vm.updatingHealth = true;\n        vm.getLabelClass = getLabelClass;\n        vm.refresh = refresh;\n        vm.showHealth = showHealth;\n        vm.baseName = JhiHealthService.getBaseName;\n        vm.subSystemName = JhiHealthService.getSubSystemName;\n\n        vm.refresh();\n\n        function getLabelClass (statusState) {\n            if (statusState === 'UP') {\n                return 'label-success';\n            } else {\n                return 'label-danger';\n            }\n        }\n\n        function refresh () {\n            vm.updatingHealth = true;\n            JhiHealthService.checkHealth().then(function (response) {\n                vm.healthData = JhiHealthService.transformHealthData(response);\n                vm.updatingHealth = false;\n            }, function (response) {\n                vm.healthData =  JhiHealthService.transformHealthData(response.data);\n                vm.updatingHealth = false;\n            });\n        }\n\n        function showHealth (health) {\n            $uibModal.open({\n                templateUrl: 'app/admin/health/health.modal.html',\n                controller: 'HealthModalController',\n                controllerAs: 'vm',\n                size: 'lg',\n                resolve: {\n                    currentHealth: function() {\n                        return health;\n                    },\n                    baseName: function() {\n                        return vm.baseName;\n                    },\n                    subSystemName: function() {\n                        return vm.subSystemName;\n                    }\n\n                }\n            });\n        }\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('docs', {\n            parent: 'admin',\n            url: '/docs',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'API'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/docs/docs.html'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-configuration', {\n            parent: 'admin',\n            url: '/configuration',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Configuration'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/configuration/configuration.html',\n                    controller: 'JhiConfigurationController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('JhiConfigurationService', JhiConfigurationService);\n\n    JhiConfigurationService.$inject = ['$filter', '$http'];\n\n    function JhiConfigurationService ($filter, $http) {\n        var service = {\n            get: get,\n            getEnv: getEnv\n        };\n\n        return service;\n\n        function get () {\n            return $http.get('management/configprops').then(getConfigPropsComplete);\n\n            function getConfigPropsComplete (response) {\n                var properties = [];\n                angular.forEach(response.data, function (data) {\n                    properties.push(data);\n                });\n                var orderBy = $filter('orderBy');\n                return orderBy(properties, 'prefix');\n            }\n        }\n\n        function getEnv () {\n            return $http.get('management/env').then(getEnvComplete);\n\n            function getEnvComplete (response) {\n                var properties = {};\n                angular.forEach(response.data, function (val,key) {\n                    var vals = [];\n                    angular.forEach(val, function (v,k) {\n                        vals.push({ key:k, val:v });\n                    });\n                    properties[key] = vals;\n                });\n                return properties;\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('JhiConfigurationController', JhiConfigurationController);\n\n    JhiConfigurationController.$inject = ['$filter','JhiConfigurationService'];\n\n    function JhiConfigurationController (filter,JhiConfigurationService) {\n        var vm = this;\n\n        vm.allConfiguration = null;\n        vm.configuration = null;\n\n        JhiConfigurationService.get().then(function(configuration) {\n            vm.configuration = configuration;\n        });\n        JhiConfigurationService.getEnv().then(function (configuration) {\n            vm.allConfiguration = configuration;\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('audits', {\n            parent: 'admin',\n            url: '/audits',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Audits'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/audits/audits.html',\n                    controller: 'AuditsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .factory('AuditsService', AuditsService);\n\n    AuditsService.$inject = ['$resource'];\n\n    function AuditsService ($resource) {\n        var service = $resource('management/audits/:id', {}, {\n            'get': {\n                method: 'GET',\n                isArray: true\n            },\n            'query': {\n                method: 'GET',\n                isArray: true,\n                params: {fromDate: null, toDate: null}\n            }\n        });\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('AuditsController', AuditsController);\n\n    AuditsController.$inject = ['$filter', 'AuditsService', 'ParseLinks'];\n\n    function AuditsController ($filter, AuditsService, ParseLinks) {\n        var vm = this;\n\n        vm.audits = null;\n        vm.fromDate = null;\n        vm.links = null;\n        vm.loadPage = loadPage;\n        vm.onChangeDate = onChangeDate;\n        vm.page = 1;\n        vm.previousMonth = previousMonth;\n        vm.toDate = null;\n        vm.today = today;\n        vm.totalItems = null;\n\n        vm.today();\n        vm.previousMonth();\n        vm.onChangeDate();\n\n        function onChangeDate () {\n            var dateFormat = 'yyyy-MM-dd';\n            var fromDate = $filter('date')(vm.fromDate, dateFormat);\n            var toDate = $filter('date')(vm.toDate, dateFormat);\n\n            AuditsService.query({page: vm.page -1, size: 20, fromDate: fromDate, toDate: toDate}, function(result, headers){\n                vm.audits = result;\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n            });\n        }\n\n        // Date picker configuration\n        function today () {\n            // Today + 1 day - needed if the current day must be included\n            var today = new Date();\n            vm.toDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);\n        }\n\n        function previousMonth () {\n            var fromDate = new Date();\n            if (fromDate.getMonth() === 0) {\n                fromDate = new Date(fromDate.getFullYear() - 1, 11, fromDate.getDate());\n            } else {\n                fromDate = new Date(fromDate.getFullYear(), fromDate.getMonth() - 1, fromDate.getDate());\n            }\n\n            vm.fromDate = fromDate;\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.onChangeDate();\n        }\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('admin', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('settings', {\n            parent: 'account',\n            url: '/settings',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Settings'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/settings/settings.html',\n                    controller: 'SettingsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('SettingsController', SettingsController);\n\n    SettingsController.$inject = ['Principal', 'Auth'];\n\n    function SettingsController (Principal, Auth) {\n        var vm = this;\n\n        vm.error = null;\n        vm.save = save;\n        vm.settingsAccount = null;\n        vm.success = null;\n\n        /**\n         * Store the \"settings account\" in a separate variable, and not in the shared \"account\" variable.\n         */\n        var copyAccount = function (account) {\n            return {\n                activated: account.activated,\n                email: account.email,\n                firstName: account.firstName,\n                langKey: account.langKey,\n                lastName: account.lastName,\n                login: account.login\n            };\n        };\n\n        Principal.identity().then(function(account) {\n            vm.settingsAccount = copyAccount(account);\n        });\n\n        function save () {\n            Auth.updateAccount(vm.settingsAccount).then(function() {\n                vm.error = null;\n                vm.success = 'OK';\n                Principal.identity(true).then(function(account) {\n                    vm.settingsAccount = copyAccount(account);\n                });\n            }).catch(function() {\n                vm.success = null;\n                vm.error = 'ERROR';\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('sessions', {\n            parent: 'account',\n            url: '/sessions',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Sessions'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/sessions/sessions.html',\n                    controller: 'SessionsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('SessionsController', SessionsController);\n\n    SessionsController.$inject = ['Sessions', 'Principal'];\n\n    function SessionsController (Sessions, Principal) {\n        var vm = this;\n\n        vm.account = null;\n        vm.error = null;\n        vm.invalidate = invalidate;\n        vm.sessions = Sessions.getAll();\n        vm.success = null;\n\n\n        Principal.identity().then(function(account) {\n            vm.account = account;\n        });\n\n        function invalidate (series) {\n            Sessions.delete({series: encodeURIComponent(series)},\n                function () {\n                    vm.error = null;\n                    vm.success = 'OK';\n                    vm.sessions = Sessions.getAll();\n                },\n                function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('requestReset', {\n            parent: 'account',\n            url: '/reset/request',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/request/reset.request.html',\n                    controller: 'RequestResetController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('RequestResetController', RequestResetController);\n\n    RequestResetController.$inject = ['$timeout', 'Auth'];\n\n    function RequestResetController ($timeout, Auth) {\n        var vm = this;\n\n        vm.error = null;\n        vm.errorEmailNotExists = null;\n        vm.requestReset = requestReset;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#email').focus();});\n\n        function requestReset () {\n\n            vm.error = null;\n            vm.errorEmailNotExists = null;\n\n            Auth.resetPasswordInit(vm.resetAccount.email).then(function () {\n                vm.success = 'OK';\n            }).catch(function (response) {\n                vm.success = null;\n                if (response.status === 400 && response.data === 'e-mail address not registered') {\n                    vm.errorEmailNotExists = 'ERROR';\n                } else {\n                    vm.error = 'ERROR';\n                }\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('finishReset', {\n            parent: 'account',\n            url: '/reset/finish?key',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/finish/reset.finish.html',\n                    controller: 'ResetFinishController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('ResetFinishController', ResetFinishController);\n\n    ResetFinishController.$inject = ['$stateParams', '$timeout', 'Auth', 'LoginService'];\n\n    function ResetFinishController ($stateParams, $timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.keyMissing = angular.isUndefined($stateParams.key);\n        vm.confirmPassword = null;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.finishReset = finishReset;\n        vm.login = LoginService.open;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#password').focus();});\n\n        function finishReset() {\n            vm.doNotMatch = null;\n            vm.error = null;\n            if (vm.resetAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                Auth.resetPasswordFinish({key: $stateParams.key, newPassword: vm.resetAccount.password}).then(function () {\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('register', {\n            parent: 'account',\n            url: '/register',\n            data: {\n                authorities: [],\n                pageTitle: 'Registration'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/register/register.html',\n                    controller: 'RegisterController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('RegisterController', RegisterController);\n\n\n    RegisterController.$inject = [ '$timeout', 'Auth', 'LoginService'];\n\n    function RegisterController ($timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.errorUserExists = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        vm.registerAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#login').focus();});\n\n        function register () {\n            if (vm.registerAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.registerAccount.langKey =  'en' ;\n                vm.doNotMatch = null;\n                vm.error = null;\n                vm.errorUserExists = null;\n                vm.errorEmailExists = null;\n\n                Auth.createAccount(vm.registerAccount).then(function () {\n                    vm.success = 'OK';\n                }).catch(function (response) {\n                    vm.success = null;\n                    if (response.status === 400 && response.data === 'login already in use') {\n                        vm.errorUserExists = 'ERROR';\n                    } else if (response.status === 400 && response.data === 'e-mail address already in use') {\n                        vm.errorEmailExists = 'ERROR';\n                    } else {\n                        vm.error = 'ERROR';\n                    }\n                });\n            }\n        }\n    }\n})();\n\n/* globals $ */\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .directive('passwordStrengthBar', passwordStrengthBar);\n\n    function passwordStrengthBar () {\n        var directive = {\n            replace: true,\n            restrict: 'E',\n            template: '<div id=\"strength\">' +\n                '<small>Password strength:</small>' +\n                '<ul id=\"strengthBar\">' +\n                '<li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li>' +\n                '</ul>' +\n                '</div>',\n            scope: {\n                passwordToCheck: '='\n            },\n            link: linkFunc\n        };\n\n        return directive;\n\n        /* private helper methods*/\n\n        function linkFunc(scope, iElement) {\n            var strength = {\n                colors: ['#F00', '#F90', '#FF0', '#9F0', '#0F0'],\n                mesureStrength: function (p) {\n\n                    var _force = 0;\n                    var _regex = /[$-/:-?{-~!\"^_`\\[\\]]/g; // \"\n\n                    var _lowerLetters = /[a-z]+/.test(p);\n                    var _upperLetters = /[A-Z]+/.test(p);\n                    var _numbers = /[0-9]+/.test(p);\n                    var _symbols = _regex.test(p);\n\n                    var _flags = [_lowerLetters, _upperLetters, _numbers, _symbols];\n                    var _passedMatches = $.grep(_flags, function (el) {\n                        return el === true;\n                    }).length;\n\n                    _force += 2 * p.length + ((p.length >= 10) ? 1 : 0);\n                    _force += _passedMatches * 10;\n\n                    // penalty (short password)\n                    _force = (p.length <= 6) ? Math.min(_force, 10) : _force;\n\n                    // penalty (poor variety of characters)\n                    _force = (_passedMatches === 1) ? Math.min(_force, 10) : _force;\n                    _force = (_passedMatches === 2) ? Math.min(_force, 20) : _force;\n                    _force = (_passedMatches === 3) ? Math.min(_force, 40) : _force;\n\n                    return _force;\n\n                },\n                getColor: function (s) {\n\n                    var idx;\n                    if (s <= 10) {\n                        idx = 0;\n                    }\n                    else if (s <= 20) {\n                        idx = 1;\n                    }\n                    else if (s <= 30) {\n                        idx = 2;\n                    }\n                    else if (s <= 40) {\n                        idx = 3;\n                    }\n                    else {\n                        idx = 4;\n                    }\n\n                    return { idx: idx + 1, col: this.colors[idx] };\n                }\n            };\n            scope.$watch('passwordToCheck', function (password) {\n                if (password) {\n                    var c = strength.getColor(strength.mesureStrength(password));\n                    iElement.removeClass('ng-hide');\n                    iElement.find('ul').children('li')\n                        .css({ 'background-color': '#DDD' })\n                        .slice(0, c.idx)\n                        .css({ 'background-color': c.col });\n                }\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('password', {\n            parent: 'account',\n            url: '/password',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Password'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/password/password.html',\n                    controller: 'PasswordController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('PasswordController', PasswordController);\n\n    PasswordController.$inject = ['Auth', 'Principal'];\n\n    function PasswordController (Auth, Principal) {\n        var vm = this;\n\n        vm.changePassword = changePassword;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.success = null;\n\n        Principal.identity().then(function(account) {\n            vm.account = account;\n        });\n\n        function changePassword () {\n            if (vm.password !== vm.confirmPassword) {\n                vm.error = null;\n                vm.success = null;\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.doNotMatch = null;\n                Auth.changePassword(vm.password).then(function () {\n                    vm.error = null;\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('activate', {\n            parent: 'account',\n            url: '/activate?key',\n            data: {\n                authorities: [],\n                pageTitle: 'Activation'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/activate/activate.html',\n                    controller: 'ActivationController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .controller('ActivationController', ActivationController);\n\n    ActivationController.$inject = ['$stateParams', 'Auth', 'LoginService'];\n\n    function ActivationController ($stateParams, Auth, LoginService) {\n        var vm = this;\n\n        Auth.activateAccount({key: $stateParams.key}).then(function () {\n            vm.error = null;\n            vm.success = 'OK';\n        }).catch(function () {\n            vm.success = null;\n            vm.error = 'ERROR';\n        });\n\n        vm.login = LoginService.open;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cs499Assignment2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('account', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n(function(){angular.module('cs499Assignment2App').run(['$templateCache', function($templateCache) {$templateCache.put('app/home/home.html','<div ng-cloak><div class=\"row\"><div class=\"col-md-4\"><span class=\"hipster img-responsive img-rounded\"></span></div><div class=\"col-md-8\"><h1>Welcome, Java Hipster!</h1><p class=\"lead\">This is your homepage</p><div ng-switch=\"vm.isAuthenticated()\"><div class=\"alert alert-success\" ng-switch-when=\"true\">You are logged in as user \"{{vm.account.login}}\".</div><div class=\"alert alert-warning\" ng-switch-when=\"false\">If you want to <a class=\"alert-link\" href=\"\" ng-click=\"vm.login()\">sign in</a>, you can try the default accounts:<br>- Administrator (login=\"admin\" and password=\"admin\")<br>- User (login=\"user\" and password=\"user\").</div><div class=\"alert alert-warning\" ng-switch-when=\"false\">You don\\'t have an account yet? <a class=\"alert-link\" ui-sref=\"register\">Register a new account</a></div></div><p>If you have any question on JHipster:</p><ul><li><a href=\"http://jhipster.github.io/\" target=\"_blank\">JHipster homepage</a></li><li><a href=\"http://stackoverflow.com/tags/jhipster/info\" target=\"_blank\">JHipster on Stack Overflow</a></li><li><a href=\"https://github.com/jhipster/generator-jhipster/issues?state=open\" target=\"_blank\">JHipster bug tracker</a></li><li><a href=\"https://gitter.im/jhipster/generator-jhipster\" target=\"_blank\">JHipster public chat room</a></li><li><a href=\"https://twitter.com/java_hipster\" target=\"_blank\">follow @java_hipster on Twitter</a></li></ul><p><span>If you like JHipster, don\\'t forget to give us a star on </span>&nbsp;<a href=\"https://github.com/jhipster/generator-jhipster\" target=\"_blank\">Github</a>!</p></div></div></div>');\n$templateCache.put('app/admin/audits/audits.html','<div><h2>Audits</h2><div class=\"row\"><div class=\"col-md-5\"><h4>Filter by date</h4><p class=\"input-group\"><span class=\"input-group-addon\">from</span> <input type=\"date\" class=\"input-sm form-control\" name=\"start\" ng-model=\"vm.fromDate\" ng-change=\"vm.onChangeDate()\" required> <span class=\"input-group-addon\">to</span> <input type=\"date\" class=\"input-sm form-control\" name=\"end\" ng-model=\"vm.toDate\" ng-change=\"vm.onChangeDate()\" required></p></div></div><table class=\"table table-condensed table-striped table-bordered table-responsive\"><thead><tr><th ng-click=\"predicate = \\'timestamp\\'; reverse=!reverse\"><span>Date</span></th><th ng-click=\"predicate = \\'principal\\'; reverse=!reverse\"><span>User</span></th><th ng-click=\"predicate = \\'type\\'; reverse=!reverse\"><span>State</span></th><th ng-click=\"predicate = \\'data.message\\'; reverse=!reverse\"><span>Extra data</span></th></tr></thead><tr ng-repeat=\"audit in vm.audits | filter:filter | orderBy:predicate:reverse\" ng-hide=\"audit.filtered\"><td><span>{{audit.timestamp| date:\\'medium\\'}}</span></td><td><small>{{audit.principal}}</small></td><td>{{audit.type}}</td><td><span ng-show=\"audit.data.message\">{{audit.data.message}}</span> <span ng-show=\"audit.data.remoteAddress\"><span>Remote Address</span> {{audit.data.remoteAddress}}</span></td></tr></table><div class=\"text-center\"><uib-pagination class=\"pagination-sm\" total-items=\"vm.totalItems\" ng-model=\"vm.page\" ng-change=\"vm.loadPage(vm.page)\"></uib-pagination></div></div>');\n$templateCache.put('app/admin/configuration/configuration.html','<div><h2>Configuration</h2><span>Filter (by prefix)</span> <input type=\"text\" ng-model=\"filter\" class=\"form-control\"><label ng-hide=\"filteredConfig.length == 0\">Spring configuration</label><table class=\"table table-condensed table-striped table-bordered table-responsive\" style=\"table-layout:fixed\" ng-hide=\"filteredConfig.length == 0\"><thead><tr><th ng-click=\"predicate = \\'prefix\\'; reverse=!reverse\" class=\"col-sm-4\"><span>Prefix</span></th><th class=\"col-sm-8\">Properties</th></tr></thead><tr ng-repeat=\"entry in filtered = (vm.configuration | filter:filter | orderBy:predicate:reverse)\"><td><span>{{entry.prefix}}</span></td><td><div class=\"row\" ng-repeat=\"(key, value) in entry.properties\"><div class=\"col-md-4\">{{key}}</div><div class=\"col-md-8\"><span class=\"pull-right label label-default break\">{{value}}</span></div></div></td></tr></table><div ng-repeat=\"(key, value) in vm.allConfiguration\"><label ng-hide=\"filtered.length == 0\"><span>{{key}}</span></label><table class=\"table table-condensed table-striped table-bordered table-responsive\" style=\"table-layout:fixed\" ng-hide=\"filtered.length == 0\"><thead><tr><th class=\"col-sm-4\">Property</th><th class=\"col-sm-8\">Value</th></tr></thead><tbody><tr ng-repeat=\"item in filtered = (value | filter:filter)\"><td class=\"break\">{{item.key}}</td><td class=\"break\"><span class=\"pull-right label label-default break\">{{item.val}}</span></td></tr></tbody></table></div></div>');\n$templateCache.put('app/admin/docs/docs.html','<iframe src=\"swagger-ui/index.html\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\" width=\"100%\" height=\"900\" scrolling=\"auto\" target=\"_top\" title=\"Swagger UI\"></iframe>');\n$templateCache.put('app/admin/health/health.html','<div><h2>Health Checks</h2><p><button type=\"button\" class=\"btn btn-primary\" ng-click=\"vm.refresh()\"><span class=\"glyphicon glyphicon-refresh\"></span>&nbsp;<span>Refresh</span></button></p><table id=\"healthCheck\" class=\"table table-striped\"><thead><tr><th class=\"col-md-7\">Service Name</th><th class=\"col-md-2 text-center\">Status</th><th class=\"col-md-2 text-center\">Details</th></tr></thead><tbody><tr ng-repeat=\"health in vm.healthData\"><td><span class=\"text-capitalize\">{{ vm.baseName(health.name) }}</span> {{vm.subSystemName(health.name)}}</td><td class=\"text-center\"><span class=\"label\" ng-class=\"vm.getLabelClass(health.status)\">{{ health.status }}</span></td><td class=\"text-center\"><a class=\"hand\" ng-click=\"vm.showHealth(health)\" ng-show=\"health.details || health.error\"><i class=\"glyphicon glyphicon-eye-open\"></i></a></td></tr></tbody></table></div>');\n$templateCache.put('app/admin/health/health.modal.html','<div class=\"modal-header\"><button aria-label=\"Close\" data-dismiss=\"modal\" class=\"close\" type=\"button\" ng-click=\"vm.cancel()\"><span aria-hidden=\"true\">&times;</span></button><h4 class=\"modal-title\" id=\"showHealthLabel\"><span class=\"text-capitalize\">{{ vm.baseName(vm.currentHealth.name) }}</span> {{vm.subSystemName(vm.currentHealth.name)}}</h4></div><div class=\"modal-body pad\"><div ng-show=\"vm.currentHealth.details\"><h4>Properties</h4><table class=\"table table-striped\"><thead><tr><th class=\"col-md-6 text-left\">Name</th><th class=\"col-md-6 text-left\">Value</th></tr></thead><tbody><tr ng-repeat=\"(k,v) in vm.currentHealth.details\"><td class=\"col-md-6 text-left\">{{k}}</td><td class=\"col-md-6 text-left\">{{v}}</td></tr></tbody></table></div><div ng-show=\"vm.currentHealth.error\"><h4>Error</h4><pre>{{vm.currentHealth.error}}</pre></div></div><div class=\"modal-footer\"><button data-dismiss=\"modal\" class=\"btn btn-default pull-left\" type=\"button\" ng-click=\"vm.cancel()\">Done</button></div>');\n$templateCache.put('app/admin/logs/logs.html','<div class=\"table-responsive\"><h2>Logs</h2><p>There are {{ vm.loggers.length }} loggers.</p><span>Filter</span> <input type=\"text\" ng-model=\"filter\" class=\"form-control\"><table class=\"table table-condensed table-striped table-bordered\"><thead><tr title=\"click to order\"><th ng-click=\"predicate = \\'name\\'; reverse=!reverse\"><span>Name</span></th><th ng-click=\"predicate = \\'level\\'; reverse=!reverse\"><span>Level</span></th></tr></thead><tr ng-repeat=\"logger in vm.loggers | filter:filter | orderBy:predicate:reverse\"><td><small>{{logger.name | characters:140}}</small></td><td><button ng-click=\"vm.changeLevel(logger.name, \\'TRACE\\')\" ng-class=\"(logger.level==\\'TRACE\\') ? \\'btn-danger\\' : \\'btn-default\\'\" class=\"btn btn-default btn-xs\">TRACE</button> <button ng-click=\"vm.changeLevel(logger.name, \\'DEBUG\\')\" ng-class=\"(logger.level==\\'DEBUG\\') ? \\'btn-warning\\' : \\'btn-default\\'\" class=\"btn btn-default btn-xs\">DEBUG</button> <button ng-click=\"vm.changeLevel(logger.name, \\'INFO\\')\" ng-class=\"(logger.level==\\'INFO\\') ? \\'btn-info\\' : \\'btn-default\\'\" class=\"btn btn-default btn-xs\">INFO</button> <button ng-click=\"vm.changeLevel(logger.name, \\'WARN\\')\" ng-class=\"(logger.level==\\'WARN\\') ? \\'btn-success\\' : \\'btn-default\\'\" class=\"btn btn-default btn-xs\">WARN</button> <button ng-click=\"vm.changeLevel(logger.name, \\'ERROR\\')\" ng-class=\"(logger.level==\\'ERROR\\') ? \\'btn-primary\\' : \\'btn-default\\'\" class=\"btn btn-default btn-xs\">ERROR</button></td></tr></table></div>');\n$templateCache.put('app/admin/metrics/metrics.html','<div><h2>Application Metrics</h2><p><button type=\"button\" class=\"btn btn-primary\" ng-click=\"vm.refresh()\"><span class=\"glyphicon glyphicon-refresh\"></span>&nbsp;<span>Refresh</span></button></p><h3>JVM Metrics</h3><div class=\"row\" ng-hide=\"vm.updatingMetrics\"><div class=\"col-md-4\"><b>Memory</b><p><span>Total Memory</span> ({{vm.metrics.gauges[\\'jvm.memory.total.used\\'].value / 1000000 | number:0}}M / {{vm.metrics.gauges[\\'jvm.memory.total.max\\'].value / 1000000 | number:0}}M)</p><uib-progressbar min=\"0\" max=\"vm.metrics.gauges[\\'jvm.memory.total.max\\'].value\" value=\"vm.metrics.gauges[\\'jvm.memory.total.used\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'jvm.memory.total.used\\'].value * 100 / vm.metrics.gauges[\\'jvm.memory.total.max\\'].value | number:0}}%</span></uib-progressbar><p><span>Heap Memory</span> ({{vm.metrics.gauges[\\'jvm.memory.heap.used\\'].value / 1000000 | number:0}}M / {{vm.metrics.gauges[\\'jvm.memory.heap.max\\'].value / 1000000 | number:0}}M)</p><uib-progressbar min=\"0\" max=\"vm.metrics.gauges[\\'jvm.memory.heap.max\\'].value\" value=\"vm.metrics.gauges[\\'jvm.memory.heap.used\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'jvm.memory.heap.used\\'].value * 100 / vm.metrics.gauges[\\'jvm.memory.heap.max\\'].value | number:0}}%</span></uib-progressbar><p><span>Non-Heap Memory</span> ({{vm.metrics.gauges[\\'jvm.memory.non-heap.used\\'].value / 1000000 | number:0}}M / {{vm.metrics.gauges[\\'jvm.memory.non-heap.committed\\'].value / 1000000 | number:0}}M)</p><uib-progressbar min=\"0\" max=\"vm.metrics.gauges[\\'jvm.memory.non-heap.committed\\'].value\" value=\"vm.metrics.gauges[\\'jvm.memory.non-heap.used\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'jvm.memory.non-heap.used\\'].value * 100 / vm.metrics.gauges[\\'jvm.memory.non-heap.committed\\'].value | number:0}}%</span></uib-progressbar></div><div class=\"col-md-4\"><b>Threads</b> (Total: {{vm.metrics.gauges[\\'jvm.threads.count\\'].value}}) <a class=\"hand\" ng-click=\"vm.refreshThreadDumpData()\" data-toggle=\"modal\" data-target=\"#threadDump\"><i class=\"glyphicon glyphicon-eye-open\"></i></a><p><span>Runnable</span> {{vm.metrics.gauges[\\'jvm.threads.runnable.count\\'].value}}</p><uib-progressbar min=\"0\" value=\"vm.metrics.gauges[\\'jvm.threads.runnable.count\\'].value\" max=\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'jvm.threads.runnable.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar><p><span>Timed Waiting</span> ({{vm.metrics.gauges[\\'jvm.threads.timed_waiting.count\\'].value}})</p><uib-progressbar min=\"0\" value=\"vm.metrics.gauges[\\'jvm.threads.timed_waiting.count\\'].value\" max=\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\" class=\"progress-striped active\" type=\"warning\"><span>{{vm.metrics.gauges[\\'jvm.threads.timed_waiting.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar><p><span>Waiting</span> ({{vm.metrics.gauges[\\'jvm.threads.waiting.count\\'].value}})</p><uib-progressbar min=\"0\" value=\"vm.metrics.gauges[\\'jvm.threads.waiting.count\\'].value\" max=\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\" class=\"progress-striped active\" type=\"warning\"><span>{{vm.metrics.gauges[\\'jvm.threads.waiting.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar><p><span>Blocked</span> ({{vm.metrics.gauges[\\'jvm.threads.blocked.count\\'].value}})</p><uib-progressbar min=\"0\" value=\"vm.metrics.gauges[\\'jvm.threads.blocked.count\\'].value\" max=\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'jvm.threads.blocked.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar></div><div class=\"col-md-4\"><b>Garbage collections</b><div class=\"row\"><div class=\"col-md-9\">Mark Sweep count</div><div class=\"col-md-3 text-right\">{{vm.metrics.gauges[\\'jvm.garbage.PS-MarkSweep.count\\'].value}}</div></div><div class=\"row\"><div class=\"col-md-9\">Mark Sweep time</div><div class=\"col-md-3 text-right\">{{vm.metrics.gauges[\\'jvm.garbage.PS-MarkSweep.time\\'].value}}ms</div></div><div class=\"row\"><div class=\"col-md-9\">Scavenge count</div><div class=\"col-md-3 text-right\">{{vm.metrics.gauges[\\'jvm.garbage.PS-Scavenge.count\\'].value}}</div></div><div class=\"row\"><div class=\"col-md-9\">Scavenge time</div><div class=\"col-md-3 text-right\">{{vm.metrics.gauges[\\'jvm.garbage.PS-Scavenge.time\\'].value}}ms</div></div></div></div><div class=\"well well-lg\" ng-show=\"vm.updatingMetrics\">Updating...</div><h3>HTTP requests (events per second)</h3><p><span>Active requests</span> <b>{{vm.metrics.counters[\\'com.codahale.metrics.servlet.InstrumentedFilter.activeRequests\\'].count | number:0}}</b> - <span>Total requests</span> <b>{{vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count | number:0}}</b></p><div class=\"table-responsive\"><table class=\"table table-striped\"><thead><tr><th>Code</th><th>Count</th><th class=\"text-right\">Mean</th><th class=\"text-right\"><span>Average</span> (1 min)</th><th class=\"text-right\"><span>Average</span> (5 min)</th><th class=\"text-right\"><span>Average</span> (15 min)</th></tr></thead><tbody><tr><td>OK</td><td><uib-progressbar min=\"0\" max=\"vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count\" value=\"vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].count\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].count}}</span></uib-progressbar></td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].mean_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].m1_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].m5_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].m15_rate | number:2}}</td></tr><tr><td>Not Found</td><td><uib-progressbar min=\"0\" max=\"vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count\" value=\"vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].count\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].count}}</span></uib-progressbar></td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].mean_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].m1_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].m5_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].m15_rate | number:2}}</td></tr><tr><td>Server error</td><td><uib-progressbar min=\"0\" max=\"vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count\" value=\"vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].count\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].count}}</span></uib-progressbar></td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].mean_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].m1_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].m5_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].m15_rate | number:2}}</td></tr></tbody></table></div><h3>Services statistics (time in millisecond)</h3><div class=\"table-responsive\"><table class=\"table table-striped\"><thead><tr><th>Service name</th><th class=\"text-right\">Count</th><th class=\"text-right\">Mean</th><th class=\"text-right\">Min</th><th class=\"text-right\">p50</th><th class=\"text-right\">p75</th><th class=\"text-right\">p95</th><th class=\"text-right\">p99</th><th class=\"text-right\">Max</th></tr></thead><tbody><tr ng-repeat=\"(k, v) in vm.servicesStats\"><td>{{k}}</td><td class=\"text-right\">{{v.count}}</td><td class=\"text-right\">{{v.mean * 1000 | number:0}}</td><td class=\"text-right\">{{v.min * 1000 | number:0}}</td><td class=\"text-right\">{{v.p50 * 1000 | number:0}}</td><td class=\"text-right\">{{v.p75 * 1000 | number:0}}</td><td class=\"text-right\">{{v.p95 * 1000 | number:0}}</td><td class=\"text-right\">{{v.p99 * 1000 | number:0}}</td><td class=\"text-right\">{{v.max * 1000 | number:0}}</td></tr></tbody></table></div><h3 ng-show=\"vm.metrics.gauges[\\'HikariPool-1.pool.TotalConnections\\'].value > 0\">DataSource statistics (time in millisecond)</h3><div class=\"table-responsive\" ng-show=\"vm.metrics.gauges[\\'HikariPool-1.pool.TotalConnections\\'].value > 0\"><table class=\"table table-striped\"><thead><tr><th><span>Usage</span> ({{vm.metrics.gauges[\\'HikariPool-1.pool.ActiveConnections\\'].value}} / {{vm.metrics.gauges[\\'HikariPool-1.pool.TotalConnections\\'].value}})</th><th class=\"text-right\">Count</th><th class=\"text-right\">Mean</th><th class=\"text-right\">Min</th><th class=\"text-right\">p50</th><th class=\"text-right\">p75</th><th class=\"text-right\">p95</th><th class=\"text-right\">p99</th><th class=\"text-right\">Max</th></tr></thead><tbody><tr><td><div class=\"progress progress-striped\"><uib-progressbar min=\"0\" max=\"vm.metrics.gauges[\\'HikariPool-1.pool.TotalConnections\\'].value\" value=\"vm.metrics.gauges[\\'HikariPool-1.pool.ActiveConnections\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'HikariPool-1.pool.ActiveConnections\\'].value * 100 / vm.metrics.gauges[\\'HikariPool-1.pool.TotalConnections\\'].value | number:0}}%</span></uib-progressbar></div></td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].count}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].mean | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].min | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].p50 | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].p75 | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].p95 | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].p99 | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].max | number:2}}</td></tr></tbody></table></div></div>');\n$templateCache.put('app/admin/metrics/metrics.modal.html','<!-- Modal used to display the threads dump --><div class=\"modal-header\"><button type=\"button\" class=\"close\" ng-click=\"vm.cancel()\">&times;</button><h4 class=\"modal-title\">Threads dump</h4></div><div class=\"modal-body pad\"><span class=\"label label-primary\" ng-click=\"threadDumpFilter = {}\">All&nbsp;<span class=\"badge\">{{vm.threadDumpAll}}</span></span>&nbsp; <span class=\"label label-success\" ng-click=\"threadDumpFilter = {threadState: \\'RUNNABLE\\'}\">Runnable&nbsp;<span class=\"badge\">{{vm.threadDumpRunnable}}</span></span>&nbsp; <span class=\"label label-info\" ng-click=\"threadDumpFilter = {threadState: \\'WAITING\\'}\">Waiting&nbsp;<span class=\"badge\">{{vm.threadDumpWaiting}}</span></span>&nbsp; <span class=\"label label-warning\" ng-click=\"threadDumpFilter = {threadState: \\'TIMED_WAITING\\'}\">Timed Waiting&nbsp;<span class=\"badge\">{{vm.threadDumpTimedWaiting}}</span></span>&nbsp; <span class=\"label label-danger\" ng-click=\"threadDumpFilter = {threadState: \\'BLOCKED\\'}\">Blocked&nbsp;<span class=\"badge\">{{vm.threadDumpBlocked}}</span></span>&nbsp;<div class=\"voffset2\">&nbsp;</div>Filter <input type=\"text\" ng-model=\"threadDumpFilter\" class=\"form-control\"><div class=\"row pad\" ng-repeat=\"(k, v) in vm.threadDump | filter:threadDumpFilter\"><h5><span class=\"label\" ng-class=\"vm.getLabelClass(v.threadState)\">{{v.threadState}}</span>&nbsp;{{v.threadName}} (ID {{v.threadId}}) <a ng-click=\"show = !show\"><span ng-show=\"!show\">Show StackTrace</span> <span ng-show=\"show\">Hide StackTrace</span></a></h5><div class=\"well\" ng-show=\"show\"><div ng-repeat=\"(stK, stV) in v.stackTrace\">{{stV.className}}.{{stV.methodName}}({{stV.fileName}}:{{stV.lineNumber}}) <span class=\"voffset1\"></span></div></div><table class=\"table table-condensed\"><thead><tr><th class=\"text-right\">Blocked Time</th><th class=\"text-right\">Blocked Count</th><th class=\"text-right\">Waited Time</th><th class=\"text-right\">Waited Count</th><th>Lock Name</th></tr></thead><tbody><tr><td>{{v.blockedTime}}</td><td>{{v.blockedCount}}</td><td>{{v.waitedTime}}</td><td>{{v.waitedCount}}</td><td>{{v.lockName}}</td></tr></tbody></table></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default pull-left\" data-dismiss=\"modal\" ng-click=\"vm.cancel()\">Done</button></div>');\n$templateCache.put('app/admin/user-management/user-management-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.user.login)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this User?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/admin/user-management/user-management-detail.html','<div><h2><span>User</span> \"{{vm.user.login}}\"</h2><dl class=\"dl-horizontal\"><dt><span>Login</span></dt><dd><span>{{vm.user.login}}</span></dd><dt><span>First Name</span></dt><dd>{{vm.user.firstName}}</dd><dt><span>Last Name</span></dt><dd>{{vm.user.lastName}}</dd><dt><span>Email</span></dt><dd>{{vm.user.email}}</dd><dt><span>Activated</span></dt><dd>{{vm.user.activated}}</dd><dt><span>Created By</span></dt><dd>{{vm.user.createdBy}}</dd><dt><span>Created Date</span></dt><dd>{{vm.user.createdDate | date:\\'dd/MM/yy HH:mm\\' }}</dd><dt><span>Last Modified By</span></dt><dd>{{vm.user.lastModifiedBy}}</dd><dt><span>Last Modified Date</span></dt><dd>{{vm.user.lastModifiedDate | date:\\'dd/MM/yy HH:mm\\'}}</dd><dt><span>Profiles</span></dt><dd><ul class=\"list-unstyled\"><li ng-repeat=\"authority in vm.user.authorities\"><span>{{authority}}</span></li></ul></dd></dl><button type=\"submit\" ui-sref=\"user-management\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button></div>');\n$templateCache.put('app/admin/user-management/user-management-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myUserLabel\">Create or edit a User</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\"><label>ID</label><input type=\"text\" class=\"form-control\" name=\"id\" ng-model=\"vm.user.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\">Login</label><input type=\"text\" class=\"form-control\" name=\"login\" ng-model=\"vm.user.login\" ng-required=\"vm.user.id == null\" ng-minlength=\"1\" ng-maxlength=\"50\" ng-pattern=\"/^[_\\'.@A-Za-z0-9-]*$/\"><div ng-show=\"editForm.login.$invalid\"><p class=\"help-block\" ng-show=\"editForm.login.$error.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.login.$error.maxlength\">This field cannot be longer than 50 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\">First Name</label><input type=\"text\" class=\"form-control\" name=\"firstName\" ng-model=\"vm.user.firstName\" ng-maxlength=\"50\"><div ng-show=\"editForm.firstName.$invalid\"><p class=\"help-block\" ng-show=\"editForm.firstName.$error.maxlength\">This field cannot be longer than 50 characters.</p></div></div><div class=\"form-group\"><label>Last Name</label><input type=\"text\" class=\"form-control\" name=\"lastName\" ng-model=\"vm.user.lastName\" ng-maxlength=\"50\"><div ng-show=\"editForm.lastName.$invalid\"><p class=\"help-block\" ng-show=\"editForm.lastName.$error.maxlength\">This field cannot be longer than 50 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\">Email</label><input type=\"email\" class=\"form-control\" name=\"email\" ng-model=\"vm.user.email\" required ng-maxlength=\"100\"><div ng-show=\"editForm.email.$invalid\"><p class=\"help-block\" ng-show=\"editForm.email.$error.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.email.$error.maxlength\">This field cannot be longer than 100 characters.</p><p class=\"help-block\" ng-show=\"editForm.email.$error.email\">Your e-mail is invalid.</p></div></div><div class=\"form-group\"><label for=\"activated\"><input ng-disabled=\"vm.user.id === null\" type=\"checkbox\" id=\"activated\" name=\"activated\" ng-model=\"vm.user.activated\"> <span>Activated</span></label></div><div class=\"form-group\"><label>Profiles</label><select class=\"form-control\" multiple=\"multiple\" name=\"authority\" ng-model=\"vm.user.authorities\" ng-options=\"authority for authority in vm.authorities\"></select></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/admin/user-management/user-management.html','<div><h2>Users</h2><jhi-alert></jhi-alert><div class=\"row\"><div class=\"col-md-4\"><button class=\"btn btn-primary\" ui-sref=\"user-management.new\"><span class=\"glyphicon glyphicon-flash\"></span> <span>Create a new User</span></button></div></div><div class=\"table-responsive\"><table class=\"table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span>ID</span><span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"login\"><span>Login</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"email\"><span>Email</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th><th><span>Profiles</span></th><th jh-sort-by=\"createdDate\"><span>Created Date</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"lastModifiedBy\"><span>Last Modified By</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"lastModifiedDate\"><span>Last Modified Date</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"user in vm.users track by user.id\"><td><a ui-sref=\"user-management-detail({login:user.login})\">{{user.id}}</a></td><td>{{user.login}}</td><td>{{user.email}}</td><td><span class=\"label label-danger\" ng-click=\"vm.setActive(user, true)\" ng-show=\"!user.activated\" style=\"cursor: pointer\">Deactivated</span> <span class=\"label label-success\" ng-click=\"vm.setActive(user, false)\" ng-show=\"user.activated\" style=\"cursor: pointer\">Activated</span></td><td><div ng-repeat=\"authority in user.authorities\"><span class=\"label label-info\">{{ authority }}</span></div></td><td>{{user.createdDate | date:\\'dd/MM/yy HH:mm\\'}}</td><td>{{user.lastModifiedBy}}</td><td>{{user.lastModifiedDate | date:\\'dd/MM/yy HH:mm\\'}}</td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"user-management-detail({login:user.login})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"user-management.edit({login:user.login})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"user-management.delete({login:user.login})\" class=\"btn btn-danger btn-sm\" ng-disabled=\"vm.currentAccount.login==user.login\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-xs hidden-sm\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count><uib-pagination class=\"pagination-sm\" total-items=\"vm.totalItems\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pagination></div></div>');\n$templateCache.put('app/account/activate/activate.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h1>Activation</h1><div class=\"alert alert-success\" ng-show=\"vm.success\"><strong>Your user has been activated.</strong> Please <a class=\"alert-link\" href=\"\" ng-click=\"vm.login()\">sign in</a>.</div><div class=\"alert alert-danger\" ng-show=\"vm.error\"><strong>Your user could not be activated.</strong> Please use the registration form to sign up.</div></div></div></div>');\n$templateCache.put('app/account/password/password.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h2>Password for [<b>{{vm.account.login}}</b>]</h2><div class=\"alert alert-success\" ng-show=\"vm.success\"><strong>Password changed!</strong></div><div class=\"alert alert-danger\" ng-show=\"vm.error\"><strong>An error has occurred!</strong> The password could not be changed.</div><div class=\"alert alert-danger\" ng-show=\"vm.doNotMatch\">The password and its confirmation do not match!</div><form name=\"form\" role=\"form\" novalidate ng-submit=\"vm.changePassword()\" show-validation><div class=\"form-group\"><label class=\"control-label\" for=\"password\">New password</label><input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" placeholder=\"New password\" ng-model=\"vm.password\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.password.$dirty && form.password.$invalid\"><p class=\"help-block\" ng-show=\"form.password.$error.required\">Your password is required.</p><p class=\"help-block\" ng-show=\"form.password.$error.minlength\">Your password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.password.$error.maxlength\">Your password cannot be longer than 50 characters.</p></div><password-strength-bar password-to-check=\"vm.password\"></password-strength-bar></div><div class=\"form-group\"><label class=\"control-label\" for=\"confirmPassword\">New password confirmation</label><input type=\"password\" class=\"form-control\" id=\"confirmPassword\" name=\"confirmPassword\" placeholder=\"Confirm the new password\" ng-model=\"vm.confirmPassword\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\"><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.required\">Your confirmation password is required.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.minlength\">Your confirmation password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.maxlength\">Your confirmation password cannot be longer than 50 characters.</p></div></div><button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-primary\">Save</button></form></div></div></div>');\n$templateCache.put('app/account/register/register.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h1>Registration</h1><div class=\"alert alert-success\" ng-show=\"vm.success\"><strong>Registration saved!</strong> Please check your email for confirmation.</div><div class=\"alert alert-danger\" ng-show=\"vm.error\"><strong>Registration failed!</strong> Please try again later.</div><div class=\"alert alert-danger\" ng-show=\"vm.errorUserExists\"><strong>Login name already registered!</strong> Please choose another one.</div><div class=\"alert alert-danger\" ng-show=\"vm.errorEmailExists\"><strong>E-mail is already in use!</strong> Please choose another one.</div><div class=\"alert alert-danger\" ng-show=\"vm.doNotMatch\">The password and its confirmation do not match!</div></div><div class=\"col-md-8 col-md-offset-2\"><form ng-show=\"!vm.success\" name=\"form\" role=\"form\" novalidate ng-submit=\"vm.register()\" show-validation><div class=\"form-group\"><label class=\"control-label\" for=\"login\">Username</label><input type=\"text\" class=\"form-control\" id=\"login\" name=\"login\" placeholder=\"Your username\" ng-model=\"vm.registerAccount.login\" ng-minlength=\"1\" ng-maxlength=\"50\" ng-pattern=\"/^[_\\'.@A-Za-z0-9-]*$/\" required><div ng-show=\"form.login.$dirty && form.login.$invalid\"><p class=\"help-block\" ng-show=\"form.login.$error.required\">Your username is required.</p><p class=\"help-block\" ng-show=\"form.login.$error.minlength\">Your username is required to be at least 1 character.</p><p class=\"help-block\" ng-show=\"form.login.$error.maxlength\">Your username cannot be longer than 50 characters.</p><p class=\"help-block\" ng-show=\"form.login.$error.pattern\">Your username can only contain lower-case letters and digits.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"email\">E-mail</label><input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" placeholder=\"Your e-mail\" ng-model=\"vm.registerAccount.email\" ng-minlength=\"5\" ng-maxlength=\"100\" required><div ng-show=\"form.email.$dirty && form.email.$invalid\"><p class=\"help-block\" ng-show=\"form.email.$error.required\">Your e-mail is required.</p><p class=\"help-block\" ng-show=\"form.email.$error.email\">Your e-mail is invalid.</p><p class=\"help-block\" ng-show=\"form.email.$error.minlength\">Your e-mail is required to be at least 5 characters.</p><p class=\"help-block\" ng-show=\"form.email.$error.maxlength\">Your e-mail cannot be longer than 100 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"password\">New password</label><input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" placeholder=\"New password\" ng-model=\"vm.registerAccount.password\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.password.$dirty && form.password.$invalid\"><p class=\"help-block\" ng-show=\"form.password.$error.required\">Your password is required.</p><p class=\"help-block\" ng-show=\"form.password.$error.minlength\">Your password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.password.$error.maxlength\">Your password cannot be longer than 50 characters.</p></div><password-strength-bar password-to-check=\"vm.registerAccount.password\"></password-strength-bar></div><div class=\"form-group\"><label class=\"control-label\" for=\"confirmPassword\">New password confirmation</label><input type=\"password\" class=\"form-control\" id=\"confirmPassword\" name=\"confirmPassword\" placeholder=\"Confirm the new password\" ng-model=\"vm.confirmPassword\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\"><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.required\">Your confirmation password is required.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.minlength\">Your confirmation password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.maxlength\">Your confirmation password cannot be longer than 50 characters.</p></div></div><button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-primary\">Register</button></form><p></p><div class=\"alert alert-warning\">If you want to <a class=\"alert-link\" href=\"\" ng-click=\"vm.login()\">sign in</a>, you can try the default accounts:<br>- Administrator (login=\"admin\" and password=\"admin\")<br>- User (login=\"user\" and password=\"user\").</div></div></div></div>');\n$templateCache.put('app/account/sessions/sessions.html','<div><h2>Active sessions for [<b>{{vm.account.login}}</b>]</h2><div class=\"alert alert-success\" ng-show=\"vm.success\"><strong>Session invalidated!</strong></div><div class=\"alert alert-danger\" ng-show=\"vm.error\"><strong>An error has occured!</strong> The session could not be invalidated.</div><div class=\"table-responsive\"><table class=\"table table-striped\"><thead><tr><th>IP Address</th><th>User agent</th><th>Date</th><th></th></tr></thead><tbody><tr ng-repeat=\"session in vm.sessions\"><td>{{session.ipAddress}}</td><td>{{session.userAgent}}</td><td>{{session.tokenDate | date:\\'longDate\\'}}</td><td><button type=\"submit\" class=\"btn btn-primary\" ng-click=\"vm.invalidate(session.series)\">Invalidate</button></td></tr></tbody></table></div></div>');\n$templateCache.put('app/account/settings/settings.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h2>User settings for [<b>{{vm.settingsAccount.login}}</b>]</h2><div class=\"alert alert-success\" ng-show=\"vm.success\"><strong>Settings saved!</strong></div><jhi-alert-error></jhi-alert-error><form name=\"form\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"form-group\"><label class=\"control-label\" for=\"firstName\">First Name</label><input type=\"text\" class=\"form-control\" id=\"firstName\" name=\"firstName\" placeholder=\"Your first name\" ng-model=\"vm.settingsAccount.firstName\" ng-minlength=\"1\" ng-maxlength=\"50\" required maxlength=\"50\"><div ng-show=\"form.firstName.$dirty && form.firstName.$invalid\"><p class=\"help-block\" ng-show=\"form.firstName.$error.required\">Your first name is required.</p><p class=\"help-block\" ng-show=\"form.firstName.$error.minlength\">Your first name is required to be at least 1 character.</p><p class=\"help-block\" ng-show=\"form.firstName.$error.maxlength\">Your first name cannot be longer than 50 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"lastName\">Last Name</label><input type=\"text\" class=\"form-control\" id=\"lastName\" name=\"lastName\" placeholder=\"Your last name\" ng-model=\"vm.settingsAccount.lastName\" ng-minlength=\"1\" ng-maxlength=\"50\" required maxlength=\"50\"><div ng-show=\"form.lastName.$dirty && form.lastName.$invalid\"><p class=\"help-block\" ng-show=\"form.lastName.$error.required\">Your last name is required.</p><p class=\"help-block\" ng-show=\"form.lastName.$error.minlength\">Your last name is required to be at least 1 character.</p><p class=\"help-block\" ng-show=\"form.lastName.$error.maxlength\">Your last name cannot be longer than 50 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"email\">E-mail</label><input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" placeholder=\"Your e-mail\" ng-model=\"vm.settingsAccount.email\" ng-minlength=\"5\" ng-maxlength=\"100\" required maxlength=\"100\"><div ng-show=\"form.email.$dirty && form.email.$invalid\"><p class=\"help-block\" ng-show=\"form.email.$error.required\">Your e-mail is required.</p><p class=\"help-block\" ng-show=\"form.email.$error.email\">Your e-mail is invalid.</p><p class=\"help-block\" ng-show=\"form.email.$error.minlength\">Your e-mail is required to be at least 5 characters.</p><p class=\"help-block\" ng-show=\"form.email.$error.maxlength\">Your e-mail cannot be longer than 100 characters.</p></div></div><button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-primary\">Save</button></form></div></div></div>');\n$templateCache.put('app/components/login/login.html','<div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.cancel()\">&times;</button><h4 class=\"modal-title\">Sign in</h4></div><div class=\"modal-body\"><div class=\"row\"><div class=\"col-md-4 col-md-offset-4\"><h1>Sign in</h1></div><div class=\"col-md-8 col-md-offset-2\"><div class=\"alert alert-danger\" ng-show=\"vm.authenticationError\"><strong>Failed to sign in!</strong> Please check your credentials and try again.</div></div><div class=\"col-md-8 col-md-offset-2\"><form class=\"form\" role=\"form\" ng-submit=\"vm.login($event)\"><div class=\"form-group\"><label for=\"username\">Login</label><input type=\"text\" class=\"form-control\" id=\"username\" placeholder=\"Your username\" ng-model=\"vm.username\"></div><div class=\"form-group\"><label for=\"password\">Password</label><input type=\"password\" class=\"form-control\" id=\"password\" placeholder=\"Your password\" ng-model=\"vm.password\"></div><div class=\"form-group\"><label for=\"rememberMe\"><input type=\"checkbox\" id=\"rememberMe\" ng-model=\"vm.rememberMe\" checked=\"checked\"> <span>Remember me</span></label></div><button type=\"submit\" class=\"btn btn-primary\">Sign in</button></form><p></p><div class=\"alert alert-warning\"><a class=\"alert-link\" href=\"\" ng-click=\"vm.requestResetPassword()\">Did you forget your password?</a></div><div class=\"alert alert-warning\">You don\\'t have an account yet? <a class=\"alert-link\" href=\"\" ng-click=\"vm.register()\">Register a new account</a></div></div></div></div>');\n$templateCache.put('app/entities/country/countriesmySuffix.html','<div><h2>Countries</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"countrymySuffix.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span>Create new Country</span></button></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr><th><span>ID</span></th><th><span>Country Name</span></th><th><span>Region</span></th><th></th></tr></thead><tbody><tr ng-repeat=\"country in vm.countries track by country.id\"><td><a ui-sref=\"countrymySuffix-detail({id:country.id})\">{{country.id}}</a></td><td>{{country.countryName}}</td><td><a ui-sref=\"regionmySuffix-detail({id:country.regionId})\">{{country.regionId}}</a></td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"countrymySuffix-detail({id:country.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"countrymySuffix.edit({id:country.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"countrymySuffix.delete({id:country.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-xs hidden-sm\"></span></button></div></td></tr></tbody></table></div></div>');\n$templateCache.put('app/entities/country/countrymySuffix-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.country.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Country?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/country/countrymySuffix-detail.html','<div><h2><span>Country</span> {{vm.country.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span>Country Name</span></dt><dd><span>{{vm.country.countryName}}</span></dd><dt><span>Region</span></dt><dd><a ui-sref=\"regionmySuffix-detail({id:vm.country.regionId})\">{{vm.country.regionId}}</a></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"countrymySuffix-detail.edit({id:vm.country.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\">Edit</span></button></div>');\n$templateCache.put('app/entities/country/countrymySuffix-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myCountryLabel\">Create or edit a Country</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.country.id\"><label for=\"id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.country.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_countryName\">Country Name</label><input type=\"text\" class=\"form-control\" name=\"countryName\" id=\"field_countryName\" ng-model=\"vm.country.countryName\"></div><div class=\"form-group\"><label for=\"field_region\">Region</label><select class=\"form-control\" id=\"field_region\" name=\"region\" ng-model=\"vm.country.regionId\" ng-options=\"region.id as region.id for region in vm.regions | orderBy:\\'id\\'\"><option value=\"\"></option></select></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/entities/department/departmentmySuffix-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.department.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Department?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/department/departmentmySuffix-detail.html','<div><h2><span>Department</span> {{vm.department.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span>Department Name</span></dt><dd><span>{{vm.department.departmentName}}</span></dd><dt><span>Location</span></dt><dd><a ui-sref=\"locationmySuffix-detail({id:vm.department.locationId})\">{{vm.department.locationId}}</a></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"departmentmySuffix-detail.edit({id:vm.department.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\">Edit</span></button></div>');\n$templateCache.put('app/entities/department/departmentmySuffix-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myDepartmentLabel\">Create or edit a Department</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.department.id\"><label for=\"id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.department.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_departmentName\">Department Name</label><input type=\"text\" class=\"form-control\" name=\"departmentName\" id=\"field_departmentName\" ng-model=\"vm.department.departmentName\" required><div ng-show=\"editForm.departmentName.$invalid\"><p class=\"help-block\" ng-show=\"editForm.departmentName.$error.required\">This field is required.</p></div></div><div class=\"form-group\"><label for=\"field_location\">Location</label><select class=\"form-control\" id=\"field_location\" name=\"location\" ng-model=\"vm.department.locationId\" ng-options=\"location.id as location.id for location in vm.locations | orderBy:\\'id\\'\"><option value=\"\"></option></select></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/entities/department/departmentsmySuffix.html','<div><h2>Departments</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"departmentmySuffix.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span>Create new Department</span></button></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr><th><span>ID</span></th><th><span>Department Name</span></th><th><span>Location</span></th><th></th></tr></thead><tbody><tr ng-repeat=\"department in vm.departments track by department.id\"><td><a ui-sref=\"departmentmySuffix-detail({id:department.id})\">{{department.id}}</a></td><td>{{department.departmentName}}</td><td><a ui-sref=\"locationmySuffix-detail({id:department.locationId})\">{{department.locationId}}</a></td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"departmentmySuffix-detail({id:department.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"departmentmySuffix.edit({id:department.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"departmentmySuffix.delete({id:department.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-xs hidden-sm\"></span></button></div></td></tr></tbody></table></div></div>');\n$templateCache.put('app/entities/employee/employeemySuffix-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.employee.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Employee?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/employee/employeemySuffix-detail.html','<div><h2><span>Employee</span> {{vm.employee.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span>First Name</span></dt><dd><span>{{vm.employee.firstName}}</span></dd><dt><span>Last Name</span></dt><dd><span>{{vm.employee.lastName}}</span></dd><dt><span>Email</span></dt><dd><span>{{vm.employee.email}}</span></dd><dt><span>Phone Number</span></dt><dd><span>{{vm.employee.phoneNumber}}</span></dd><dt><span>Hire Date</span></dt><dd><span>{{vm.employee.hireDate | date:\\'medium\\'}}</span></dd><dt><span>Salary</span></dt><dd><span>{{vm.employee.salary}}</span></dd><dt><span>Commission Pct</span></dt><dd><span>{{vm.employee.commissionPct}}</span></dd><dt><span>Department</span></dt><dd><a ui-sref=\"departmentmySuffix-detail({id:vm.employee.departmentId})\">{{vm.employee.departmentId}}</a></dd><dt><span>Manager</span></dt><dd><a ui-sref=\"employeemySuffix-detail({id:vm.employee.managerId})\">{{vm.employee.managerId}}</a></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"employeemySuffix-detail.edit({id:vm.employee.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\">Edit</span></button></div>');\n$templateCache.put('app/entities/employee/employeemySuffix-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myEmployeeLabel\">Create or edit a Employee</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.employee.id\"><label for=\"id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.employee.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_firstName\">First Name</label><input type=\"text\" class=\"form-control\" name=\"firstName\" id=\"field_firstName\" ng-model=\"vm.employee.firstName\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_lastName\">Last Name</label><input type=\"text\" class=\"form-control\" name=\"lastName\" id=\"field_lastName\" ng-model=\"vm.employee.lastName\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_email\">Email</label><input type=\"text\" class=\"form-control\" name=\"email\" id=\"field_email\" ng-model=\"vm.employee.email\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_phoneNumber\">Phone Number</label><input type=\"text\" class=\"form-control\" name=\"phoneNumber\" id=\"field_phoneNumber\" ng-model=\"vm.employee.phoneNumber\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_hireDate\">Hire Date</label><div class=\"input-group\"><input id=\"field_hireDate\" type=\"text\" class=\"form-control\" name=\"hireDate\" datetime-picker=\"{{dateformat}}\" ng-model=\"vm.employee.hireDate\" is-open=\"vm.datePickerOpenStatus.hireDate\"> <span class=\"input-group-btn\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"vm.openCalendar(\\'hireDate\\')\"><i class=\"glyphicon glyphicon-calendar\"></i></button></span></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_salary\">Salary</label><input type=\"number\" class=\"form-control\" name=\"salary\" id=\"field_salary\" ng-model=\"vm.employee.salary\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_commissionPct\">Commission Pct</label><input type=\"number\" class=\"form-control\" name=\"commissionPct\" id=\"field_commissionPct\" ng-model=\"vm.employee.commissionPct\"></div><div class=\"form-group\"><label for=\"field_department\">Department</label><select class=\"form-control\" id=\"field_department\" name=\"department\" ng-model=\"vm.employee.departmentId\" ng-options=\"department.id as department.id for department in vm.departments\"><option value=\"\"></option></select></div><div class=\"form-group\"><label for=\"field_manager\">Manager</label><select class=\"form-control\" id=\"field_manager\" name=\"manager\" ng-model=\"vm.employee.managerId\" ng-options=\"employee.id as employee.id for employee in vm.employees\"><option value=\"\"></option></select></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/entities/employee/employeesmySuffix.html','<div><h2>Employees</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"employeemySuffix.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span>Create new Employee</span></button></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.reset()\"><th jh-sort-by=\"id\"><span>ID</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"firstName\"><span>First Name</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"lastName\"><span>Last Name</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"email\"><span>Email</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"phoneNumber\"><span>Phone Number</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"hireDate\"><span>Hire Date</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"salary\"><span>Salary</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"commissionPct\"><span>Commission Pct</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"departmentId\"><span>Department</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"managerId\"><span>Manager</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody infinite-scroll=\"vm.loadPage(vm.page + 1)\" infinite-scroll-disabled=\"vm.page >= vm.links[\\'last\\']\"><tr ng-repeat=\"employee in vm.employees track by employee.id\"><td><a ui-sref=\"employeemySuffix-detail({id:employee.id})\">{{employee.id}}</a></td><td>{{employee.firstName}}</td><td>{{employee.lastName}}</td><td>{{employee.email}}</td><td>{{employee.phoneNumber}}</td><td>{{employee.hireDate | date:\\'medium\\'}}</td><td>{{employee.salary}}</td><td>{{employee.commissionPct}}</td><td><a ui-sref=\"departmentmySuffix-detail({id:employee.departmentId})\">{{employee.departmentId}}</a></td><td><a ui-sref=\"employeemySuffix-detail({id:employee.managerId})\">{{employee.managerId}}</a></td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"employeemySuffix-detail({id:employee.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"employeemySuffix.edit({id:employee.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"employeemySuffix.delete({id:employee.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-xs hidden-sm\"></span></button></div></td></tr></tbody></table></div></div>');\n$templateCache.put('app/entities/job/jobmySuffix-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.job.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Job?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/job/jobmySuffix-detail.html','<div><h2><span>Job</span> {{vm.job.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span>Job Title</span></dt><dd><span>{{vm.job.jobTitle}}</span></dd><dt><span>Min Salary</span></dt><dd><span>{{vm.job.minSalary}}</span></dd><dt><span>Max Salary</span></dt><dd><span>{{vm.job.maxSalary}}</span></dd><dt><span>Employee</span></dt><dd><a ui-sref=\"employeemySuffix-detail({id:vm.job.employeeId})\">{{vm.job.employeeId}}</a></dd><dt><span>Task</span></dt><dd><span ng-repeat=\"task in vm.job.tasks\"><a ui-sref=\"taskmySuffix-detail({id: task.id})\">{{task.title}}</a>{{$last ? \\'\\' : \\', \\'}}</span></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"jobmySuffix-detail.edit({id:vm.job.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\">Edit</span></button></div>');\n$templateCache.put('app/entities/job/jobmySuffix-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myJobLabel\">Create or edit a Job</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.job.id\"><label for=\"id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.job.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_jobTitle\">Job Title</label><input type=\"text\" class=\"form-control\" name=\"jobTitle\" id=\"field_jobTitle\" ng-model=\"vm.job.jobTitle\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_minSalary\">Min Salary</label><input type=\"number\" class=\"form-control\" name=\"minSalary\" id=\"field_minSalary\" ng-model=\"vm.job.minSalary\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_maxSalary\">Max Salary</label><input type=\"number\" class=\"form-control\" name=\"maxSalary\" id=\"field_maxSalary\" ng-model=\"vm.job.maxSalary\"></div><div class=\"form-group\"><label for=\"field_employee\">Employee</label><select class=\"form-control\" id=\"field_employee\" name=\"employee\" ng-model=\"vm.job.employeeId\" ng-options=\"employee.id as employee.id for employee in vm.employees\"><option value=\"\"></option></select></div><div class=\"form-group\"><label for=\"field_task\">Task</label><select class=\"form-control\" id=\"field_task\" multiple=\"multiple\" name=\"task\" ng-model=\"vm.job.tasks\" ng-options=\"task as task.title for task in vm.tasks track by task.id\"></select></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/entities/job/jobsmySuffix.html','<div><h2>Jobs</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"jobmySuffix.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span>Create new Job</span></button></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span>ID</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"jobTitle\"><span>Job Title</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"minSalary\"><span>Min Salary</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"maxSalary\"><span>Max Salary</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"employeeId\"><span>Employee</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"job in vm.jobs track by job.id\"><td><a ui-sref=\"jobmySuffix-detail({id:job.id})\">{{job.id}}</a></td><td>{{job.jobTitle}}</td><td>{{job.minSalary}}</td><td>{{job.maxSalary}}</td><td><a ui-sref=\"employeemySuffix-detail({id:job.employeeId})\">{{job.employeeId}}</a></td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"jobmySuffix-detail({id:job.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"jobmySuffix.edit({id:job.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"jobmySuffix.delete({id:job.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-xs hidden-sm\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count><uib-pagination class=\"pagination-sm\" total-items=\"vm.totalItems\" items-per-page=\"vm.itemsPerPage\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pagination></div></div>');\n$templateCache.put('app/entities/job-history/job-historiesmySuffix.html','<div><h2>Job Histories</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"job-historymySuffix.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span>Create new Job History</span></button></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.reset()\"><th jh-sort-by=\"id\"><span>ID</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"startDate\"><span>Start Date</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"endDate\"><span>End Date</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"language\"><span>Language</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"jobId\"><span>Job</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"departmentId\"><span>Department</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"employeeId\"><span>Employee</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody infinite-scroll=\"vm.loadPage(vm.page + 1)\" infinite-scroll-disabled=\"vm.page >= vm.links[\\'last\\']\"><tr ng-repeat=\"jobHistory in vm.jobHistories track by jobHistory.id\"><td><a ui-sref=\"job-historymySuffix-detail({id:jobHistory.id})\">{{jobHistory.id}}</a></td><td>{{jobHistory.startDate | date:\\'medium\\'}}</td><td>{{jobHistory.endDate | date:\\'medium\\'}}</td><td>{{jobHistory.language}}</td><td><a ui-sref=\"jobmySuffix-detail({id:jobHistory.jobId})\">{{jobHistory.jobId}}</a></td><td><a ui-sref=\"departmentmySuffix-detail({id:jobHistory.departmentId})\">{{jobHistory.departmentId}}</a></td><td><a ui-sref=\"employeemySuffix-detail({id:jobHistory.employeeId})\">{{jobHistory.employeeId}}</a></td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"job-historymySuffix-detail({id:jobHistory.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"job-historymySuffix.edit({id:jobHistory.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"job-historymySuffix.delete({id:jobHistory.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-xs hidden-sm\"></span></button></div></td></tr></tbody></table></div></div>');\n$templateCache.put('app/entities/job-history/job-historymySuffix-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.jobHistory.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Job History?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/job-history/job-historymySuffix-detail.html','<div><h2><span>Job History</span> {{vm.jobHistory.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span>Start Date</span></dt><dd><span>{{vm.jobHistory.startDate | date:\\'medium\\'}}</span></dd><dt><span>End Date</span></dt><dd><span>{{vm.jobHistory.endDate | date:\\'medium\\'}}</span></dd><dt><span>Language</span></dt><dd><span>{{vm.jobHistory.language}}</span></dd><dt><span>Job</span></dt><dd><a ui-sref=\"jobmySuffix-detail({id:vm.jobHistory.jobId})\">{{vm.jobHistory.jobId}}</a></dd><dt><span>Department</span></dt><dd><a ui-sref=\"departmentmySuffix-detail({id:vm.jobHistory.departmentId})\">{{vm.jobHistory.departmentId}}</a></dd><dt><span>Employee</span></dt><dd><a ui-sref=\"employeemySuffix-detail({id:vm.jobHistory.employeeId})\">{{vm.jobHistory.employeeId}}</a></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"job-historymySuffix-detail.edit({id:vm.jobHistory.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\">Edit</span></button></div>');\n$templateCache.put('app/entities/job-history/job-historymySuffix-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myJobHistoryLabel\">Create or edit a Job History</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.jobHistory.id\"><label for=\"id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.jobHistory.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_startDate\">Start Date</label><div class=\"input-group\"><input id=\"field_startDate\" type=\"text\" class=\"form-control\" name=\"startDate\" datetime-picker=\"{{dateformat}}\" ng-model=\"vm.jobHistory.startDate\" is-open=\"vm.datePickerOpenStatus.startDate\"> <span class=\"input-group-btn\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"vm.openCalendar(\\'startDate\\')\"><i class=\"glyphicon glyphicon-calendar\"></i></button></span></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_endDate\">End Date</label><div class=\"input-group\"><input id=\"field_endDate\" type=\"text\" class=\"form-control\" name=\"endDate\" datetime-picker=\"{{dateformat}}\" ng-model=\"vm.jobHistory.endDate\" is-open=\"vm.datePickerOpenStatus.endDate\"> <span class=\"input-group-btn\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"vm.openCalendar(\\'endDate\\')\"><i class=\"glyphicon glyphicon-calendar\"></i></button></span></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_language\">Language</label><select class=\"form-control\" name=\"language\" ng-model=\"vm.jobHistory.language\" id=\"field_language\"><option value=\"FRENCH\">FRENCH</option><option value=\"ENGLISH\">ENGLISH</option><option value=\"SPANISH\">SPANISH</option></select></div><div class=\"form-group\"><label for=\"field_job\">Job</label><select class=\"form-control\" id=\"field_job\" name=\"job\" ng-model=\"vm.jobHistory.jobId\" ng-options=\"job.id as job.id for job in vm.jobs | orderBy:\\'id\\'\"><option value=\"\"></option></select></div><div class=\"form-group\"><label for=\"field_department\">Department</label><select class=\"form-control\" id=\"field_department\" name=\"department\" ng-model=\"vm.jobHistory.departmentId\" ng-options=\"department.id as department.id for department in vm.departments | orderBy:\\'id\\'\"><option value=\"\"></option></select></div><div class=\"form-group\"><label for=\"field_employee\">Employee</label><select class=\"form-control\" id=\"field_employee\" name=\"employee\" ng-model=\"vm.jobHistory.employeeId\" ng-options=\"employee.id as employee.id for employee in vm.employees | orderBy:\\'id\\'\"><option value=\"\"></option></select></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/entities/location/locationmySuffix-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.location.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Location?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/location/locationmySuffix-detail.html','<div><h2><span>Location</span> {{vm.location.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span>Street Address</span></dt><dd><span>{{vm.location.streetAddress}}</span></dd><dt><span>Postal Code</span></dt><dd><span>{{vm.location.postalCode}}</span></dd><dt><span>City</span></dt><dd><span>{{vm.location.city}}</span></dd><dt><span>State Province</span></dt><dd><span>{{vm.location.stateProvince}}</span></dd><dt><span>Country</span></dt><dd><a ui-sref=\"countrymySuffix-detail({id:vm.location.countryId})\">{{vm.location.countryId}}</a></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"locationmySuffix-detail.edit({id:vm.location.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\">Edit</span></button></div>');\n$templateCache.put('app/entities/location/locationmySuffix-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myLocationLabel\">Create or edit a Location</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.location.id\"><label for=\"id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.location.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_streetAddress\">Street Address</label><input type=\"text\" class=\"form-control\" name=\"streetAddress\" id=\"field_streetAddress\" ng-model=\"vm.location.streetAddress\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_postalCode\">Postal Code</label><input type=\"text\" class=\"form-control\" name=\"postalCode\" id=\"field_postalCode\" ng-model=\"vm.location.postalCode\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_city\">City</label><input type=\"text\" class=\"form-control\" name=\"city\" id=\"field_city\" ng-model=\"vm.location.city\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_stateProvince\">State Province</label><input type=\"text\" class=\"form-control\" name=\"stateProvince\" id=\"field_stateProvince\" ng-model=\"vm.location.stateProvince\"></div><div class=\"form-group\"><label for=\"field_country\">Country</label><select class=\"form-control\" id=\"field_country\" name=\"country\" ng-model=\"vm.location.countryId\" ng-options=\"country.id as country.id for country in vm.countries | orderBy:\\'id\\'\"><option value=\"\"></option></select></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/entities/location/locationsmySuffix.html','<div><h2>Locations</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"locationmySuffix.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span>Create new Location</span></button></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr><th><span>ID</span></th><th><span>Street Address</span></th><th><span>Postal Code</span></th><th><span>City</span></th><th><span>State Province</span></th><th><span>Country</span></th><th></th></tr></thead><tbody><tr ng-repeat=\"location in vm.locations track by location.id\"><td><a ui-sref=\"locationmySuffix-detail({id:location.id})\">{{location.id}}</a></td><td>{{location.streetAddress}}</td><td>{{location.postalCode}}</td><td>{{location.city}}</td><td>{{location.stateProvince}}</td><td><a ui-sref=\"countrymySuffix-detail({id:location.countryId})\">{{location.countryId}}</a></td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"locationmySuffix-detail({id:location.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"locationmySuffix.edit({id:location.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"locationmySuffix.delete({id:location.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-xs hidden-sm\"></span></button></div></td></tr></tbody></table></div></div>');\n$templateCache.put('app/entities/region/regionmySuffix-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.region.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Region?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/region/regionmySuffix-detail.html','<div><h2><span>Region</span> {{vm.region.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span>Region Name</span></dt><dd><span>{{vm.region.regionName}}</span></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"regionmySuffix-detail.edit({id:vm.region.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\">Edit</span></button></div>');\n$templateCache.put('app/entities/region/regionmySuffix-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myRegionLabel\">Create or edit a Region</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.region.id\"><label for=\"id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.region.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_regionName\">Region Name</label><input type=\"text\" class=\"form-control\" name=\"regionName\" id=\"field_regionName\" ng-model=\"vm.region.regionName\"></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/entities/region/regionsmySuffix.html','<div><h2>Regions</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"regionmySuffix.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span>Create new Region</span></button></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr><th><span>ID</span></th><th><span>Region Name</span></th><th></th></tr></thead><tbody><tr ng-repeat=\"region in vm.regions track by region.id\"><td><a ui-sref=\"regionmySuffix-detail({id:region.id})\">{{region.id}}</a></td><td>{{region.regionName}}</td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"regionmySuffix-detail({id:region.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"regionmySuffix.edit({id:region.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"regionmySuffix.delete({id:region.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-xs hidden-sm\"></span></button></div></td></tr></tbody></table></div></div>');\n$templateCache.put('app/entities/task/taskmySuffix-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.task.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Task?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/task/taskmySuffix-detail.html','<div><h2><span>Task</span> {{vm.task.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span>Title</span></dt><dd><span>{{vm.task.title}}</span></dd><dt><span>Description</span></dt><dd><span>{{vm.task.description}}</span></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"taskmySuffix-detail.edit({id:vm.task.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\">Edit</span></button></div>');\n$templateCache.put('app/entities/task/taskmySuffix-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myTaskLabel\">Create or edit a Task</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.task.id\"><label for=\"id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.task.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_title\">Title</label><input type=\"text\" class=\"form-control\" name=\"title\" id=\"field_title\" ng-model=\"vm.task.title\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_description\">Description</label><input type=\"text\" class=\"form-control\" name=\"description\" id=\"field_description\" ng-model=\"vm.task.description\"></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/entities/task/tasksmySuffix.html','<div><h2>Tasks</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"taskmySuffix.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span>Create new Task</span></button></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr><th><span>ID</span></th><th><span>Title</span></th><th><span>Description</span></th><th></th></tr></thead><tbody><tr ng-repeat=\"task in vm.tasks track by task.id\"><td><a ui-sref=\"taskmySuffix-detail({id:task.id})\">{{task.id}}</a></td><td>{{task.title}}</td><td>{{task.description}}</td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"taskmySuffix-detail({id:task.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"taskmySuffix.edit({id:task.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"taskmySuffix.delete({id:task.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-xs hidden-sm\"></span></button></div></td></tr></tbody></table></div></div>');\n$templateCache.put('app/layouts/error/accessdenied.html','<div ng-cloak><div class=\"row\"><div class=\"col-md-4\"><span class=\"hipster img-responsive img-rounded\"></span></div><div class=\"col-md-8\"><h1>Error Page!</h1><div class=\"alert alert-danger\">You are not authorized to access the page.</div></div></div></div>');\n$templateCache.put('app/layouts/error/error.html','<div ng-cloak><div class=\"row\"><div class=\"col-md-4\"><span class=\"hipster img-responsive img-rounded\"></span></div><div class=\"col-md-8\"><h1>Error Page!</h1><div ng-show=\"errorMessage\"><div class=\"alert alert-danger\">{{errorMessage}}</div></div></div></div></div>');\n$templateCache.put('app/layouts/navbar/navbar.html','<nav class=\"navbar navbar-default\" role=\"navigation\"><div class=\"container\"><div class=\"navbar-header\"><button type=\"button\" class=\"navbar-toggle\" ng-click=\"vm.toggleNavbar()\"><span class=\"sr-only\">Toggle navigation</span> <span class=\"icon-bar\"></span> <span class=\"icon-bar\"></span> <span class=\"icon-bar\"></span></button> <a class=\"navbar-brand logo\" href=\"#/\" ng-click=\"vm.collapseNavbar()\"><img class=\"logo-img\" src=\"content/images/logo-jhipster.png\" alt=\"logo\"> <span>Cs499assignment2</span> <span class=\"navbar-version\">v{{VERSION}}</span></a></div><div class=\"navbar-collapse\" uib-collapse=\"vm.isNavbarCollapsed\" ng-switch=\"vm.isAuthenticated()\"><ul class=\"nav navbar-nav navbar-right\"><li ui-sref-active=\"active\"><a ui-sref=\"home\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-home\"></span> <span class=\"hidden-sm\">Home</span></a></li><!-- jhipster-needle-add-element-to-menu - JHipster will add new menu items here --><li ng-class=\"{active: vm.$state.includes(\\'entity\\')}\" ng-switch-when=\"true\" uib-dropdown class=\"dropdown pointer\"><a class=\"dropdown-toggle\" uib-dropdown-toggle href=\"\" id=\"entity-menu\"><span><span class=\"glyphicon glyphicon-th-list\"></span> <span class=\"hidden-sm\">Entities </span><b class=\"caret\"></b></span></a><ul class=\"dropdown-menu\" uib-dropdown-menu><li ui-sref-active=\"active\"><a ui-sref=\"regionmySuffix\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span>Regionmy Suffix</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"countrymySuffix\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span>Countrymy Suffix</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"locationmySuffix\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span>Locationmy Suffix</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"departmentmySuffix\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span>Departmentmy Suffix</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"taskmySuffix\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span>Taskmy Suffix</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"employeemySuffix\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span>Employeemy Suffix</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"jobmySuffix\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span>Jobmy Suffix</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"job-historymySuffix\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span>Job Historymy Suffix</span></a></li><!-- jhipster-needle-add-entity-to-menu - JHipster will add entities to the menu here --></ul></li><li ng-class=\"{active: vm.$state.includes(\\'account\\')}\" uib-dropdown class=\"dropdown pointer\"><a class=\"dropdown-toggle\" uib-dropdown-toggle href=\"\" id=\"account-menu\"><span><span class=\"glyphicon glyphicon-user\"></span> <span class=\"hidden-sm\">Account </span><b class=\"caret\"></b></span></a><ul class=\"dropdown-menu\" uib-dropdown-menu><li ui-sref-active=\"active\" ng-switch-when=\"true\"><a ui-sref=\"settings\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-wrench\"></span>&nbsp; <span>Settings</span></a></li><li ui-sref-active=\"active\" ng-switch-when=\"true\"><a ui-sref=\"password\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-lock\"></span>&nbsp; <span>Password</span></a></li><li ui-sref-active=\"active\" ng-switch-when=\"true\"><a ui-sref=\"sessions\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-cloud\"></span>&nbsp; <span>Sessions</span></a></li><li ui-sref-active=\"active\" ng-switch-when=\"true\"><a href=\"\" ng-click=\"vm.logout()\" id=\"logout\"><span class=\"glyphicon glyphicon-log-out\"></span>&nbsp; <span>Sign out</span></a></li><li ui-sref-active=\"active\" ng-switch-when=\"false\"><a href=\"\" ng-click=\"vm.login()\" id=\"login\"><span class=\"glyphicon glyphicon-log-in\"></span>&nbsp; <span>Sign in</span></a></li><li ui-sref-active=\"active\" ng-switch-when=\"false\"><a ui-sref=\"register\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-plus-sign\"></span>&nbsp; <span>Register</span></a></li></ul></li><li ng-class=\"{active: vm.$state.includes(\\'admin\\')}\" ng-switch-when=\"true\" has-authority=\"ROLE_ADMIN\" uib-dropdown class=\"dropdown pointer\"><a class=\"dropdown-toggle\" uib-dropdown-toggle href=\"\" id=\"admin-menu\"><span><span class=\"glyphicon glyphicon-tower\"></span> <span class=\"hidden-sm\">Administration</span> <b class=\"caret\"></b></span></a><ul class=\"dropdown-menu\" uib-dropdown-menu><li ui-sref-active=\"active\"><a ui-sref=\"user-management\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-user\"></span>&nbsp; <span>User management</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"jhi-metrics\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-dashboard\"></span>&nbsp; <span>Metrics</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"jhi-health\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-heart\"></span>&nbsp; <span>Health</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"jhi-configuration\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-list-alt\"></span>&nbsp; <span>Configuration</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"audits\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-bell\"></span>&nbsp; <span>Audits</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"logs\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-tasks\"></span>&nbsp; <span>Logs</span></a></li><li ng-show=\"vm.swaggerEnabled\" ui-sref-active=\"active\"><a ui-sref=\"docs\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-book\"></span>&nbsp; <span>API</span></a></li><!-- jhipster-needle-add-element-to-admin-menu - JHipster will add entities to the admin menu here --><li ng-hide=\"vm.inProduction\"><a href=\"/h2-console\" target=\"_tab\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-hdd\"></span>&nbsp; <span>Database</span></a></li></ul></li></ul></div></div></nav>');\n$templateCache.put('app/account/reset/finish/reset.finish.html','<div><div class=\"row\"><div class=\"col-md-4 col-md-offset-4\"><h1>Reset password</h1><div class=\"alert alert-danger\" ng-show=\"vm.keyMissing\"><strong>The password reset key is missing.</strong></div><div class=\"alert alert-warning\" ng-hide=\"vm.success || vm.keyMissing\"><p>Choose a new password</p></div><div class=\"alert alert-danger\" ng-show=\"vm.error\"><p>Your password couldn\\'t be reset. Remember a password request is only valid for 24 hours.</p></div><div class=\"alert alert-success\" ng-show=\"vm.success\"><p><strong>Your password has been reset.</strong> Please <a class=\"alert-link\" href=\"\" ng-click=\"vm.login()\">sign in</a>.</p></div><div class=\"alert alert-danger\" ng-show=\"vm.doNotMatch\">The password and its confirmation do not match!</div><div ng-hide=\"vm.keyMissing\"><form ng-show=\"!vm.success\" name=\"form\" role=\"form\" novalidate ng-submit=\"vm.finishReset()\" show-validation><div class=\"form-group\"><label class=\"control-label\" for=\"password\">New password</label><input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" placeholder=\"New password\" ng-model=\"vm.resetAccount.password\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.password.$dirty && form.password.$invalid\"><p class=\"help-block\" ng-show=\"form.password.$error.required\">Your password is required.</p><p class=\"help-block\" ng-show=\"form.password.$error.minlength\">Your password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.password.$error.maxlength\">Your password cannot be longer than 50 characters.</p></div><password-strength-bar password-to-check=\"vm.resetAccount.password\"></password-strength-bar></div><div class=\"form-group\"><label class=\"control-label\" for=\"confirmPassword\">New password confirmation</label><input type=\"password\" class=\"form-control\" id=\"confirmPassword\" name=\"confirmPassword\" placeholder=\"Confirm the new password\" ng-model=\"vm.confirmPassword\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\"><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.required\">Your password confirmation is required.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.minlength\">Your password confirmation is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.maxlength\">Your password confirmation cannot be longer than 50 characters.</p></div></div><button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-primary\">Reset Password</button></form></div></div></div></div>');\n$templateCache.put('app/account/reset/request/reset.request.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h1>Reset your password</h1><div class=\"alert alert-danger\" ng-show=\"vm.errorEmailNotExists\"><strong>E-Mail address isn\\'t registered!</strong> Please check and try again.</div><div class=\"alert alert-warning\" ng-hide=\"vm.success\"><p>Enter the e-mail address you used to register.</p></div><div class=\"alert alert-success\" ng-show=\"vm.success == \\'OK\\'\"><p>Check your e-mails for details on how to reset your password.</p></div><form ng-show=\"!vm.success\" name=\"form\" role=\"form\" novalidate ng-submit=\"vm.requestReset()\" show-validation><div class=\"form-group\"><label class=\"control-label\" for=\"email\">E-mail</label><input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" placeholder=\"Your e-mail\" ng-model=\"vm.resetAccount.email\" ng-minlength=\"5\" ng-maxlength=\"100\" required><div ng-show=\"form.email.$dirty && form.email.$invalid\"><p class=\"help-block\" ng-show=\"form.email.$error.required\">Your e-mail is required.</p><p class=\"help-block\" ng-show=\"form.email.$error.email\">Your e-mail is invalid.</p><p class=\"help-block\" ng-show=\"form.email.$error.minlength\">Your e-mail is required to be at least 5 characters.</p><p class=\"help-block\" ng-show=\"form.email.$error.maxlength\">Your e-mail cannot be longer than 100 characters.</p></div></div><button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-primary\">Reset</button></form></div></div></div>');}]);})();"],"sourceRoot":"/source/"}